<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grocery store</title>
  <icon>https://www.gravatar.com/avatar/f5df881e6b9e44b6e08f7631b579ce96</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weblog.chengyangyang.com/"/>
  <updated>2019-11-03T15:33:57.507Z</updated>
  <id>http://weblog.chengyangyang.com/</id>
  
  <author>
    <name>Yancy</name>
    <email>yancyango@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KubeSphere CI/CD+GitLab+Harbor将Spring Boot项目部署至Kubernetes</title>
    <link href="http://weblog.chengyangyang.com/2019/10/18/k8s-Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/KubeSphere%20CI:CD+GitLab+Harbor%E5%B0%86Spring%20Boot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%87%B3Kubernetes/"/>
    <id>http://weblog.chengyangyang.com/2019/10/18/k8s-Docker容器技术/KubeSphere CI:CD+GitLab+Harbor将Spring Boot项目部署至Kubernetes/</id>
    <published>2019-10-18T03:33:17.000Z</published>
    <updated>2019-11-03T15:33:57.507Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image-life.chengyangyang.com/Kubernetes-spring%20boot.png" alt=""></p><a id="more"></a>   <p>KubeSphere 集成了 <code>Harbor</code> 和 <code>GitLab</code>，内置的 <code>Harbor</code> 和 <code>GitLab</code> 作为可选安装项，需在安装前进行配置开启安装。用户可以根据团队项目的需求来安装，方便对项目的镜像和代码进行管理，非常适合内网环境下的 CI/CD 流水线构建。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本示例演示通过内置 GitLab 仓库中 <code>Spring Boot</code> 项目的 <code>Jenkinsfile</code> 来创建流水线，流水线共包含 7 个阶段.</p><p>1.首先会将 GitLab 中的源码构建成镜像.<br>2.然后推送到 Harbor 私有仓库.<br>3.最终将一个输出 “Hello,World!” 的Web示例部署到 KubeSphere 集群中的开发环境 (Dev) 和生产环境 (Production) ，这两个环境在底层的 Kubernetes 是以项目 (Namespace) 为单位进行资源隔离的。</p><p>##操作示例<br>流水线概览<br>下面的流程图简单说明了流水线完整的工作过程：<br><img src="https://image-life.chengyangyang.com/kubesphere01.jpeg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">流程说明：</div><div class="line"></div><div class="line">阶段一. Checkout SCM: 拉取 GitLab 仓库代码</div><div class="line">阶段二. Unit <span class="built_in">test</span>: 单元测试，如果测试通过了才继续下面的任务</div><div class="line">阶段三. sonarQube analysis：sonarQube 代码质量检测</div><div class="line">阶段四. Build &amp; push snapshot image: 根据行为策略中所选择分支来构建镜像，并将 tag 为 SNAPSHOT-<span class="variable">$BRANCH_NAME</span>-<span class="variable">$BUILD_NUMBER</span> 推送至 Harbor (其中 <span class="variable">$BUILD_NUMBER</span> 为 pipeline 活动列表的运行序号)。</div><div class="line">阶段五. Push latest image: 将 master 分支打上 tag 为 latest，并推送至 Harbor。</div><div class="line">阶段六. Deploy to dev: 将 master 分支部署到 Dev 环境，此阶段需要审核。</div><div class="line">阶段七. Push with tag: 生成 tag 并 release 到 GitLab，并推送到 Harbor。</div><div class="line">阶段八. Deploy to production: 将发布的 tag 部署到 Production 环境。</div></pre></td></tr></table></figure><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><h4 id="第一步：修改-CoreDNS-配置"><a href="#第一步：修改-CoreDNS-配置" class="headerlink" title="第一步：修改 CoreDNS 配置"></a>第一步：修改 CoreDNS 配置</h4><p>通过 CoreDNS 的 hosts 插件配置 KubeSphere 集群的 DNS 服务，使集群内部可通过 hostname 域名访问外部服务，<a href="">参考 修改系统配置 - 如何修改 CoreDNS 配置</a>。</p><h4 id="第二步：上传基础镜像到-Harbor"><a href="#第二步：上传基础镜像到-Harbor" class="headerlink" title="第二步：上传基础镜像到 Harbor"></a>第二步：上传基础镜像到 Harbor</h4><p><a href="">参考 如何上传基础镜像到 Harbor</a> 导入预先准备好的基础镜像 <code>java:openjdk-8-jre-alpine</code>。</p><h4 id="创建凭证"><a href="#创建凭证" class="headerlink" title="创建凭证"></a>创建凭证</h4><p>使用项目普通用户 <code>project-regular</code> 登录 KubeSphere，进入已创建的 DevOps 工程，开始创建凭证。</p><p>1、本示例代码仓库中的 Jenkinsfile 需要用到 Harbor、GitLab 和 Kubernetes (kubeconfig 用于访问接入正在运行的 Kubernetes 集群) 等一共 3 个凭证 (credentials) ，参考 <a href="">创建凭证</a> 依次创建这三个凭证。</p><p>2、然后<a href="">参考 访问 SonarQube 并创建 Token</a>，创建一个 Java 的 Token 并复制。</p><p>3、最后在 KubeSphere 中进入 devops-demo 的 DevOps 工程中，与上面步骤类似，在 凭证 下点击 创建，创建一个类型为 秘密文本 的凭证，凭证 ID 命名为 sonar-token，密钥为上一步复制的 token 信息，完成后点击 确定。<br><img src="https://image-static.segmentfault.com/248/604/24860477-5d74a19813231_articlex" alt=""></p><p>至此，4 个凭证已经创建完成，下一步需要在示例仓库中的 jenkinsfile 修改对应的四个凭证 ID 为用户自己创建的凭证 ID。</p><p><img src="https://segmentfault.com/img/remote/1460000020325260?w=800&amp;h=167" alt=""></p><h4 id="修改-Jenkinsfile"><a href="#修改-Jenkinsfile" class="headerlink" title="修改 Jenkinsfile"></a>修改 Jenkinsfile</h4><h4 id="第一步：进入项目"><a href="#第一步：进入项目" class="headerlink" title="第一步：进入项目"></a>第一步：进入项目</h4><p>根据前提条件中的要求，现应已按照 安装 GitLab 要求正确将 GitHub 中的 devops-java-sample 导入到GitLab中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注：若因网络限制，无法从 GitHub 导入，请自行 <span class="built_in">clone</span> 至其他服务器，然后上传至 GitLab 仓库，仓库名称请保持一致。</div></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/401/938/401938644-5d74bd186e925_articlex" alt=""></p><h4 id="第二步：修改-Jenkinsfile"><a href="#第二步：修改-Jenkinsfile" class="headerlink" title="第二步：修改 Jenkinsfile"></a>第二步：修改 Jenkinsfile</h4><p>​ 1、在 根目录 进入 Jenkinsfile-on-prem。</p><p><img src="https://image-static.segmentfault.com/525/313/525313189-5d74bd1c8fe8d_articlex" alt=""></p><p> 2、在 GitLab UI 点击编辑 <code>Edit</code>，需要修改如下环境变量 (environment) 的值。</p><p><img src="https://segmentfault.com/img/remote/1460000020325263?w=800&amp;h=537" alt=""></p><table><thead><tr><th>修改项</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>GITLAB_CREDENTIAL_ID</td><td>GITLAB_CREDENTIAL_ID</td><td>填写创建凭证步骤中的 Harbor 凭证 ID，用于登录您的 Harbor 仓库</td></tr></tbody></table><p>GITLAB_CREDENTIAL_ID |gitlab-id|填写创建凭证步骤中的 GitLab 凭证 ID，用于推送 tag 到 GitLab 仓库<br> |<br>| KUBECONFIG_CREDENTIAL_ID     | demo-kubeconfig |kubeconfig 凭证 ID，用于访问接入正在运行的 Kubernetes 集群  |<br> |<br>| REGISTRY     | harbor.devops.kubesphere.local:3028 | 默认为 Harbor 域名，用于镜像的推送 |<br> |<br>| HARBOR_NAMESPACE |library  | 默认为 Harbor 下的 library 项目，可根据实际情况更改项目名称 |<br> |<br>| GITLAB_ACCOUNT |admin1  |  GitLab用户，默认为admin1|<br>| APP_NAME |  devops-docs-sample| 应用名称 |<br> |<br>| SONAR_CREDENTIAL_ID | sonar-token | 填写创建凭证步骤中的 sonarQube token凭证 ID，用于代码质量检测 |<br> |</p><h4 id="填写创建凭证步骤中的-sonarQube-token凭证-ID，用于代码质量检测"><a href="#填写创建凭证步骤中的-sonarQube-token凭证-ID，用于代码质量检测" class="headerlink" title="填写创建凭证步骤中的 sonarQube token凭证 ID，用于代码质量检测"></a>填写创建凭证步骤中的 sonarQube token凭证 ID，用于代码质量检测</h4><p>CI/CD 流水线会根据示例项目的 <a href="https://github.com/kubesphere/devops-java-sample/tree/master/deploy" target="_blank" rel="external">yaml 模板文件</a>，最终将示例分别部署到 Dev 和 Production 这两个项目 (Namespace) 环境中，项目名为 <code>kubesphere-sample-dev</code> 和 <code>kubesphere-sample-prod</code>，这两个项目需要预先在控制台依次创建。</p><p><img src="https://image-static.segmentfault.com/392/737/392737408-5d74a1ab20b2f_articlex" alt=""></p><h3 id="创建流水线"><a href="#创建流水线" class="headerlink" title="创建流水线"></a>创建流水线</h3><p>第一步：填写基本信息</p><p>1、进入已创建的 DevOps 工程，选择左侧菜单栏的 流水线，然后点击 创建。<br><img src="https://image-static.segmentfault.com/112/783/1127834034-5d74a1af7bc8f_articlex" alt=""></p><p>2、在弹出的窗口中，输入流水线的基本信息。</p><ul><li>名称：为创建的流水线起一个简洁明了的名称，便于理解和搜索</li><li>描述信息：简单介绍流水线的主要特性，帮助进一步了解流水线的作用</li><li>代码仓库：点击选择代码仓库，代码仓库需已存在 Jenkinsfile</li></ul><p><img src="https://image-static.segmentfault.com/326/213/3262139467-5d74a1b03add8_articlex" alt=""></p><h3 id="第二步：添加-Git-仓库"><a href="#第二步：添加-Git-仓库" class="headerlink" title="第二步：添加 Git 仓库"></a>第二步：添加 Git 仓库</h3><p>1、点击代码仓库，以添加 GitLab 仓库为例。<br><img src="https://image-static.segmentfault.com/328/118/3281184881-5d74bd2a48e37_articlex" alt=""></p><p>2、输入仓库URl，默认为<code>http://gitlab.devops.kubesphere.local:30080/admin1/devops-java-sample.git</code>，</p><p>注意：GitLab 中提供的 HTTP 和 SSH URI 有误。HTTP URI 需要手动加上端口号30080，SSH URI 需要手动加上协议 ssh:// 和端口号：30090。</p><p>证书选择之前创建的 <code>gitlab-id</code>。</p><p>点击 「保存」 后进行下一步。</p><h3 id="第三步：高级设置"><a href="#第三步：高级设置" class="headerlink" title="第三步：高级设置"></a>第三步：高级设置</h3><p>完成代码仓库相关设置后，进入高级设置页面，高级设置支持对流水线的构建记录、行为策略、定期扫描等设置的定制化，以下对用到的相关配置作简单释义。</p><p>1、构建设置中，勾选<code>丢弃旧的构建</code>，此处的 保留分支的天数 和 保留分支的最大个数 默认为 -1。</p><p><img src="https://image-static.segmentfault.com/211/799/2117994278-5d74a1b5ceb93_articlex" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">说明：</div><div class="line"></div><div class="line">分支设置的保留分支的天数和保持分支的最大个数两个选项可以同时对分支进行作用，只要某个分支的保留天数和个数不满足任何一个设置的条件，则将丢弃该分支。假设设置的保留天数和个数为 2 和 3，则分支的保留天数一旦超过 2 或者保留个数超过 3，则将丢弃该分支。默认两个值为 -1，表示不自动删除分支。</div><div class="line"></div><div class="line">丢弃旧的分支将确定何时应丢弃项目的分支记录。分支记录包括控制台输出，存档工件以及与特定分支相关的其他元数据。保持较少的分支可以节省 Jenkins 所使用的磁盘空间，我们提供了两个选项来确定应何时丢弃旧的分支：</div><div class="line"></div><div class="line">* 保留分支的天数：如果分支达到一定的天数，则丢弃分支。</div><div class="line">* 保留分支的个数：如果已经存在一定数量的分支，则丢弃最旧的分支。</div></pre></td></tr></table></figure><p>2、默认的 脚本路径 为 Jenkinsfile，需要修改为 <code>Jenkinsfile-on-prem</code>。</p><p>注：路径是 Jenkinsfile 在代码仓库的路径，表示它在示例仓库的根目录，若文件位置变动则需修改其脚本路径。</p><p>3、在 扫描 <code>Repo Trigger</code> 勾选 如果没有扫描触发，则定期扫描，扫描时间间隔可根据团队习惯设定，本示例设置为 <code>5 minutes</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">说明：定期扫描是设定一个周期让流水线周期性地扫描远程仓库，根据 行为策略 查看仓库有没有代码更新或新的 PR。</div><div class="line">Webhook 推送：</div><div class="line"></div><div class="line">Webhook 是一种高效的方式可以让流水线发现远程仓库的变化并自动触发新的运行，GitHub 和 Git (如 Gitlab) 触发 Jenkins 自动扫描应该以 Webhook 为主，以上一步在 KubeSphere 设置定期扫描为辅。在本示例中，可以通过手动运行流水线，如需设置自动扫描远端分支并触发运行，详见 设置自动触发扫描 - GitHub SCM。</div></pre></td></tr></table></figure><p>完成高级设置后点击 <code>创建</code>。</p><p><img src="https://image-static.segmentfault.com/179/211/1792115576-5d74bd2c13193_articlex" alt=""></p><h3 id="第四步：运行流水线"><a href="#第四步：运行流水线" class="headerlink" title="第四步：运行流水线"></a>第四步：运行流水线</h3><p>流水线创建后，点击浏览器的 刷新 按钮，可见一条自动触发远程分支后的运行记录。</p><p>1、点击右侧 运行，将根据上一步的 行为策略 自动扫描代码仓库中的分支，在弹窗选择需要构建流水线的 <code>master</code>分支，系统将根据输入的分支加载 Jenkinsfile (此示例为根目录下的 Jenkinsfile-on-prem)。</p><p>2、由于仓库的 Jenkinsfile-on-prem 中 <code>TAG_NAME: defaultValue</code> 没有设置默认值，因此在这里的 <code>TAG_NAME</code> 可以输入一个 tag 编号，比如输入 v0.0.1。</p><p>3、点击 确定，将新生成一条流水线活动开始运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">说明: tag 用于在 GitLab 和 Harbor 中分别生成带有 tag 的 release 和镜像。</div><div class="line">注意: 在主动运行流水线以发布 release 时，TAG_NAME 不应与之前代码仓库中所存在的 tag 名称重复，如果重复会导致流水线的运行失败。</div></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/309/109/3091097851-5d74a1b8ab5dd_articlex" alt=""></p><p>至此，流水线 已完成创建并开始运行。</p><p>注：点击 分支 切换到分支列表，查看流水线具体是基于哪些分支运行，这里的分支则取决于上一步 行为策略 的发现分支策略。</p><p><img src="https://image-static.segmentfault.com/413/700/4137005351-5d74a1ba4c1f4_articlex" alt=""></p><h4 id="第五步：审核流水线"><a href="#第五步：审核流水线" class="headerlink" title="第五步：审核流水线"></a>第五步：审核流水线</h4><p>为方便演示，此处默认用当前账户来审核，当流水线执行至 input 步骤时状态将暂停，需要手动点击 继续，流水线才能继续运行。注意，在 Jenkinsfile-on-prem 中分别定义了三个阶段 (stage) 用来部署至 Dev 环境和 Production 环境以及推送 tag，因此在流水线中依次需要对<code>deploy to dev, push with tag, deploy to production</code>这三个阶段审核 3次，若不审核或点击 终止 则流水线将不会继续运行。<br><img src="https://image-static.segmentfault.com/118/242/1182424861-5d74a1bb4324b_articlex" alt=""></p><p>说明：在实际的开发生产场景下，可能需要更高权限的管理员或运维人员来审核流水线和镜像，并决定是否允许将其推送至代码或镜像仓库，以及部署至开发或生产环境。Jenkinsfile 中的 input 步骤支持指定用户审核流水线，比如要指定用户名为 project-admin 的用户来审核，可以在 Jenkinsfile 的 input 函数中追加一个字段，如果是多个用户则通过逗号分隔，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">···</div><div class="line">input(id: <span class="string">'release-image-with-tag'</span>, message: <span class="string">'release image with tag?'</span>, submitter: <span class="string">'project-admin,project-admin1'</span>)</div><div class="line">···</div></pre></td></tr></table></figure><h4 id="查看流水线"><a href="#查看流水线" class="headerlink" title="查看流水线"></a>查看流水线</h4><p>1、点击流水线中 活动 列表下当前正在运行的流水线序列号，页面展现了流水线中每一步骤的运行状态，注意，流水线刚创建时处于初始化阶段，可能仅显示日志窗口，待初始化 (约一分钟) 完成后即可看到流水线。黑色框标注了流水线的步骤名称，示例中流水线共 8 个 stage，分别在 <a href="https://github.com/kubesphere/devops-java-sample/blob/master/Jenkinsfile-on-prem" target="_blank" rel="external">Jenkinsfile-on-prem</a> 中被定义。</p><p><img src="https://image-static.segmentfault.com/130/051/1300511033-5d74a1bd06ab7_articlex" alt=""></p><p>2、当前页面中点击右上方的 <code>查看日志</code>，查看流水线运行日志。页面展示了每一步的具体日志、运行状态及时间等信息，点击左侧某个具体的阶段可展开查看其具体的日志。日志可下载至本地，如出现错误，下载至本地更便于分析定位问题。</p><p><img src="https://image-static.segmentfault.com/106/075/1060755961-5d74a1bf6212d_articlex" alt=""></p><h4 id="验证运行结果"><a href="#验证运行结果" class="headerlink" title="验证运行结果"></a>验证运行结果</h4><p>1、若流水线执行成功，点击该流水线下的 <code>代码质量</code>，即可看到通过 sonarQube 的代码质量检测结果，如下图(仅供参考)。</p><p><img src="https://image-static.segmentfault.com/385/924/3859245154-5d74a1c1a1867_articlex" alt=""></p><p>2、流水线最终 build 的 Docker 镜像也将被成功地 push 到 Harbor 中，我们在 Jenkinsfile-on-prem 中已经配置过 Harbor，登录 Harbor 查看镜像的 push 结果，可以看到 tag 为 snapshot、TAG_NAME(master-1)、latest 的镜像已经被 push 到 Harbor，并且在 GitLab 中也生成了一个新的 tag 和 release。示例网站最终将以 deployment 和 service 分别部署到 KubeSphere 的 <code>kubesphere-sample-dev</code> 和 <code>kubesphere-sample-prod</code> 项目环境中。</p><table><thead><tr><th>环境</th><th>访问地址</th><th>所在项目 (Namespace)</th><th>部署 (Deployment)</th><th>服务 (Service)</th></tr></thead><tbody><tr><td>Dev</td><td>公网 IP : 30861 (${EIP}:${NODEPORT})</td><td>kubesphere-sample-dev</td><td>ks-sample-dev</td><td>ks-sample-dev</td></tr><tr><td></td></tr><tr><td>Production</td><td>公网 IP : 30961 (${EIP}:${NODEPORT})</td><td>kubesphere-sample-prod</td><td>ks-sample</td><td>ks-sample</td></tr></tbody></table><p>3、可通过 KubeSphere 回到项目列表，依次查看之前创建的两个项目中的部署和服务的状态。例如，以下查看 <code>kubesphere-sample-prod</code> 项目下的部署。</p><p>进入该项目，在左侧的菜单栏点击 <strong>工作负载 → 部署</strong>，可以看到 ks-sample 已创建成功。正常情况下，部署的状态应该显示 运行中。</p><p><img src="https://image-static.segmentfault.com/226/760/2267601725-5d74bd37704a9_articlex" alt=""></p><p>4、在菜单栏中选择 <strong>网络与服务 → 服务</strong> 也可以查看对应创建的服务，可以看到该服务对外暴露的节点端口 (NodePort) 是 <code>30961</code>。<br><img src="https://image-static.segmentfault.com/316/953/3169535305-5d74a1c5294c3_articlex" alt=""></p><p>5、查看推送到您个人的 Harbor 中的镜像，可以看到 <code>devops-java-sample</code> 就是 APP_NAME 的值，而 tag也是在 <code>Jenkinsfile-on-prem</code> 中定义的 tag。</p><p>访问示例服务<br>在浏览器或通过后台命令访问部署到 KubeSphere Dev 和 Production 环境的服务：</p><p>Dev 环境</p><p>例如，浏览器访问 <code>http://192.168.0.20:30861/</code>(即 <a href="http://IP:NodePort/" target="_blank" rel="external">http://IP:NodePort/</a>) 可访问到 Hello,World! 页面，或通过后台命令验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl http://192.168.0.20:30861</div><div class="line">Hello,World!</div><div class="line">Prodcution 环境</div></pre></td></tr></table></figure><p>同上可访问 <a href="http://192.168.0.20:30961/" target="_blank" rel="external">http://192.168.0.20:30961/</a> (即 <a href="http://IP:NodePort/" target="_blank" rel="external">http://IP:NodePort/</a>) 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl http://192.168.0.20:30961</div><div class="line">Hello,World!</div></pre></td></tr></table></figure><p>KubeSphere (<a href="https://github.com/kubesphere" target="_blank" rel="external">https://github.com/kubesphere</a>… 是一个开源的以应用为中心的容器管理平台，支持部署在任何基础设施之上，并提供简单易用的 UI，极大减轻日常开发、测试、运维的复杂度，旨在解决 Kubernetes 本身存在的存储、网络、安全和易用性等痛点，帮助企业轻松应对敏捷开发与自动化监控运维、端到端应用交付、微服务治理、多租户管理、多集群管理、服务与网络管理、镜像仓库、AI 平台、边缘计算等业务场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image-life.chengyangyang.com/Kubernetes-spring%20boot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://weblog.chengyangyang.com/categories/Docker/"/>
    
    
      <category term="Operation and maintenance Road" scheme="http://weblog.chengyangyang.com/tags/Operation-and-maintenance-Road/"/>
    
  </entry>
  
  <entry>
    <title>Logstash分享,online生产环境的使用,online日志规范。</title>
    <link href="http://weblog.chengyangyang.com/2018/05/13/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%10%E5%B9%B3%E5%8F%B0/Elasticsearch/Logstash%E5%88%86%E4%BA%AB,online%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E4%BD%BF%E7%94%A8,online%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83%E3%80%82/"/>
    <id>http://weblog.chengyangyang.com/2018/05/13/日志分析平台/Elasticsearch/Logstash分享,online生产环境的使用,online日志规范。/</id>
    <published>2018-05-13T09:56:03.000Z</published>
    <updated>2019-10-30T16:17:39.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Logstash分享-online生产环境的使用-online日志规范。"><a href="#Logstash分享-online生产环境的使用-online日志规范。" class="headerlink" title="Logstash分享,online生产环境的使用,online日志规范。"></a>Logstash分享,online生产环境的使用,online日志规范。</h3><p>写这篇文章，主要分享几点: 因为学所有学，既然学何不深度去了解~</p><ol><li>什么是Logstash？</li><li>logstash运行在什么环境下对应的版本是多少？</li><li>logstash工作原理？</li><li>online日志现在是如何规范？</li><li>如何写logstash收集conf文件？ </li></ol><p><img src="https://community-cdn-digitalocean-com.global.ssl.fastly.net/assets/tutorials/images/large/elk---twitter.png?1428343890" alt=""></p><a id="more"></a><h4 id="1-什么是Logstash？"><a href="#1-什么是Logstash？" class="headerlink" title="1. 什么是Logstash？"></a>1. 什么是Logstash？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logstash 是有管道输送能力的开源数据收集引擎。它可以动态地从分散的数据源收集数据，并且标准化数据输送到你选择的目的地。它是一款日志而不仅限于日志的搜集处理框架，将分散多样的数据搜集自定义处理并输出到指定位置。</div></pre></td></tr></table></figure><h4 id="2-logstash运行在什么环境下对应的版本是多少？"><a href="#2-logstash运行在什么环境下对应的版本是多少？" class="headerlink" title="2. logstash运行在什么环境下对应的版本是多少？"></a>2. logstash运行在什么环境下对应的版本是多少？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">logstash更新比较快，跟es一样，2.4以上直接升级到5.0 </div><div class="line"></div><div class="line">5.0x以下版本运行环境 需要JDK1.7以上版本.</div><div class="line">5.0x版本运行环境 需要JDK1.8以上版本。</div><div class="line"></div><div class="line">安装方法很多：yum,rpm,tar.gz源码， 支持Docker镜像运行。</div></pre></td></tr></table></figure><h4 id="3-logstash工作原理？"><a href="#3-logstash工作原理？" class="headerlink" title="3. logstash工作原理？"></a>3. logstash工作原理？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Logstash使用管道方式进行日志的搜集处理和输出。有点类似linux系统的管道命令 xxx | ccc | ddd，xxx执行完了会执行ccc，然后执行ddd。</div><div class="line"></div><div class="line">logstash收集日志基本流程: input--&gt;codec--&gt;filter--&gt;codec--&gt;output </div><div class="line">1.input:从哪里收集日志。 </div><div class="line">2.filter:发出去前进行过滤  （不是必须的）</div><div class="line">3.output:输出至Elasticsearch或Redis消息队列 </div><div class="line">4.codec:输出至前台，方便边实践边测试 </div><div class="line">5.数据量不大日志按照月来进行收集</div></pre></td></tr></table></figure><p><img src="https://www.elastic.co/guide/en/logstash/current/static/images/basic_logstash_pipeline.png" alt=""></p><h4 id="4-日志现在收集规范："><a href="#4-日志现在收集规范：" class="headerlink" title="4.日志现在收集规范："></a>4.日志现在收集规范：</h4><p>是记录用户访问行为和服务运行状态的信息，是应用软件基本的输出单元，做到日志输出位置、命名、格式规范，可以大大方便后续应用服务监控和数据分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">1. 日志目录结构</div><div class="line">2. 日志类型</div><div class="line">3. 日志要求配置</div><div class="line">4. 日志级别</div><div class="line">5. 日志分割与周期</div><div class="line">6. 日志保留要求</div><div class="line"></div><div class="line">现在我们online 日志规范架构：</div><div class="line"></div><div class="line"><span class="comment">###之前应用日志规范：</span></div><div class="line"></div><div class="line">一个Tomcat服务logs目录下面的日志：定期对catalina.out几个G按两个小时进行压缩一次，保留7天，每天备份到<span class="built_in">log</span>-server服务器。</div><div class="line"></div><div class="line">logstash收集catalina.out所有日志。</div><div class="line"></div><div class="line"><span class="comment">###现在应用日志规范:</span></div><div class="line"></div><div class="line">一个Tomcat服务logs目录下面的日志：定期对catalina.out每天1M多日志进行压缩一次，保留7天，每天备份到<span class="built_in">log</span>-server服务器。</div><div class="line"></div><div class="line">logstash收集每台应用输出应用日志：error.log &amp; info.log</div><div class="line"></div><div class="line">好处分别为四个： </div><div class="line">1.对索引的要求细分和kibana查询日志速度无疑会变更快。</div><div class="line">2.查询日志快速定位。</div><div class="line">3.不会对catalina.out日志进行大级别日志写入，那里只存放系统日志，例如：发布日志，请求第三方地址日志。</div><div class="line">4.日志开发可以在Java代码<span class="built_in">log</span>4j文件大小指定压缩，每天定时清空，不需要我们写脚本处理。多个脚本定时在运行，特别乱。</div></pre></td></tr></table></figure><h4 id="5-如何写logstash收集conf文件？"><a href="#5-如何写logstash收集conf文件？" class="headerlink" title="5.如何写logstash收集conf文件？"></a>5.如何写logstash收集conf文件？</h4><p>下面是我写好的online logstash收集代码，根据之前日志收集方式，现在修过几个地方：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"> input &#123;</div><div class="line">       stdin&#123;&#125;  <span class="comment">#可以标准输入读数据 （可以放可以不放）</span></div><div class="line">file &#123;</div><div class="line">  <span class="built_in">type</span> =&gt; <span class="string">"tms-task-info"</span></div><div class="line">  path =&gt; [<span class="string">"/data/tms-task_new/logs/info.log"</span>]</div><div class="line">  start_position =&gt; <span class="string">"beginning"</span> <span class="comment">#从文件开始处读写</span></div><div class="line">     &#125;</div><div class="line">file &#123;</div><div class="line">  <span class="built_in">type</span> =&gt; <span class="string">"tms-task-error"</span></div><div class="line">  path =&gt; [<span class="string">"/data/tms-task_new/logs/error.log"</span>]</div><div class="line">  start_position =&gt; <span class="string">"beginning"</span> <span class="comment">#从文件开始处读写</span></div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123; <span class="comment">#过滤方式</span></div><div class="line"></div><div class="line">        multiline &#123;</div><div class="line">                        pattern =&gt; <span class="string">"^\d+-\d+-\d+"</span></div><div class="line">                        negate =&gt; <span class="literal">true</span></div><div class="line">                        what =&gt; <span class="string">"previous"</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">output &#123;</div><div class="line"><span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tms-task-info"</span> &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">          hosts =&gt; [<span class="string">"10.155.90.141:9200"</span>,<span class="string">"10.155.90.176:9200"</span>]</div><div class="line">     index =&gt; <span class="string">"log-tms-task-info-%&#123;+YYYY.MM.dd&#125;"</span></div><div class="line">   document_type =&gt; <span class="string">"log"</span></div><div class="line">      template_overwrite =&gt; <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tms-task-error"</span> &#123;</div><div class="line">          elasticsearch &#123;</div><div class="line">          hosts =&gt; [<span class="string">"10.155.90.141:9200"</span>,<span class="string">"10.155.90.176:9200"</span>]</div><div class="line">          index =&gt; <span class="string">"log-tms-task-error-%&#123;+YYYY.MM.dd&#125;"</span></div><div class="line">          document_type =&gt; <span class="string">"log"</span></div><div class="line">          template_overwrite =&gt; <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">stdout&#123;</div><div class="line">    codec=&gt;rubydebug  <span class="comment">#控制台输出 (不建议配置，测试阶段可以调试使用)</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">有一些比较有用的配置项，可以用来指定 FileWatch 库的行为：</div><div class="line"></div><div class="line">discover_interval</div><div class="line">logstash 每隔多久去检查一次被监听的 path 下是否有新文件。默认值是 15 秒。</div><div class="line"></div><div class="line">exclude</div><div class="line">不想被监听的文件可以排除出去，这里跟 path 一样支持 glob 展开。</div><div class="line"></div><div class="line">sincedb_path</div><div class="line">如果你不想用默认的 <span class="variable">$HOME</span>/.sincedb(Windows 平台上在 C:\Windows\System32\config\systemprofile\.sincedb)，可以通过这个配置定义 sincedb 文件到其他位置。</div><div class="line"></div><div class="line">sincedb_write_interval</div><div class="line">logstash 每隔多久写一次 sincedb 文件，默认是 15 秒。</div><div class="line"></div><div class="line">stat_interval</div><div class="line">logstash 每隔多久检查一次被监听文件状态（是否有更新），默认是 1 秒。</div><div class="line"></div><div class="line">start_position</div><div class="line">logstash 从什么位置开始读取文件数据，默认是结束位置，也就是说 logstash 进程会以类似 tail -F 的形式运行。如果你是要导入原有数据，把这个设定改成 <span class="string">"beginning"</span>，logstash 进程就从头开始读取，有点类似 cat，但是读到最后一行不会终止，而是继续变成 tail -F。</div></pre></td></tr></table></figure><p>配置详解：参考中文文档<a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/input/file.html" target="_blank" rel="external">logstash-best-practice-cn</a><br>官网详细说明：<a href="https://www.elastic.co/guide/en/logstash/current/multiple-input-output-plugins.html" target="_blank" rel="external">multiple-input-output-plugins</a></p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Logstash分享-online生产环境的使用-online日志规范。&quot;&gt;&lt;a href=&quot;#Logstash分享-online生产环境的使用-online日志规范。&quot; class=&quot;headerlink&quot; title=&quot;Logstash分享,online生产环境的使用,online日志规范。&quot;&gt;&lt;/a&gt;Logstash分享,online生产环境的使用,online日志规范。&lt;/h3&gt;&lt;p&gt;写这篇文章，主要分享几点: 因为学所有学，既然学何不深度去了解~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是Logstash？&lt;/li&gt;
&lt;li&gt;logstash运行在什么环境下对应的版本是多少？&lt;/li&gt;
&lt;li&gt;logstash工作原理？&lt;/li&gt;
&lt;li&gt;online日志现在是如何规范？&lt;/li&gt;
&lt;li&gt;如何写logstash收集conf文件？ &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://community-cdn-digitalocean-com.global.ssl.fastly.net/assets/tutorials/images/large/elk---twitter.png?1428343890&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Log Analysis Platform" scheme="http://weblog.chengyangyang.com/categories/Log-Analysis-Platform/"/>
    
    
      <category term="logstash" scheme="http://weblog.chengyangyang.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤</title>
    <link href="http://weblog.chengyangyang.com/2018/02/04/Bigdata-hadoop/Kafka/KafKa%E4%BB%8E0.8.2.1%E5%8D%87%E7%BA%A7%E5%88%B00.9.0.1%E5%8F%98%E5%8C%96%E6%96%B9%E6%A1%88%E4%B8%8E%E6%AD%A5%E9%AA%A4/"/>
    <id>http://weblog.chengyangyang.com/2018/02/04/Bigdata-hadoop/Kafka/KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤/</id>
    <published>2018-02-04T03:22:00.000Z</published>
    <updated>2019-10-30T16:18:14.698Z</updated>
    
    <content type="html"><![CDATA[<p>🍊我这里是采用,群集升级,全部更新停止老版本zk和kafka更新服务。</p><p>9.0.0有潜在的中断更改风险（在升级之前需要知道），并且与之前版本的broker之间的协议改变。这意味着此次升级可能和客户端旧版本不兼容。因此在升级客户端之前，先升级kafka集群。如果你使用MirrorMaker下游集群，则同样应首先升级。</p><p><img src="https://blogs.apache.org/hbase/mediaresource/0b77f435-da5c-4696-a1b5-f35bc4139b7b" alt=""></p><a id="more"></a><h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">升级所有broker的server<span class="selector-class">.properties</span>,并在其中添加</div><div class="line">inter<span class="selector-class">.broker</span><span class="selector-class">.protocol</span><span class="selector-class">.version</span> = <span class="number">0.8</span>.<span class="number">2</span><span class="selector-class">.X</span></div><div class="line">每次升级一个broker：关闭broker，替换新版本，然后重新启动。</div></pre></td></tr></table></figure><h3 id="群集升级"><a href="#群集升级" class="headerlink" title="群集升级"></a>群集升级</h3><p>一旦整个群集升级，通过编辑inter.broker.protocol.version并将其设置为0.9.0.0来转换所有协议。<br>逐个重新启动broker，使新协议版本生效。<br>注意 ：如果你可接受停机，你可以简单地将所有broker关闭，更新版本并重启启动，协议将默认从新版本开始。<br>注意 ：变换协议版本和重启启动可以在broker升级完成后的任何时间去做，不必马上做。</p><h4 id="0-9-0-0潜在的中断变化"><a href="#0-9-0-0潜在的中断变化" class="headerlink" title="0.9.0.0潜在的中断变化"></a>0.9.0.0潜在的中断变化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Java 1.6不再支持，需要Jdk1.7版本以上。</div><div class="line">Scala 2.9不再支持。</div><div class="line"></div><div class="line">默认情况下，1000以上的Broker ID为自动分配。如果你的集群高于该阈值，需相应地增加</div><div class="line">reserved.broker.max.id配置。</div><div class="line"></div><div class="line">replica.lag.max.messages配置已经移除。分区leader在决定哪些副本处于同步时将不再考虑落后的消息的数。</div><div class="line"></div><div class="line">配置参数replica.lag.time.max.ms现在不仅指自上次从副本获取请求后经过的时间，还指自副本上次被捕获以来的时间。 副本仍然从leader获取消息，但超过replica.lag.time.max.ms配置的最新消息将被认为不同步的。</div><div class="line"></div><div class="line">压缩的topic不再接受没有key的消息，如果出现，生产者将抛出异常。 在0.8.x中，没有key的消息将导致日志压缩线程退出（并停止所有压缩的topic）。</div><div class="line"></div><div class="line">MirrorMaker不再支持多个目标集群。 它只接受一个--consumer.config。 要镜像多个源集群，每个源集群至少需要一个MirrorMaker实例，每个源集群都有自己的消费者配置。</div><div class="line"></div><div class="line">在org.apache.kafka.clients.tools。包下的Tools已移至org.apache.kafka.tools。。 所有包含的脚本仍将照常工作，只有直接导入这些类的自定义代码将受到影响。</div><div class="line"></div><div class="line">在kafka-run-class.sh中更改了默认的Kafka JVM性能选项（KAFKA_JVM_PERFORMANCE_OPTS）。</div><div class="line"></div><div class="line">kafka-topics.sh脚本（kafka.admin.TopicCommand）现在退出，失败时出现非零退出代码。</div><div class="line"></div><div class="line">kafka-topics.sh脚本（kafka.admin.TopicCommand）现在将在topic名称由于使用“.”或“_”而导致风险度量标准冲突时打印警告。以及冲突的情况下的错误。</div><div class="line"></div><div class="line">kafka-console-producer.sh脚本（kafka.tools.ConsoleProducer）将默认使用新的Java Producer，用户必须指定“old-producer”才能使用旧生产者。</div><div class="line">默认情况下，所有命令行工具都会将所有日志消息打印到stderr而不是stdout。</div></pre></td></tr></table></figure><h4 id="0-9-0-1中的显著变化"><a href="#0-9-0-1中的显著变化" class="headerlink" title="0.9.0.1中的显著变化"></a>0.9.0.1中的显著变化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">可以通过将broker.id.generation.enable设置为<span class="literal">false</span>来禁用新的broker ID生成功能。</div><div class="line"></div><div class="line">默认情况下，配置参数log.cleaner.enable为<span class="literal">true</span>。 这意味着topic会清理。</div><div class="line">policy = compact现在将被默认压缩，并且128MB的堆（通过log.cleaner.dedupe.buffer.size）分配给清洗进程。你可能需要根据你对压缩topic的使用情况，查看log.cleaner.dedupe.buffer.size和其他log.cleaner配置值。</div><div class="line"></div><div class="line">默认情况下，新消费者的配置参数fetch.min.bytes的默认值为1。</div></pre></td></tr></table></figure><h4 id="0-9-0-0弃用的"><a href="#0-9-0-0弃用的" class="headerlink" title="0.9.0.0弃用的"></a>0.9.0.0弃用的</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh脚本的变更topic配置已弃用（kafka.admin.ConfigCommand），以后将使用kafka-configs.sh(kafka.admin.ConfigCommand) 。</div><div class="line"></div><div class="line">kafka-consumer-offset-checker.sh(kafka.tools.ConsumerOffsetChecker)已弃用，以后将使用kafka-consumer-groups.sh (kafka.admin.ConsumerGroupCommand)</div><div class="line"></div><div class="line">kafka.tools.ProducerPerformance已弃用。以后将使用org.apache.kafka.tools.ProducerPerformance（kafka-producer-perf-test.sh也将使用新类）</div><div class="line"></div><div class="line">生产者的block.on.buffer.full已弃用，并将在以后的版本中移除。目前其默认已经更为<span class="literal">false</span>。KafkaProducer将不再抛出BufferExhaustedException，而是使用max.block.ms来中止，之后将抛出TimeoutException。如果block.on.buffer.full属性明确地设置为<span class="literal">true</span>，它将设置max.block.ms为Long.MAX_VALUE和metadata.fetch.timeout.ms将不执行。</div></pre></td></tr></table></figure><h4 id="升级准备步骤："><a href="#升级准备步骤：" class="headerlink" title="升级准备步骤："></a>升级准备步骤：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">（0）</div><div class="line">wget http://mirror.bit.edu.cn/apache/kafka/0.9.0.1/kafka_2.10-0.9.0.1.tgz</div><div class="line">tar -xvf kafka_2.10-0.9.0.1.tgz</div><div class="line"></div><div class="line">[jollybi@kafka1 tools]$ ll</div><div class="line">total 88100</div><div class="line">drwxr-xr-x  7 jollybi jollybi     4096 Jul 14 13:07 kafka_2.10-0.8.2.1</div><div class="line">-rw-rw-r--  1 jollybi jollybi 16162559 Jul 14 11:40 kafka_2.10-0.8.2.1.tgz</div><div class="line">drwxr-xr-x  6 jollybi jollybi     4096 Feb 12  2016 kafka_2.10-0.9.0.1</div><div class="line">-rw-rw-r--  1 jollybi jollybi 35725063 Jun 20 20:11 kafka_2.10-0.9.0.1.tgz</div><div class="line">drwxr-xr-x 12 jollybi jollybi     4096 Sep 25 16:41 zookeeper-3.4.5</div><div class="line">-rw-rw-r--  1 jollybi jollybi 38307840 Jul 14 11:40 zookeeper-3.4.5.tar</div><div class="line"></div><div class="line">[jollybi@kafka1 tools]$ mkdir -p /data/tools/kafka_2.10-0.9.0.1/kafka-logs</div><div class="line">[jollybi@kafka1 tools]$ mkdir -p /data/tools/kafka_2.10-0.9.0.1/logs</div><div class="line"></div><div class="line"><span class="comment">###修改配置：</span></div><div class="line"></div><div class="line">(1)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/zookeeper.properties</div><div class="line">第一步修改:</div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line">dataDir=dataDir=/data/jollybi/tools/zookeeper-3.4.5/tmp</div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line">clientPort=2281</div><div class="line"><span class="comment"># disable the per-ip limit on the number of connections since this is a non-production config</span></div><div class="line">maxClientCnxns=0</div><div class="line">dataDir,clientPort的意义不需要说明了，对于maxClientCnxns选项，如果不设置或者设置为0，则每个ip连接zookeeper时的连接数没有限制。</div><div class="line">需要注意的是，设置maxClientCnxns的值时需要把kafka server的连接数考虑进去，因为启动kafka server时，kafka server也会连接zookeeper的。</div><div class="line"></div><div class="line">(2)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/consumer.properties</div><div class="line">zookeeper.connect=10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">其他参数根据不同集群环境调整</div><div class="line"></div><div class="line">(3)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/producer.properties (修改内网IP)</div><div class="line">metadata.broker.list=10.155.90.153:9292,10.155.90.155:9292,10.155.90.138:9292</div><div class="line">producer.type=sync</div><div class="line">compression.codec=none</div><div class="line">serializer.class=kafka.serializer.DefaultEncoder</div><div class="line">其他参数根据不同集群环境调整</div><div class="line"></div><div class="line">(4) </div><div class="line">[jollybi@kafka1 config]$ cat server.properties | grep -Pv <span class="string">"^#|^$"</span></div><div class="line">broker.id=1</div><div class="line">auto.leader.rebalance.enable = <span class="literal">true</span></div><div class="line">listeners=PLAINTEXT://10.155.90.153:9292</div><div class="line">port=9292</div><div class="line">host.name=10.155.90.153</div><div class="line">zookeeper.connect=10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">zookeeper.connection.timeout.ms=6000</div><div class="line">num.network.threads=3</div><div class="line">num.io.threads=8</div><div class="line">socket.send.buffer.bytes=102400</div><div class="line">socket.receive.buffer.bytes=102400</div><div class="line">socket.request.max.bytes=104857600</div><div class="line">log.dirs=/data/tools/kafka_2.10-0.9.0.1/kafka-logs</div><div class="line">log.cleaner.enable=<span class="literal">true</span></div><div class="line">delete.topic.enable=<span class="literal">true</span></div><div class="line">num.partitions=1</div><div class="line">num.recovery.threads.per.data.dir=1</div><div class="line">log.retention.hours=96</div><div class="line">log.segment.bytes=1073741824</div><div class="line">log.retention.check.interval.ms=300000</div><div class="line"></div><div class="line">备注：listeners一定要配置成为IP地址；如果配置为localhost或服务器的hostname,在使用java发送数据时就会抛出异 常：org.apache.kafka.common.errors.TimeoutException: Batch Expired 。因为在没有配置advertised.host.name 的情况下，Kafka并没有像官方文档宣称的那样改为广播我们配置的hostname，而是广播了主机配置的hostname。远端的客户端并没有配置 hosts，所以自然是连接不上这个hostname的</div></pre></td></tr></table></figure><h4 id="kafka与zk内存日志优化"><a href="#kafka与zk内存日志优化" class="headerlink" title="kafka与zk内存日志优化"></a>kafka与zk内存日志优化</h4><p>我个人博客有写优化文档<br><a href="http://weblog.chengyangyang.com/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper%E9%9B%86%E7%BE%A4%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E5%92%8C%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%20/">Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存</a><br><a href="http://weblog.chengyangyang.com/2017/07/04/Bigdata-hadoop/Kafka/kafka%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%93JVM%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/">Kafka性能优化–JVM参数配置优化</a><br><a href="http://weblog.chengyangyang.com/2017/03/30/Bigdata-hadoop/Kafka/Kafka%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BC%98%E5%8C%96/">Kafka日志存储解析与实践数据存储优化</a></p><h4 id="升级步骤方案："><a href="#升级步骤方案：" class="headerlink" title="升级步骤方案："></a>升级步骤方案：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(0) mongodb 能存储时间戳4个小时的数据，在4个小时之内升级不会有风险。</div><div class="line">(1) mongotail 先停止生产写入数据到kafka</div><div class="line">(2) kafka 消费组继续消费 topic分区查看消费为零。</div><div class="line">(3) zk需要升级3.4.6版本对应kafka0.9.1版本，如果zk不需要升级，升级之前要先将ZooKeeper中原版本的kafka生成的znode删除，包括：consumers, controller, brokers, controller_epoch等。否则启动kafka会报错。</div><div class="line">(4) 重启新版本zk集群，查看集群服务选举是否正常。</div><div class="line">(5) 重启新版本kafka集群，重启没有报错，查看版本没问题就行。</div><div class="line">(6) zk上面查看命令</div><div class="line"> ./zkCli.sh -server 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /</div><div class="line"></div><div class="line">controller_epoch          controller                brokers                   zookeeper                 kafka-manager             admin                     isr_change_notification   consumers                 config</div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /brokers/ids</div><div class="line">[1, 2, 3]  </div><div class="line">集群三个brokers id正常</div><div class="line">(7)修改监控指标。 完成升级</div><div class="line"></div><div class="line">(8) 另外，新版本的一些命令与原版本的有些相同,增删改查命令。</div></pre></td></tr></table></figure><h4 id="开始升级步骤操作："><a href="#开始升级步骤操作：" class="headerlink" title="开始升级步骤操作："></a>开始升级步骤操作：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">（1)启动zk与kafka</div><div class="line"><span class="comment"># /data/tools/zookeeper-3.4.6/bin/zkServer.sh start</span></div><div class="line"><span class="comment"># /data/tools/kafka_2.10-0.9.0.1/bin/kafka-server-start.sh /data/tools/ kafka_2.10-0.9.0.1/config/server.properties &amp;</span></div><div class="line"></div><div class="line">（2）新建topic</div><div class="line"><span class="comment">#./bin/kafka-topics.sh --create --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --replication-factor 3 --partitions 12  --topic mongotail_lz4_imp </span></div><div class="line"><span class="comment">#./bin/kafka-topics.sh --create --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --replication-factor 3 --partitions 12  --topic mongotail_lz4</span></div><div class="line"></div><div class="line">(3) 查看集群topic分区情况</div><div class="line"><span class="comment">#./bin/kafka-topics.sh  --describe --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topic mongotail_lz4</span></div><div class="line"></div><div class="line">(4) 更新所有开源监控（KafkaOffsetMonitor）</div><div class="line">vim /home/jollybi/./monitor/monitor.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">java -Xms512M -Xmx512M -Xss1024K -XX:PermSize=256m -XX:MaxPermSize=512m -cp KafkaOffsetMonitor-assembly-0.2.0_modify.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --port 8086  --refresh 10.seconds  --retain 7.days &gt;/tmp/stdout.log 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line">zk地址修改成内网地址 这里的数据存储7天。</div><div class="line">重启服务：</div><div class="line">./monitor/monitor.sh &amp;</div><div class="line"></div><div class="line">（5）更新开源监控（kafka-manager）</div><div class="line">vim kafka-manager-1.3.3.8/conf/application.conf</div><div class="line">kafka-manager.zkhosts=<span class="string">"10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281"</span></div><div class="line">zk地址修改成内网地址.</div><div class="line"></div><div class="line">重启服务：</div><div class="line">./kafka-manager-1.3.3.8/bin/kafka-manager -Dconfig.file=kafka-manager-1.3.3.8/conf/application.conf -Dhttp.port=8080 &amp;</div><div class="line"></div><div class="line">（6）更新开源监控（zabbix）自己写的监控脚本</div><div class="line"></div><div class="line">[jollybi@kafka1 ~]$ /data/tools/kafka_2.10-0.9.0.1/bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeepe 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --group group_ml --topic mongotail_lz4</div><div class="line">[2017-10-31 14:05:24,390] WARN WARNING: ConsumerOffsetChecker is deprecated and will be dropped <span class="keyword">in</span> releases following 0.9.0. Use ConsumerGroupCommand instead. (kafka.tools.ConsumerOffsetChecker$)</div><div class="line">Group           Topic                          Pid Offset          <span class="built_in">log</span>Size         Lag             Owner</div><div class="line">group_ml        mongotail_lz4                  0   1205186         1205257         71              group_ml_Graphsql-test.jollychic.com-1509421110787-1daec53a-0</div><div class="line">group_ml        mongotail_lz4                  1   1206860         1206915         55              group_ml_Graphsql-test.jollychic.com-1509421110787-1daec53a-0</div><div class="line">....</div><div class="line">运行会出现WARN警告，0.9版本更新过了，</div><div class="line"></div><div class="line">注意：在0.9.0.0，kafka.tools.ConsumerOffsetChecker已经不支持了。你应该使用kafka.admin.ConsumerGroupCommand(或bin/kafka-consumer-groups.sh脚本)来管理消费者组，包括用新消费者API创建的消费者。</div><div class="line"></div><div class="line">这里使用kafka.admin.ConsumerGroupCommand 提示命令不对，现在在研究使用。 </div><div class="line">监控脚本 输出会有提示直接过滤掉即可。</div><div class="line"><span class="keyword">function</span> wlj_event_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`sh /etc/zabbix/kafka_topic_monitor.sh 2&gt;/dev/null |  sed -n  '3p'`"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>🎉 kafka升级，调配内网访问地址，内存，日志输出类型调优，监控更新配置。<br>🎉 参考官网文档 <a href="https://kafka.apache.org/0101/documentation.html#upgrade_9" target="_blank" rel="external">Apache Kafka 从 0.8.0, 0.8.1.X 或 0.8.2.X 升级到 0.9.0.0</a></p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🍊我这里是采用,群集升级,全部更新停止老版本zk和kafka更新服务。&lt;/p&gt;
&lt;p&gt;9.0.0有潜在的中断更改风险（在升级之前需要知道），并且与之前版本的broker之间的协议改变。这意味着此次升级可能和客户端旧版本不兼容。因此在升级客户端之前，先升级kafka集群。如果你使用MirrorMaker下游集群，则同样应首先升级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogs.apache.org/hbase/mediaresource/0b77f435-da5c-4696-a1b5-f35bc4139b7b&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Kafka三款监控工具比较</title>
    <link href="http://weblog.chengyangyang.com/2018/01/29/Bigdata-hadoop/Kafka/Bigdata-Kafka%E4%B8%89%E6%AC%BE%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/"/>
    <id>http://weblog.chengyangyang.com/2018/01/29/Bigdata-hadoop/Kafka/Bigdata-Kafka三款监控工具比较/</id>
    <published>2018-01-29T06:46:00.000Z</published>
    <updated>2019-10-30T16:18:48.765Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的博客中，介绍了<code>Kafka Web Console</code>这个监控工具，在生产环境中使用，运行一段时间后，发现该工具会和Kafka生产者、消费者、ZooKeeper建立大量连接，从而导致网络阻塞。并且这个Bug也在其他使用者中出现过，看来使用开源工具要慎重！该Bug暂未得到修复，不得已，只能研究下其他同类的Kafka监控软件。</p><p>通过研究，发现主流的三种kafka监控程序分别为：</p><ul><li>1、Kafka Web Conslole</li><li>2、Kafka Manager</li><li>3、KafkaOffsetMonitor</li></ul><p>现在依次介绍以上三种工具：</p><h2 id="1、Kafka-Web-Conslole"><a href="#1、Kafka-Web-Conslole" class="headerlink" title="1、Kafka Web Conslole"></a>1、Kafka Web Conslole</h2><p>使用Kafka Web Console，可以监控：</p><ul><li>Brokers列表</li><li>Kafka 集群中 Topic列表，及对应的Partition、LogSiz e等信息</li><li>点击Topic，可以浏览对应的Consumer Groups、Offset、Lag等信息</li><li>生产和消费流量图、消息预览…</li></ul><p>程序运行后，会定时去读取kafka集群分区的日志长度，读取完毕后，连接没有正常释放，一段时间后产生大量的socket连接，导致网络堵塞。</p><p><img src="http://image.chengyangyang.com/Kafka_web_console.png" alt=""></p><h2 id="2、Kafka-Manager"><a href="#2、Kafka-Manager" class="headerlink" title="2、Kafka Manager"></a>2、Kafka Manager</h2><p>雅虎开源的Kafka集群管理工具:</p><ul><li>管理几个不同的集群</li><li>监控集群的状态(topics, brokers, 副本分布, 分区分布)</li><li>产生分区分配(Generate partition assignments)基于集群的当前状态</li><li>重新分配分区</li></ul><p><img src="http://image.chengyangyang.com/kafka_manager.png" alt=""></p><h2 id="3、KafkaOffsetMonitor"><a href="#3、KafkaOffsetMonitor" class="headerlink" title="3、KafkaOffsetMonitor"></a>3、KafkaOffsetMonitor</h2><ul><li>KafkaOffsetMonitor可以实时监控：</li><li>Kafka集群状态</li><li>Topic、Consumer Group列表</li><li>图形化展示topic和consumer之间的关系</li><li>图形化展示consumer的Offset、Lag等信息</li></ul><p><img src="http://image.chengyangyang.com/kafkaoffsetmonitor.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用，个人总结以上三种监控程序的优缺点：</p><p><a href="https://github.com/claudemamo/kafka-web-console" target="_blank" rel="external">Kafka Web Console</a>：监控功能较为全面，可以预览消息，监控Offset、Lag等信息，但存在bug，不建议在生产环境中使用。</p><p><a href="https://github.com/yahoo/kafka-manager" target="_blank" rel="external">Kafka Manager</a>：偏向Kafka集群管理，若操作不当，容易导致集群出现故障。对Kafka实时生产和消费消息是通过JMX实现的。没有记录Offset、Lag等信息。</p><p><a href="https://github.com/quantifind/KafkaOffsetMonitor" target="_blank" rel="external">KafkaOffsetMonitor</a>：程序一个jar包的形式运行，部署较为方便。只有监控功能，使用起来也较为安全。</p><p>若只需要监控功能，推荐使用KafkaOffsetMonito，若偏重Kafka集群管理，推荐使用Kafka Manager。</p><p>因为都是开源程序，稳定性欠缺。故需先了解清楚目前已存在哪些Bug，多测试一下，避免出现类似于Kafka Web Console的问题。</p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前的博客中，介绍了&lt;code&gt;Kafka Web Console&lt;/code&gt;这个监控工具，在生产环境中使用，运行一段时间后，发现该工具会和Kafka生产者、消费者、ZooKeeper建立大量连接，从而导致网络阻塞。并且这个Bug也在其他使用者中出现过，看来使用开源工具
      
    
    </summary>
    
      <category term="大数据" scheme="http://weblog.chengyangyang.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-开源的Kafka集群管理器(Kafka Manager)</title>
    <link href="http://weblog.chengyangyang.com/2018/01/28/Bigdata-hadoop/Kafka/%E5%BC%80%E6%BA%90%E7%9A%84Kafka%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%99%A8(Kafka%20Manager)/"/>
    <id>http://weblog.chengyangyang.com/2018/01/28/Bigdata-hadoop/Kafka/开源的Kafka集群管理器(Kafka Manager)/</id>
    <published>2018-01-28T06:46:00.000Z</published>
    <updated>2019-10-30T16:19:14.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka-Manager"><a href="#Kafka-Manager" class="headerlink" title="Kafka Manager"></a>Kafka Manager</h2><p>A tool for managing <a href="http://kafka.apache.org/" target="_blank" rel="external">Apache Kafka.</a></p><h4 id="It-supports-the-following"><a href="#It-supports-the-following" class="headerlink" title="It supports the following:"></a>It supports the following:</h4><ul><li>管理多个群集</li><li>容易检查集群状态（主题，消费者，偏移量，经纪人，副本分发，分区分配）</li><li>运行首选副本选举</li><li>使用选项生成分区分配，以选择要使用的代理</li><li>运行分区的重新分配（基于生成的分配）</li><li>创建可选主题配置的主题（0.8.1.1具有不同于0.8.2+的配置）</li><li>删除主题（仅支持0.8.2+，并记住在代理配 置中设置delete.topic.enable = true）</li><li>主题列表现在表示标记为删除的主题（仅支持0.8.2+）</li><li>批量生成多个主题的分区分配，并选择要使用的代理</li><li>批量运行多个主题的分区重新分配</li><li>将分区添加到现有主题</li><li>更新现有主题的配置</li><li>可选地，启用JMX轮询代理级和主题级度量。</li><li>可选地筛选出在zookeeper中没有ids / owner /＆offset /目录的消费者。</li></ul><a id="more"></a><p>参考开源地址：<a href="https://github.com/yahoo/kafka-manager" target="_blank" rel="external">https://github.com/yahoo/kafka-manager</a></p><h4 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h4><p>Kafka 0.8.1.1 or 0.8.2.<em> or 0.9.0.</em> or 0.10.0.*<br>Java 8+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo wget --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie”   http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</span></div><div class="line"></div><div class="line">sudo vim /etc/profile</div><div class="line">export JAVA_HOME=/home/jollybi/tools/jdk1.8.0_144</div><div class="line">export LASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$TOMCAT_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/yahoo/kafka-manager.git</div><div class="line">./sbt clean dist</div><div class="line"></div><div class="line">[info]   Compilation completed <span class="keyword">in</span> 13.366 s</div><div class="line">model contains 672 documentable templates</div><div class="line">[info] Main Scala API documentation successful.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8-javadoc.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8-sans-externalized.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info]</div><div class="line">[info] Your package is ready <span class="keyword">in</span> /home/jollybi/kafka-manager/target/universal/kafka-manager-1.3.3.8.zip</div><div class="line">[info]</div><div class="line">[success] Total time: 142 s, completed Jul 27, 2017 3:48:35 PM</div><div class="line">完成</div></pre></td></tr></table></figure><h4 id="Starting-the-service"><a href="#Starting-the-service" class="headerlink" title="Starting the service"></a>Starting the service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">解压缩生成的zip文件后，将工作目录更改为可以运行的服务：</div><div class="line"></div><div class="line">unzip /home/jollybi/kafka-manager/target/universal/kafka-manager-1.3.3.8.zip</div><div class="line"></div><div class="line"></div><div class="line">修改zk地址和管理员账号和密码：</div><div class="line"></div><div class="line">vim kafka-manager-1.3.3.8/conf/application.conf</div><div class="line"></div><div class="line"><span class="comment">#kafka-manager.zkhosts="kafka-manager-zookeeper:2181"</span></div><div class="line"><span class="comment">#zk集群可以这么配置：</span></div><div class="line">kafka-manager.zkhosts=<span class="string">"kafka1.jollychic.com:2281,kafka2.jollychic.com:2281,kafka3.jollychic.com:2281"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#根据个人公司这里可以开启true 设置账号和密码</span></div><div class="line">basicAuthentication.enabled=<span class="literal">true</span></div><div class="line">basicAuthentication.username=<span class="string">"admin"</span></div><div class="line">basicAuthentication.password=<span class="string">"admin"</span></div><div class="line"></div><div class="line"></div><div class="line">默认情况下，它将选择端口9000.这是可以覆盖的，配置文件的位置也是如此。例如：</div><div class="line"></div><div class="line">$ ./bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080</div><div class="line"></div><div class="line">后台生效：</div><div class="line"></div><div class="line">$ ./bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &amp;</div><div class="line"></div><div class="line">再次，如果java不在您的路径中，或者您需要针对不同版本的Java运行，请按如下所示添加-java-home选项：</div><div class="line"></div><div class="line">$ bin/kafka-manager -java-home /usr/<span class="built_in">local</span>/oracle-java-8</div></pre></td></tr></table></figure><h4 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If you<span class="string">'d like to create a Debian or RPM package instead, you can run one of:</span></div><div class="line"></div><div class="line">sbt debian:packageBin</div><div class="line"></div><div class="line">sbt rpm:packageBin</div></pre></td></tr></table></figure><h4 id="查看端口："><a href="#查看端口：" class="headerlink" title="查看端口："></a>查看端口：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[jollybi@kafka1 conf]$ netstat -ntulp | grep 8080</div><div class="line">(Not all processes could be identified, non-owned process info</div><div class="line"> will not be shown, you would have to be root to see it all.)</div><div class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      70517/java</div></pre></td></tr></table></figure><p>四、安装配置中的两个小坑</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、安装配置上面已经有说明介绍步骤。</div><div class="line"><span class="number">2</span>、kafka的服务器必须添加hostname对应的host域名解析，并重启kafka</div><div class="line">这个是java本身处理的一个机制问题，通过代码修改和绑定host都可以解决，如果不处理，报出来的错误如下：</div><div class="line"><span class="meta">at</span> org.apache.kafka.clients.consumer.KafkaConsumer.pollOnce(KafkaConsumer.java:<span class="number">974</span>) ~[org.apache.kafka.kafka-clients-<span class="number">0.10</span><span class="meta">.0</span><span class="meta">.1</span>.jar:na]</div><div class="line">[error] k.m.j.KafkaJMX$ - Failed to connect to service:jmx:rmi:///jndi/rmi://<span class="number">10.143</span><span class="meta">.40</span><span class="meta">.239</span>:<span class="number">9999</span>/jmxrmi</div><div class="line"><span class="symbol">java.rmi.ConnectException:</span> Connection refused to host: <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span><span class="comment">; nested exception is:</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line">从一个运维人员的角度出发，改host解析是最得心应手的，登录kafka的服务器，打开/etc/hosts文件，将主机名对应的解析记录修改为本机对外通信的<span class="built_in">ip</span>地址，另外将<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>和::<span class="number">1</span>对应的主机名删掉，修改如下，修改后必须重启kafka才能生效。</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> localhost.localdomain localhost</div><div class="line"><span class="number">169.44</span><span class="meta">.62</span><span class="meta">.19</span> kafka1.jollychic.com kafka1</div><div class="line"><span class="number">169.44</span><span class="meta">.59</span><span class="meta">.18</span> kafka2.jollychic.com kafka2</div><div class="line"><span class="number">169.44</span><span class="meta">.62</span><span class="meta">.17</span> kafka3.jollychic.com kafka3</div><div class="line"><span class="number">169.55</span><span class="meta">.32</span><span class="meta">.22</span> kafka4.jollychic.com kafka4</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.13</span> zk1.jollychic.com</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.15</span> zk2.jollychic.com</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.18</span> zk3.jollychic.com</div></pre></td></tr></table></figure><h3 id="网站访问kafka-Manger"><a href="#网站访问kafka-Manger" class="headerlink" title="网站访问kafka Manger"></a>网站访问kafka Manger</h3><p>这里我设置了登录账号和密码： admin admin</p><p><img src="media/15014722977191.jpg" alt=""></p><p>创建kafka名字;<br>选择kafka版本号;<br>JMX这个不需要;<br>下面选择默认点击确认即可.</p><p><img src="media/15014724051756.jpg" alt=""></p><blockquote><p>(2)kafka 启用 JMX端口</p></blockquote><p><img src="media/15020729297106.jpg" alt=""></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">以如下命令重新启动kafka</div><div class="line"></div><div class="line">JMX_PORT=<span class="number">9999</span> bin/kafka-<span class="built_in">server</span>-start.sh config/<span class="built_in">server</span>.properties</div><div class="line">或者修改kafka-<span class="built_in">server</span>-start.sh 文件，追加JMX_PORT=<span class="string">"9999"</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> [ <span class="string">"x$KAFKA_HEAP_OPTS"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></div><div class="line">    export KAFKA_HEAP_OPTS=<span class="string">"-Xmx1G -Xms1G"</span></div><div class="line">    export JMX_PORT=<span class="string">"9999"</span></div><div class="line">fi</div><div class="line">然后重新启动kafka</div><div class="line">bin/kafka-<span class="built_in">server</span>-start.sh config/<span class="built_in">server</span>.properties</div><div class="line"></div><div class="line">但是Metrics中数据都是零</div><div class="line">查看 kafka manager 报错，无法连接jxm</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">解决方法 修改每个kafka broker的 kafka_2.11-0.10.1.0/bin/kafka-run-class.sh文件</div><div class="line">​</div><div class="line"><span class="comment"># JMX settings</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$KAFKA_JMX_OPTS</span>"</span> ]; <span class="keyword">then</span></div><div class="line">  KAFKA_JMX_OPTS=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=75.126.5.162"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line">-Djava.rmi.server.hostname 的值为当前kafka服务器ip</div><div class="line"></div><div class="line">这里说明下集群kafka都需要修改</div></pre></td></tr></table></figure><p><img src="media/15020745879851.jpg" alt=""></p><p><img src="media/15014725443386.jpg" alt=""></p><p><img src="media/15014725288425.jpg" alt=""></p><p><img src="media/15014725659340.jpg" alt=""></p><p><img src="media/15014725864134.jpg" alt=""></p><p><img src="media/15014726361909.jpg" alt=""></p><p><img src="media/15014727525618.jpg" alt=""></p><p><img src="media/15014727932029.jpg" alt=""></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kafka-Manager&quot;&gt;&lt;a href=&quot;#Kafka-Manager&quot; class=&quot;headerlink&quot; title=&quot;Kafka Manager&quot;&gt;&lt;/a&gt;Kafka Manager&lt;/h2&gt;&lt;p&gt;A tool for managing &lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Kafka.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;It-supports-the-following&quot;&gt;&lt;a href=&quot;#It-supports-the-following&quot; class=&quot;headerlink&quot; title=&quot;It supports the following:&quot;&gt;&lt;/a&gt;It supports the following:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;管理多个群集&lt;/li&gt;
&lt;li&gt;容易检查集群状态（主题，消费者，偏移量，经纪人，副本分发，分区分配）&lt;/li&gt;
&lt;li&gt;运行首选副本选举&lt;/li&gt;
&lt;li&gt;使用选项生成分区分配，以选择要使用的代理&lt;/li&gt;
&lt;li&gt;运行分区的重新分配（基于生成的分配）&lt;/li&gt;
&lt;li&gt;创建可选主题配置的主题（0.8.1.1具有不同于0.8.2+的配置）&lt;/li&gt;
&lt;li&gt;删除主题（仅支持0.8.2+，并记住在代理配 置中设置delete.topic.enable = true）&lt;/li&gt;
&lt;li&gt;主题列表现在表示标记为删除的主题（仅支持0.8.2+）&lt;/li&gt;
&lt;li&gt;批量生成多个主题的分区分配，并选择要使用的代理&lt;/li&gt;
&lt;li&gt;批量运行多个主题的分区重新分配&lt;/li&gt;
&lt;li&gt;将分区添加到现有主题&lt;/li&gt;
&lt;li&gt;更新现有主题的配置&lt;/li&gt;
&lt;li&gt;可选地，启用JMX轮询代理级和主题级度量。&lt;/li&gt;
&lt;li&gt;可选地筛选出在zookeeper中没有ids / owner /＆offset /目录的消费者。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://weblog.chengyangyang.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>KafKa动态扩容群集-(Topic.partitions迁移)</title>
    <link href="http://weblog.chengyangyang.com/2018/01/11/Bigdata-hadoop/Kafka/KafKa%E6%89%A9%E5%AE%B9%E7%BE%A4%E9%9B%86(Topic.partitions%E8%BF%81%E7%A7%BB)/"/>
    <id>http://weblog.chengyangyang.com/2018/01/11/Bigdata-hadoop/Kafka/KafKa扩容群集(Topic.partitions迁移)/</id>
    <published>2018-01-11T03:22:00.000Z</published>
    <updated>2019-10-30T16:19:40.539Z</updated>
    
    <content type="html"><![CDATA[<h4 id="kafka的扩容难点："><a href="#kafka的扩容难点：" class="headerlink" title="kafka的扩容难点："></a>kafka的扩容难点：</h4><p>1）主要在于增加机器之后，数据需要rebalance到新增的空闲节点，即把partitions迁移到空闲机器上。<br>kafka提供<code>bin/kafka-reassign-partitions.sh</code>工具，完成parttition的迁移。</p><p>2）kafka的集群的数据量加大，数据rebalance的时间较长。解决办法是把<code>log.retention.hours=1</code>设置一小时（生产参数24小时）。<br>修改参数之后，重启kakfa节点，kafka会主动purge 1小时之前的log数据。<br>以下是kafka_0.8.1.1版本kafkka集群扩容操作记录，从3台物理机扩容到4台物理，partition数量由24个增加到28个。</p><a id="more"></a><p>参考：<a href="http://kafka.apache.org/081/documentation.html#basic_ops_modify_topic" target="_blank" rel="external">http://kafka.apache.org/081/documentation.html#basic_ops_modify_topic</a></p><h4 id="kafka的复制副本："><a href="#kafka的复制副本：" class="headerlink" title="kafka的复制副本："></a>kafka的复制副本：</h4><p>将服务器添加到Kafka集群非常简单，只需为其分配唯一的代理ID，然后在新服务器上启动Kafka。但是，这些新的服务器不会自动分配任何数据分区，除非将分区移动到这些分区，否则直到创建新主题时才会执行任何工作。所以通常当你将机器添加到你的群集中时，你会想把一些现有的数据迁移到这些机器上。<br>数据迁移过程是手动启动的，但是完全自动化。下面介绍的是，Kafka会将新服务器添加为正在迁移的分区的跟随者，并允许其完全复制该分区中的现有数据。当新服务器完全复制了此分区的内容并加入了同步副本时，其中一个现有副本将删除其分区的数据。</p><p>分区重新分配工具可用于跨代理移动分区。理想的分区分布将确保所有代理的数据加载和分区大小。分区重新分配工具不具备自动研究Kafka集群中的数据分布并移动分区以实现均匀负载分配的功能。因此，管理员必须找出哪些主题或分区应该移动。</p><p>分区重新分配工具可以运行在3个互斥的模式中：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">生成：在此模式下，给定主题列表和经纪人列表，该工具会生成候选重新​​分配，以将指定主题的所有分区移至新经纪人。此选项仅提供了一种便捷的方式，可以根据主题和目标代理列表生成分区重新分配计划。</span></div><div class="line"></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">execute：在此模式下，该工具根据用户提供的重新分配计划启动分区重新分配。（使用</span><span class="literal">-</span><span class="literal">-</span><span class="comment">reassignment</span><span class="literal">-</span><span class="comment">json</span><span class="literal">-</span><span class="comment">file选项）。这可以是由管理员制作的自定义重新分配计划，也可以是使用</span><span class="literal">-</span><span class="literal">-</span><span class="comment">generate选项提供的自定义重新分配计划。</span></div><div class="line"></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">verify：在此模式下，该工具会验证上次执行过程中列出的所有分区的重新分配状态。状态可以是成功完成，失败或正在进行</span></div></pre></td></tr></table></figure><p>自动将数据迁移到新机器</p><p>分区重新分配工具可用于将当前一组经纪人的一些主题移到新增的经纪人。这在扩展现有集群时通常很有用，因为将整个主题移动到新的代理集比移动一个分区更容易。用于这样做时，用户应该提供应该移动到新的经纪人集合和新的经纪人的目标列表的主题列表。然后，该工具在新的代理集合上均匀分配给定主题列表的所有分区。在此过程中，主题的复制因子保持不变。有效地，主题输入列表的所有分区副本都从旧的代理集合移动到新添加的代理。<br>例如，以下示例将把主题<code>countly_apppush，countly_event...</code>的所有分区移动到新的代理集4 。在本次移动结束时，主题<code>countly_apppush，countly_event...</code>的所有分区将仅存在于代理4上。</p><h3 id="1-kafka-扩容"><a href="#1-kafka-扩容" class="headerlink" title="1.kafka 扩容"></a>1.kafka 扩容</h3><p>首先按照搭建步骤，在其他机器上搭建集群，kafka的配置文件中 zkconnect 要保持与原kafka一致<br>kafka版本一致，配置跟之前kafka集群一致，只需要修改本地kafka的地址.</p><h3 id="2-验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli-sh-去查看"><a href="#2-验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli-sh-去查看" class="headerlink" title="2.验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli.sh 去查看"></a>2.验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli.sh 去查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@kafka1 bin]<span class="comment"># ./zkCli.sh -server  10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</span></div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /brokers/ids/</div><div class="line">1,2,3,4</div></pre></td></tr></table></figure><h5 id="3-由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示："><a href="#3-由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示：" class="headerlink" title="3.由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示："></a>3.由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"topics"</span>: [&#123;<span class="string">"topic"</span>: <span class="string">"countly_apppush"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_event"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_imp"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_metrics"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_pv"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_session"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"mongotail_lz4"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"mongotail_lz4_imp"</span>&#125;</div><div class="line">            ],</div><div class="line"> <span class="string">"version"</span>:1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="4-一旦json文件准备就绪，使用分区重新分配工具来生成候选分配："><a href="#4-一旦json文件准备就绪，使用分区重新分配工具来生成候选分配：" class="headerlink" title="4.一旦json文件准备就绪，使用分区重新分配工具来生成候选分配："></a>4.一旦json文件准备就绪，使用分区重新分配工具来生成候选分配：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topics-to-move-json-file topics-to-move.json --broker-list <span class="string">"1,2,3,4"</span> --generate</div><div class="line"></div><div class="line"></div><div class="line">[jollybi@kafka3 kafka_2.10-0.9.0.1]$ bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topics-to-move-json-file topics-to-move.json --broker-list <span class="string">"1,2,3,4"</span> --generate</div><div class="line">Current partition replica assignment</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[3,2,1]&#125;,</div><div class="line">.....</div><div class="line"></div><div class="line">Proposed partition reassignment configuration</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[4,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[1,4,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[1,2,3]&#125;</div><div class="line">......</div></pre></td></tr></table></figure><p>其中的<code>Current partition replica assignment</code>指的是迁移前的partition replica；Proposed partition reassignment configuration 指的就是迁移分配规则json。需要将该<code>[Proposed partition reassignment configuration]</code>json文件保存到json文件中(如expand-cluster-reassignment.json)</p><p>该工具会生成一个候选分配，将所有分区从主题<code>countly_apppush，countly_event...</code>移动到<code>brokers 1,2,3,4</code>但是，请注意，在这一点上，分区运动还没有开始，它只是告诉你当前的任务和建议的新任务。应该保存当前的分配，以防你想要回滚到它。新的任务应该保存在一个json文件中<code>（例如expand-cluster-reassignment.json）</code>，并用<code>--execute</code>选项输入到工具中，如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json --execute</div><div class="line">Current partition replica assignment</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,2,3]&#125;]&#125;</div><div class="line"></div><div class="line">Save this to use as the --reassignment-json-file option during rollback</div><div class="line">Successfully started reassignment of partitions &#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[4,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[4,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[3,2,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[4,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[1,4,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[2,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[3,1,2]&#125;]&#125;</div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">最后，可以使用`--verify`选项来检查分区重新分配的状态。</div><div class="line">请注意，相同的`expand-cluster-reassignment.json`（与`--execute`选项一起使用）应该与--verify选项一起使用</div><div class="line"></div><div class="line">```BASH</div><div class="line">/bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json  --verify</div><div class="line"></div><div class="line">[jollybi@kafka4 kafka_2.10-0.9.0.1]$ ./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json  --verify</div><div class="line">Status of partition reassignment:</div><div class="line">Reassignment of partition [countly_event,2] completed successfully</div><div class="line">Reassignment of partition [countly_session,7] completed successfully</div><div class="line">Reassignment of partition [countly_pv,5] completed successfully</div><div class="line">Reassignment of partition [countly_apppush,1] completed successfully</div><div class="line">Reassignment of partition [countly_event,0] completed successfully</div><div class="line">Reassignment of partition [countly_session,10] completed successfully</div><div class="line">Reassignment of partition [countly_apppush,4] completed successfully</div><div class="line">Reassignment of partition [countly_event,7] is still <span class="keyword">in</span> progress</div><div class="line">Reassignment of partition [countly_metrics,7] completed successfully</div><div class="line">Reassignment of partition [countly_imp,4] is still <span class="keyword">in</span> progress</div><div class="line">Reassignment of partition [countly_apppush,10] completed successfully</div><div class="line">Reassignment of partition [countly_imp,5] is still <span class="keyword">in</span> progress</div><div class="line">.....</div></pre></td></tr></table></figure><p>注意：在迁移过程中不能人为的结束或停止kafka服务，不然会有数据不一致的问题.</p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;kafka的扩容难点：&quot;&gt;&lt;a href=&quot;#kafka的扩容难点：&quot; class=&quot;headerlink&quot; title=&quot;kafka的扩容难点：&quot;&gt;&lt;/a&gt;kafka的扩容难点：&lt;/h4&gt;&lt;p&gt;1）主要在于增加机器之后，数据需要rebalance到新增的空闲节点，即把partitions迁移到空闲机器上。&lt;br&gt;kafka提供&lt;code&gt;bin/kafka-reassign-partitions.sh&lt;/code&gt;工具，完成parttition的迁移。&lt;/p&gt;
&lt;p&gt;2）kafka的集群的数据量加大，数据rebalance的时间较长。解决办法是把&lt;code&gt;log.retention.hours=1&lt;/code&gt;设置一小时（生产参数24小时）。&lt;br&gt;修改参数之后，重启kakfa节点，kafka会主动purge 1小时之前的log数据。&lt;br&gt;以下是kafka_0.8.1.1版本kafkka集群扩容操作记录，从3台物理机扩容到4台物理，partition数量由24个增加到28个。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>ZABBIX monitoring Flume</title>
    <link href="http://weblog.chengyangyang.com/2017/09/21/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/Zabbix/ZABBIX%20monitoring%20Flume/"/>
    <id>http://weblog.chengyangyang.com/2017/09/21/性能监控/Zabbix/ZABBIX monitoring Flume/</id>
    <published>2017-09-21T10:42:58.000Z</published>
    <updated>2018-04-11T12:02:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ZABBIX-monitoring-Flume"><a href="#ZABBIX-monitoring-Flume" class="headerlink" title="ZABBIX monitoring Flume"></a>ZABBIX monitoring Flume</h4><p>Flume本身提供了http, ganglia的监控服务，而我们目前主要使用zabbix做监控。因此，我们为Flume添加了zabbix监控模块，和sa的监控服务无缝融合。<br>另一方面，净化Flume的metrics。只将我们需要的metrics发送给zabbix，避免 zabbix server造成压力。目前我们最为关心的是Flume能否及时把应用端发送过来的日志写到Hdfs上， 对应关注的metrics为：</p><p>Source : 接收的event数和处理的event数<br>Channel : Channel中拥堵的event数<br>Sink : 已经处理的event数</p><p><img src="https://cdn.itzgeek.com/wp-content/uploads/2014/07/Zabbix.jpg" alt=""></p><a id="more"></a><h4 id="zabbix安装-amp-JVM性能监控"><a href="#zabbix安装-amp-JVM性能监控" class="headerlink" title="zabbix安装&amp;JVM性能监控"></a>zabbix安装&amp;JVM性能监控</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">zabbix安装</div><div class="line">http://my.oschina.net/yunnet/blog/173161</div><div class="line"></div><div class="line">JDK1.8</div><div class="line">[jollybi@countly1 conf]$ java -version</div><div class="line">java version <span class="string">"1.8.0_65"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_65-b17)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#JVM性能监控</span></div><div class="line">Young GC  counts</div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jstat  -gcutil 87007 | tail -1 | awk <span class="string">'&#123;print  $6&#125;'</span></div><div class="line">95.16</div><div class="line"></div><div class="line">Full GC counts</div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jstat  -gcutil 87007 | tail -1 | awk <span class="string">'&#123;print  $8&#125;'</span></div><div class="line">436.252</div><div class="line"></div><div class="line">JVM total  memory usage</div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jmap -histo $(pgrep java)|grep Total | sed -n <span class="string">'$p'</span> | awk <span class="string">'&#123;print  $3&#125;'</span></div><div class="line"></div><div class="line"></div><div class="line">JVM total  instances usage</div><div class="line"> /usr/<span class="built_in">local</span>/jdk/bin/jmap -histo $(pgrep java)|grep Total | sed -n <span class="string">'$p'</span> | awk <span class="string">'&#123;print  $2&#125;'</span></div></pre></td></tr></table></figure><h4 id="flume应用参数监控"><a href="#flume应用参数监控" class="headerlink" title="flume应用参数监控"></a>flume应用参数监控</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">启动时加上JSON repoting参数,这样就可以通过http://localhost:34545/metrics访问</div><div class="line">bin/flume-ng agent --conf conf --conf-file conf/flume-conf-test.properties --name agent -Dflume.root.logger=INFO,console -Dflume.monitoring.type=http -Dflume.monitoring.port=34545 &amp;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[root@localhost apache-flume-1.8.0-bin]<span class="comment"># curl http://localhost:34545/metrics 2&gt;/dev/null|sed -e  's/\([,]\)\s*/\1\n/g' -e 's/[&#123;&#125;]/\n/g' -e 's/[",]//g'</span></div><div class="line"></div><div class="line">SOURCE.source1:</div><div class="line">EventReceivedCount:4871</div><div class="line">AppendBatchAcceptedCount:52</div><div class="line">Type:SOURCE</div><div class="line">EventAcceptedCount:4871</div><div class="line">AppendReceivedCount:0</div><div class="line">StartTime:1511251310062</div><div class="line">OpenConnectionCount:0</div><div class="line">AppendAcceptedCount:0</div><div class="line">AppendBatchReceivedCount:52</div><div class="line">StopTime:0</div><div class="line"></div><div class="line">SINK.sink1:</div><div class="line">ConnectionCreatedCount:0</div><div class="line">BatchCompleteCount:0</div><div class="line">BatchEmptyCount:43</div><div class="line">EventDrainAttemptCount:0</div><div class="line">StartTime:1511251311047</div><div class="line">BatchUnderflowCount:1</div><div class="line">ConnectionFailedCount:0</div><div class="line">ConnectionClosedCount:0</div><div class="line">Type:SINK</div><div class="line">RollbackCount:0</div><div class="line">EventDrainSuccessCount:4871</div><div class="line">KafkaEventSendTimer:24748</div><div class="line">StopTime:0</div><div class="line"></div><div class="line">CHANNEL.channel1:</div><div class="line">ChannelCapacity:1000</div><div class="line">ChannelFillPercentage:0.0</div><div class="line">Type:CHANNEL</div><div class="line">ChannelSize:0</div><div class="line">EventTakeSuccessCount:4871</div><div class="line">EventTakeAttemptCount:4915</div><div class="line">StartTime:1511251309391</div><div class="line">EventPutAttemptCount:4871</div><div class="line">EventPutSuccessCount:4871</div><div class="line">StopTime:0</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/opt/jdk1.8.0_101/bin/jstat</div></pre></td></tr></table></figure><h4 id="配置监控flume的脚本文件"><a href="#配置监控flume的脚本文件" class="headerlink" title="配置监控flume的脚本文件"></a>配置监控flume的脚本文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">vim /etc/zabbix/monitor_flume.sh</div><div class="line">event=EventDrainSuccessCount</div><div class="line"><span class="comment">#curl  http://localhost:34545/metrics 2&gt;/dev/null|sed -e 's/\([,]\)\s*/\1\n/g' -e  's/[&#123;&#125;]/\n/g' -e 's/[",]//g' |grep $1|awk -F: '&#123;print $2&#125;'</span></div><div class="line"><span class="keyword">function</span> EventDrainSuccessCount  &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep <span class="variable">$event</span>|awk -F: <span class="string">'&#123;print $2&#125;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> StartTime  &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep StartTim |awk -F: <span class="string">'&#123;print $2&#125;'</span> |sed -n <span class="string">"2p"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Total &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep Total|awk -F: <span class="string">'&#123;print $2&#125;'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#Run the requested function</span></div><div class="line"><span class="variable">$1</span></div></pre></td></tr></table></figure><h4 id="在zabbix-agent配置文件进行部署"><a href="#在zabbix-agent配置文件进行部署" class="headerlink" title="在zabbix agent配置文件进行部署"></a>在zabbix agent配置文件进行部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim zabbix_flume_jdk.conf</div><div class="line">UserParameter=ygc.counts,sudo /opt/jdk1.8.0_101/bin/jstat -gcutil $(pgrep java|head -1)|tail -1|awk  <span class="string">'&#123;print $6&#125;'</span></div><div class="line">UserParameter=fgc.counts,sudo /opt/jdk1.8.0_101/bin/jstat  -gcutil $(pgrep java|head -1)|tail -1|awk  <span class="string">'&#123;print $8&#125;'</span></div><div class="line">UserParameter=jvm.memory.usage,sudo /opt/jdk1.8.0_101/bin/jmap -histo $(pgrep java|sed -n <span class="string">'$p'</span>)|grep Total | sed -n <span class="string">'$p'</span> |awk  <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=jvm.instances.usage,sudo /opt/jdk1.8.0_101/bin/jmap -histo $(pgrep java|sed -n <span class="string">'$p'</span>)|grep Total | sed -n <span class="string">'$p'</span> |awk  <span class="string">'&#123;print $2&#125;'</span></div><div class="line">UserParameter=flume.monitor[*],sudo /bin/bash /etc/zabbix/monitor_flume.sh <span class="variable">$1</span></div></pre></td></tr></table></figure><p><img src="http://7xrthw.com1.z0.glb.clouddn.com/ZABBIX-monitoring-Flume.png" alt=""><br><img src="http://7xrthw.com1.z0.glb.clouddn.com/ZABBIX-monitoring-Flume1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ZABBIX-monitoring-Flume&quot;&gt;&lt;a href=&quot;#ZABBIX-monitoring-Flume&quot; class=&quot;headerlink&quot; title=&quot;ZABBIX monitoring Flume&quot;&gt;&lt;/a&gt;ZABBIX monitoring Flume&lt;/h4&gt;&lt;p&gt;Flume本身提供了http, ganglia的监控服务，而我们目前主要使用zabbix做监控。因此，我们为Flume添加了zabbix监控模块，和sa的监控服务无缝融合。&lt;br&gt;另一方面，净化Flume的metrics。只将我们需要的metrics发送给zabbix，避免 zabbix server造成压力。目前我们最为关心的是Flume能否及时把应用端发送过来的日志写到Hdfs上， 对应关注的metrics为：&lt;/p&gt;
&lt;p&gt;Source : 接收的event数和处理的event数&lt;br&gt;Channel : Channel中拥堵的event数&lt;br&gt;Sink : 已经处理的event数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.itzgeek.com/wp-content/uploads/2014/07/Zabbix.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="monitoring" scheme="http://weblog.chengyangyang.com/categories/monitoring/"/>
    
    
      <category term="Zabbix monitoring" scheme="http://weblog.chengyangyang.com/tags/Zabbix-monitoring/"/>
    
  </entry>
  
  <entry>
    <title>ELK架构梳理-之ES2.4双实例平滑升级至5.2.1踩坑并supervisor管理笔记</title>
    <link href="http://weblog.chengyangyang.com/2017/09/14/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%10%E5%B9%B3%E5%8F%B0/Elasticsearch/ELK%E6%9E%B6%E6%9E%84%E6%A2%B3%E7%90%86-%E4%B9%8BES%202.4%E5%8F%8C%E5%AE%9E%E4%BE%8B%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E8%87%B35.2.1%E8%B8%A9%E5%9D%91%E5%B9%B6supervisor%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://weblog.chengyangyang.com/2017/09/14/日志分析平台/Elasticsearch/ELK架构梳理-之ES 2.4双实例平滑升级至5.2.1踩坑并supervisor管理笔记/</id>
    <published>2017-09-14T09:56:03.000Z</published>
    <updated>2018-04-21T12:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ELK架构梳理："><a href="#ELK架构梳理：" class="headerlink" title="ELK架构梳理："></a>ELK架构梳理：</h4><p>实时日志分析作为掌握业务情况、故障分析排查的一个重要手段，目前使用最多最成熟的莫过于ELK方案，整体方案也有各种架构组合，像<code>rsyslog-&gt;ES-&gt;kibana、rsyslog-&gt;Redis-&gt;Logstash-&gt;ES-&gt;kibana、rsyslog-&gt;kafka-&gt;Logstash-&gt;ES-&gt;kibana</code>等等，复杂点的有spark的引用。</p><p><img src="https://pbs.twimg.com/media/CSqjJGgUwAAJdeW.png" alt=""></p><a id="more"></a><p>每种方案适合不同的应用场景，没有优劣之分，我目前用的是<code>rsyslog-&gt;kafka-&gt;Logstash-&gt;ES-&gt;kibana和rsyslog-&gt;rsyslog中继-&gt;kafka-&gt;Logstash-&gt;ES-&gt;kibana</code>方案，共5台ES（12核、64G、机械盘）每天索引10多亿条日志，包含<code>nginx、uwsgi、redis、php</code>开发日志等，运行比较健壮，每条索引日志精简后在10个字段左右，每天Primary Shard的索引量大概在600个G，考虑到性能问题，我们没要复制分片，同时着重做了ES集群的调优，日志保留7天。</p><p>从整体架构进行抽象总结，其实就是采集-&gt;清洗-&gt;索引-&gt;展现四个环节，再去考虑各环节中缓存、队列的使用，每个环节点用不同的软件来实现。下面介绍一下我目前方案集群的搭建和配置。</p><h4 id="ES集群方案平滑："><a href="#ES集群方案平滑：" class="headerlink" title="ES集群方案平滑："></a>ES集群方案平滑：</h4><p>ES老集群用的2.4.1版本，跑的比较好就一直没动，最近看资料ES5.X已经稳定，并且性能有较大提升，心里就发痒了，但由于业务要保持高可用的属性，就得想一个平滑升级的方案，最后想到了多实例过度的办法，5.X版本网上介绍配置变化较大，也做好了踩坑准备，确定好要升级后，立刻动手。</p><p>一、对应升级改造方案</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 使用端口<span class="number">9220</span>和<span class="number">9330</span> 安装并配置好新的ES5<span class="meta">.2</span><span class="meta">.1</span>实例</div><div class="line"><span class="number">2</span>. 关掉logstash并将ES2<span class="meta">.4</span><span class="meta">.1</span>实例堆栈调小重启（kafka保留<span class="number">3</span>个小时日志所以不会丢失</div><div class="line"><span class="number">3</span>. 启动ES5<span class="meta">.2</span><span class="meta">.1</span>并将logstash开启指向ES5<span class="meta">.2</span><span class="meta">.1</span></div><div class="line"><span class="number">4</span>. 安装新版kibana实例做好指向，老数据用http://host/old访问——&gt;ES5<span class="meta">.2</span><span class="meta">.1</span>配置调优。</div></pre></td></tr></table></figure><p>二、升级后统一用<a href="github：https://github.com/mlazarov/supervisord-monitor">supervisord-monitor管理</a><br>三、周末跑了一天ES的cpu、IO、heap内存使用率，es磁盘情况，集群健康监测和thread_pool的监控数据（需要了解的添加QQ群）<br>四、升级过程——编写了ES5.2.1的安装脚本如下</p><h4 id="集群脚本化部署："><a href="#集群脚本化部署：" class="headerlink" title="集群脚本化部署："></a>集群脚本化部署：</h4><p>之前用的rpm包，后考虑直接使用tar包安装，对于需要系统做的调优操作，直接编写自动化安装脚本，一键将所有系统参数配置后，将环境搭建好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/bin/sh</span></div><div class="line">id elasticsearch || useradd elasticsearch <span class="_">-s</span> /sbin/nologin   <span class="comment">#添加用户</span></div><div class="line">grep <span class="string">"* - nofile 512000"</span> /etc/security/limits.conf || <span class="built_in">echo</span>  <span class="string">"* - nofile 512000"</span>  &gt;&gt; /etc/security/limits.conf  <span class="comment">#修改文件描述符数量</span></div><div class="line">grep <span class="string">"elasticsearch - nproc unlimited"</span> /etc/security/limits.conf || <span class="built_in">echo</span> <span class="string">"elasticsearch - nproc unlimited"</span>   &gt;&gt; /etc/security/limits.conf  <span class="comment">#修改最大打开进程数数量</span></div><div class="line">grep <span class="string">"fs.file-max = 1024000"</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">"fs.file-max = 1024000"</span>  &gt;&gt; /etc/sysctl.conf  <span class="comment">#修改系统文件描述符</span></div><div class="line">grep <span class="string">"vm.max_map_count = 262144"</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">"vm.max_map_count = 262144"</span>  &gt;&gt;  /etc/sysctl.conf  <span class="comment">#修改程序最大管理的vm</span></div><div class="line">sysctl -p</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">[ ! <span class="_">-f</span> /usr/<span class="built_in">local</span>/src/elasticsearch-5.2.1.zip ] &amp;&amp; wget </div><div class="line">https://artifacts.elastic.co/dow ... ticsearch-5.2.1.zip</div><div class="line">[ ! <span class="_">-d</span> /usr/<span class="built_in">local</span>/src/elasticsearch-5.2.1 ] &amp;&amp; unzip elasticsearch-5.2.1.zip</div><div class="line">mv elasticsearch-5.2.1 /usr/<span class="built_in">local</span>/</div><div class="line">chown -R elasticsearch:elasticsearch /usr/<span class="built_in">local</span>/elasticsearch-5.2.1  <span class="comment">#修改拥有者所有组</span></div><div class="line">sed -i <span class="string">'s/-XX:+UseConcMarkSweepGC/-XX:+UseG1GC/'</span> /usr/<span class="built_in">local</span>/elasticsearch-5.2.1/config/jvm.options    <span class="comment">#GC方式修改为G1</span></div><div class="line">sed -i <span class="string">'s/-XX:CMSInitiatingOccupancyFraction=75/-XX:MaxGCPauseMillis=200/'</span> /usr/<span class="built_in">local</span>/elasticsearch-5.2.1/config/jvm.options</div><div class="line">sed -i <span class="string">'s/-XX:+UseCMSInitiatingOccupancyOnly/#-XX:+UseCMSInitiatingOccupancyOnly/'</span> /usr/<span class="built_in">local</span>/elasticsearch-5.2.1/config/jvm.options</div></pre></td></tr></table></figure><h4 id="五、升级过程——配置文件、索引相关的更新调优"><a href="#五、升级过程——配置文件、索引相关的更新调优" class="headerlink" title="五、升级过程——配置文件、索引相关的更新调优"></a>五、升级过程——配置文件、索引相关的更新调优</h4><p>   升级期间着实踩了不少坑，老版ES索引配置可以直接写到配置文件里，新版是不行的，必须使用api去设置，另外ES2.X版本的进程数调优，在ES5.X我发现调整与否没有影响。配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cluster.name: yz-5search</div><div class="line">path.data:  /data1/LogData5/</div><div class="line">path.logs:  /data1/LogData5/logs</div><div class="line">bootstrap.memory_lock: <span class="literal">false</span>   <span class="comment">#centos6内核不支持，必须要关闭</span></div><div class="line">bootstrap.system_call_filter: <span class="literal">false</span></div><div class="line">network.host: 10.39.40.94</div><div class="line">http.port: 9220</div><div class="line">transport.tcp.port: 9330</div><div class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"10.39.40.94:9330"</span>,<span class="string">"10.39.40.95:9330"</span>,<span class="string">"10.39.40.96:9330"</span>,<span class="string">"10.39.40.97:9330"</span>]</div><div class="line">discovery.zen.minimum_master_nodes: 2</div><div class="line">http.cors.enabled: <span class="literal">true</span></div><div class="line">http.cors.allow-origin: <span class="string">"*"</span></div></pre></td></tr></table></figure><p>为了加快索引效率，编写index的模板配置（index配置不允许写到配置文件了），将参数put到es的里，当然模板也可以通过前端logstash指定（要改logtash觉得麻烦），template脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/bin/sh</span></div><div class="line"><span class="comment">#index template</span></div><div class="line">curl -XPUT <span class="string">'http://10.39.40.94:9220/_template/cms_logs?pretty'</span> <span class="_">-d</span> <span class="string">'&#123;</span></div><div class="line">     "order": 6,                                    #优先级</div><div class="line">      "template": "logstash-cms*",                  #正则匹配索引</div><div class="line">      "settings": &#123;</div><div class="line">             "index.refresh_interval" : "60s",  #索引刷新时间</div><div class="line">             "index.number_of_replicas" : "0",  #副本数设置为0</div><div class="line">             "index.number_of_shards" : "8",    #分片数设置为8，共4台服务器</div><div class="line">             "index.translog.flush_threshold_size" : "768m",  #translog触发flush的阀值</div><div class="line">             "index.store.throttle.max_bytes_per_sec" : "500m", #存储的阀值</div><div class="line">             "index.translog.durability": "async",              #设置translog异步刷新到硬盘，更注重性能</div><div class="line">             "index.merge.scheduler.max_thread_count": "1",     #机械盘设置为1</div><div class="line">             "index.routing.allocation.total_shards_per_node": "2"  #每个节点上两个分片</div><div class="line">      &#125;</div><div class="line">&#125;'</div></pre></td></tr></table></figure><p>备：如果是更改，将PUT改为POST</p><p>日志保留7天，清除的脚本如下，写入计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">DATE=`date +%Y.%m.%d.%I`</div><div class="line">DATA2=`date +%Y.%m.%d <span class="_">-d</span><span class="string">'-7 day'</span>`</div><div class="line">curl -XDELETE <span class="string">"http://10.39.40.97:9220/logstash-*-<span class="variable">$&#123;DATA2&#125;</span>*?pretty"</span></div></pre></td></tr></table></figure><p>   由于单个索引达到了35G甚至40G以上，于是在logstash层面对建索引数量进行修改，把每天12个索引修改为每天24个索引：</p><p>logstash的修改如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">index</span> =&gt; <span class="string">"logstash-cms-front-nginx-%&#123;+YYYY.MM.dd.hh&#125;"</span>  修改为</div><div class="line"><span class="attr">index</span> =&gt; <span class="string">"logstash-cms-front-nginx-%&#123;+YYYY.MM.dd.HH&#125;"</span></div></pre></td></tr></table></figure><p><em>*更新自动化搭建es集群，架构梳理详解-与实现es监控服务</em></p><p>参考： Logstash分享,online生产环境的使用,online日志规范。</p><p><strong>☺待整理续写~~</strong> </p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ELK架构梳理：&quot;&gt;&lt;a href=&quot;#ELK架构梳理：&quot; class=&quot;headerlink&quot; title=&quot;ELK架构梳理：&quot;&gt;&lt;/a&gt;ELK架构梳理：&lt;/h4&gt;&lt;p&gt;实时日志分析作为掌握业务情况、故障分析排查的一个重要手段，目前使用最多最成熟的莫过于ELK方案，整体方案也有各种架构组合，像&lt;code&gt;rsyslog-&amp;gt;ES-&amp;gt;kibana、rsyslog-&amp;gt;Redis-&amp;gt;Logstash-&amp;gt;ES-&amp;gt;kibana、rsyslog-&amp;gt;kafka-&amp;gt;Logstash-&amp;gt;ES-&amp;gt;kibana&lt;/code&gt;等等，复杂点的有spark的引用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CSqjJGgUwAAJdeW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Log Analysis Platform" scheme="http://weblog.chengyangyang.com/categories/Log-Analysis-Platform/"/>
    
    
      <category term="logstash" scheme="http://weblog.chengyangyang.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>KafKa不懂就学就问就解答笔记</title>
    <link href="http://weblog.chengyangyang.com/2017/09/11/Bigdata-hadoop/Kafka/KafKa%E4%B8%8D%E6%87%82%E5%B0%B1%E5%AD%A6%E5%B0%B1%E9%97%AE%E5%B0%B1%E8%A7%A3%E7%AD%94%E7%AC%94%E8%AE%B0/"/>
    <id>http://weblog.chengyangyang.com/2017/09/11/Bigdata-hadoop/Kafka/KafKa不懂就学就问就解答笔记/</id>
    <published>2017-09-11T03:22:00.000Z</published>
    <updated>2017-12-03T06:44:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗"><a href="#1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗" class="headerlink" title="1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?"></a>1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">答案：可以是可以，但为了容错还是部署zookeeper集群比较好。broker和zookeeper的对应比例倒是没什么，都是独立集群。</div></pre></td></tr></table></figure><p><img src="https://www.confluent.io/wp-content/uploads/2016/09/Event-sourced-based-architecture.jpeg" alt=""></p><a id="more"></a><h5 id="2-kafka集群为什么需要zookeeper来配合？"><a href="#2-kafka集群为什么需要zookeeper来配合？" class="headerlink" title="2. kafka集群为什么需要zookeeper来配合？"></a>2. kafka集群为什么需要zookeeper来配合？</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">答案：zookeeper 是作为性能协调工具的角色存在。存储着你Kafka服务的一些些元数据（partitions、offset等等）。zookeeper集群的作用在于保证Zookeeper服务的高可用。因此你可以根据你的需要来选择是否构建zookeeper集群。</div></pre></td></tr></table></figure><h5 id="3-查看kafka-topic-消费记录报错WARN-Session-0x0-for-server-null-unexpected-error-closing-socket-connection-and-attempting-reconnect-org-apache-zookeeper-ClientCnxn"><a href="#3-查看kafka-topic-消费记录报错WARN-Session-0x0-for-server-null-unexpected-error-closing-socket-connection-and-attempting-reconnect-org-apache-zookeeper-ClientCnxn" class="headerlink" title="3. 查看kafka topic 消费记录报错WARN Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)"></a>3. 查看kafka topic 消费记录报错WARN Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)</h5><p>java.net.ConnectException: Connection timed out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">问题：</div><div class="line">1.是kafka连不上zookeeper了。请检查 zk 集群是否正常能Telnet，kafka集群是否正常。</div><div class="line">2.检查server.properties 中zookeeper.connect是否配置正确，如果都没有问题，重新启动服务。</div></pre></td></tr></table></figure><h5 id="4-kafka-支持压缩传输吗？"><a href="#4-kafka-支持压缩传输吗？" class="headerlink" title="4. kafka 支持压缩传输吗？"></a>4. kafka 支持压缩传输吗？</h5><h5 id="5-Kafka-如何在开启数据压缩的情况下-consumer维护自己的offset"><a href="#5-Kafka-如何在开启数据压缩的情况下-consumer维护自己的offset" class="headerlink" title="5. Kafka 如何在开启数据压缩的情况下, consumer维护自己的offset?"></a>5. Kafka 如何在开启数据压缩的情况下, consumer维护自己的offset?</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">问题：</div><div class="line">kafka这边数据传输消费跨aws机房较慢。会有网络瓶颈,我们kafka在国外的一dalasi机房，消费端在dalasi。</div><div class="line"></div><div class="line">官网解答：</div><div class="line">Offset management on the consumer</div><div class="line"></div><div class="line">The data received by a consumer <span class="keyword">for</span> a topic might contain both compressed as well as uncompressed messages. The consumer iterator transparently decompresses compressed data and only returns an uncompressed message. The offset maintenance <span class="keyword">in</span> the consumer gets a little tricky. In the zookeeper consumer, the consumed offset is updated each time a message is returned. This consumed offset should be a valid fetch offset <span class="keyword">for</span> correct failure recovery. Since data is stored <span class="keyword">in</span> compressed format on the broker, valid fetch offsets are the compressed message boundaries. Hence, <span class="keyword">for</span> compressed data, the consumed offset will be advanced one compressed message at a time. This has the side effect of possible duplicates <span class="keyword">in</span> the event of a consumer failure. For uncompressed data, consumed offset will be advanced one message at a time.</div><div class="line"></div><div class="line">这段话不是很理解: producer将100条message压缩成1条发给broker后, broker是如何存储的，并且consumer是如何取出这压缩后的数据, 并维护offset的?</div><div class="line"></div><div class="line"><span class="comment">### 消息压缩（message compression）</span></div><div class="line"></div><div class="line">考虑到网络带宽的瓶颈，Kafka提供了消息组压缩特性。Kafka通过递归消息集来支持高效压缩。高效压缩需要多个消息同时压缩，而不是对每个消息单独压缩。一批消息压缩在一起发送给broker。压缩消息集降低了网络的负载，但是解压缩也带来了一些额外的开销。消息集的解压缩是由broker处理消息offset时完成的。</div><div class="line"></div><div class="line">每个消息可通过一个不可比较的、递增的逻辑offset访问，这个逻辑offset在每个分区内是唯一的。接收到压缩数据后，lead broker将消息集解压缩，为每个消息分配offset。offset分配完成后，leader再次将消息集压缩并写入磁盘。</div><div class="line"></div><div class="line">在Kafka中，数据的压缩由producer完成，可使用GZIP或Snappy压缩协议。同时需要在producer端配置相关的参数：</div><div class="line"></div><div class="line">compression.codec：指定压缩格式，默认为none，可选的值还有gzip和snappy。</div><div class="line">compressed.topics：设置对指定的topic开启压缩，默认为null。当compression.codec不为none时，对指定的topic开启压缩；如果compressed.topics为null则对所有topic开启压缩。</div><div class="line">消息集ByteBufferMessageSet可能既包含压缩数据也包含非压缩数据，为了区分开来，消息头中添加了压缩属性字节。在该字节中，最低位的两位表示压缩格式，如果都是0表示非压缩数据。</div></pre></td></tr></table></figure><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗&quot;&gt;&lt;a href=&quot;#1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗&quot; class=&quot;headerlink&quot; title=&quot;1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?&quot;&gt;&lt;/a&gt;1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;答案：可以是可以，但为了容错还是部署zookeeper集群比较好。broker和zookeeper的对应比例倒是没什么，都是独立集群。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://www.confluent.io/wp-content/uploads/2016/09/Event-sourced-based-architecture.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存</title>
    <link href="http://weblog.chengyangyang.com/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper%E9%9B%86%E7%BE%A4%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E5%92%8C%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%20/"/>
    <id>http://weblog.chengyangyang.com/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存 /</id>
    <published>2017-08-27T06:46:00.000Z</published>
    <updated>2019-01-17T08:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Zookeeper集群日志配置详解和清理自定义启动内存"><a href="#Zookeeper集群日志配置详解和清理自定义启动内存" class="headerlink" title="Zookeeper集群日志配置详解和清理自定义启动内存"></a>Zookeeper集群日志配置详解和清理自定义启动内存</h4><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>搭建zookeeper和kafka集群运行大数据处理数据消费，公司dubbo使用zookeeper做服务端的服务发现管理及配置中心，在使用时都出现过由于zk的日志大小过大塞满磁盘的情况 ，遇到了Zookeeper日志问题输出路径的问题, 发现zookeeper设置log4j.properties不能解决日志路径问题, 发现解决方案如下。</p><p><img src="http://image.chengyangyang.com/zookeeper_cartoon.jpg" alt=""></p><h3 id="zookeeper日志说明"><a href="#zookeeper日志说明" class="headerlink" title="zookeeper日志说明"></a>zookeeper日志说明</h3><p>ZooKeeper使用<code>SLF4J(the Simple Logging Facade for Java)</code>作为日志的抽象层，默认使用<code>Log4J</code>来做实际的日志工作。使用2层日志抽象看起来真是够呛，这里简要的说明如何来配置<code>Log4J</code>。尽管Log4J非常灵活且强大，但它也有一些复杂，可以用一整本书来描述它，这里只是简要的介绍一下基本的用法。</p><a id="more"></a><p>Log4J的配置文件名为<code>log4j.properties</code>，从classpath中查找。如果没有找到log4j.properties文件，会输出如下警告信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">log</span>4j:WARN No appenders could be found <span class="keyword">for</span> logger (org.apache.zookeeper.serv ...  </div><div class="line"><span class="built_in">log</span>4j:WARN Please initialize the <span class="built_in">log</span>4j system properly.</div></pre></td></tr></table></figure><p>它说的是所有后续的日志消息会被丢弃，通常<code>log4j.properties</code>文件会放在<code>conf</code>文件夹，并放在<code>classpath</code>下。<br>来看看<code>ZooKeeper</code>使用的<code>log4j.properties</code>的主要部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[jollybi@kafka2 conf]$ cat <span class="built_in">log</span>4j.properties | grep -Pv <span class="string">"^$|^#"</span></div><div class="line">zookeeper.root.logger=INFO, CONSOLE  <span class="comment">#（1）</span></div><div class="line">zookeeper.console.threshold=INFO</div><div class="line">zookeeper.log.dir=.</div><div class="line">zookeeper.log.file=zookeeper.log</div><div class="line">zookeeper.log.threshold=DEBUG</div><div class="line">zookeeper.tracelog.dir=.                                                                     </div><div class="line">zookeeper.tracelog.file=zookeeper_trace.log</div><div class="line"><span class="built_in">log</span>4j.rootLogger=<span class="variable">$&#123;zookeeper.root.logger&#125;</span> <span class="comment">#（2）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender  <span class="comment">#（3）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.Threshold=<span class="variable">$&#123;zookeeper.console.threshold&#125;</span> <span class="comment">#（4）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout <span class="comment">#（5）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender <span class="comment">#（6）</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.Threshold=<span class="variable">$&#123;zookeeper.log.threshold&#125;</span> <span class="comment">#（7）</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.File=<span class="variable">$&#123;zookeeper.log.dir&#125;</span>/<span class="variable">$&#123;zookeeper.log.file&#125;</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.MaxFileSize=10MB</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE=org.apache.log4j.FileAppender</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.Threshold=TRACE</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.File=<span class="variable">$&#123;zookeeper.tracelog.dir&#125;</span>/<span class="variable">$&#123;zookeeper.tracelog.file&#125;</span></div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L][%x] - %m%n</div></pre></td></tr></table></figure><ul><li><p>(1) <code>zookeeper.root.logger=INFO, CONSOLE</code><br>第一组设置以<code>zookeeper</code>开头，它们实际上是<code>Java system property</code>，可以被<code>-D</code>形式的命令行参数覆盖。<br>第一行配置了日志级别，默认的设置是说在INFO级别以下的日志会被丢弃，并且日志会使用<code>CONSOLE appender</code>输出。你可以指定多个<code>appender</code>，例如如果你想使用<code>CONSOLE appender</code>和<code>ROLLINGFILE appender</code>输出日志，那么可以配置<code>zookeeper.logger</code>为<code>INFO,CONSOLE,ROLLINGFILE</code>。</p></li><li><p>(2) <code>rootLogger</code>处理所有日志的<code>logger</code>，因为我们没有定义其他<code>logger</code>。</p></li><li><p>(3) <code>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</code>这一行把CONSOLE appender和实际上处理日志输出的类绑定在一起，这里是ConsoleAppender类。</p></li><li><p>(4) <code>appender</code>也可以过滤日志。这一行将过滤任何在INFO级别之下的日志，因为这是在<code>zookeeper.root.logger设置的threshold</code>。</p></li><li><p>(5) <code>appender</code>使用一个布局(layout)类在输出前对日志进行格式化。我们使用pattern layout来记录日志的级别，日期，线程信息和调用位置信息以及消息本身。</p></li><li><p>(6) RollingFileAppender实现了rolling日志文件的功能，而不是持续的写到一个单独的文件或者控制台。如果rootLogger没有关联ROLLINGFILE，则此appender会被忽略。</p></li><li><p>(7) <code>ROLLINGFILE</code>的threshold设置成<code>DEBUG</code>。因为<code>rootLogger</code>过滤了所有在<code>INFO</code>级别之下的日志，没有DEBUG日志会输出到<code>ROLLINGFILE</code>。如果你想要看到<code>DEBUG</code>日志，你必须把<code>zookeeper.root.logger</code>从<code>INFO改成DEBUG</code>。</p></li></ul><p>打日志会影响到进程的性能，尤其是在DEBUG级别下。同时日志会提供有价值的信息为诊断错误提供线索。一个平衡性能开销的有效方式是把appender的threshold设成DEBUG，并把rootLogger设成WARN级别，这在一般的情况都适用，一般只需要关注WARNING和它之上的日志。当你需要诊断问题时可以使用JMX动态设置为INFO或DEBUG级别，这样可以更方便定位问题。</p><h3 id="快照事物日志-修改日志输出目录"><a href="#快照事物日志-修改日志输出目录" class="headerlink" title="快照事物日志,修改日志输出目录"></a>快照事物日志,修改日志输出目录</h3><p>之前出现<code>zookeeper</code>在bin目录下出现了<code>zookeeper.out</code>的日志文件，经分析发现此文件是由于<code>nohup</code>命令打印的控制台日志。</p><p>但是，我们在<code>zoo.cfg</code>配置文件中，对日志文件进行了配置（截取部分）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dataDir=/data/tools/zookeeper-3.4.5/tmp</div><div class="line">dataLogDir=/data/tools/zookeeper-3.4.5/tmp/logs</div></pre></td></tr></table></figure><p>其中，<code>dataDir和dataLogDir</code>是针对数据信息及数据信息日志的位置配置。但是在zookeeper内部集成了<code>log4j.properties</code>（对应配置文件在conf路径下）。</p><h3 id="参考log4j配置说明"><a href="#参考log4j配置说明" class="headerlink" title="参考log4j配置说明"></a>参考log4j配置说明</h3><p>打开<code>log4j.properties</code>文件，我们会发现有这样的配置，它在说明关于<code>zookeeper</code>本身的一些默认设置，但是可以被系统配置文件所覆盖。那么，在<code>log4j</code>中，<code>root是log4j</code>记录的原始起点，而这部分参数又可以被系统修改，那么系统配置在什么地方呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Define some default values that can be overridden by system properties</span></div><div class="line">zookeeper.root.logger=INFO, CONSOLE</div><div class="line">zookeeper.console.threshold=INFO</div><div class="line">zookeeper.log.dir=.</div><div class="line">zookeeper.log.file=zookeeper.log</div><div class="line">zookeeper.log.threshold=DEBUG</div><div class="line">zookeeper.tracelog.dir=.</div><div class="line">zookeeper.tracelog.file=zookeeper_trace.log</div></pre></td></tr></table></figure><p>zk日志.out及log4j日志路径配置 ：首先修改<code>bin/zkEnv.sh</code>，配置<code>ZOO_LOG_DIR</code>的环境变量，<code>ZOO_LOG_DIR</code>是zookeeper日志输出目录，<code>ZOO_LOG4J_PROP</code>是log4j日志输出的配置：</p><ul><li>默认配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG_DIR=<span class="string">"."</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG4J_PROP=<span class="string">"INFO,CONSOLE"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><ul><li>生产环境修改：</li></ul><p>在zk目录下面创建logs目录 给予bi组操作权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /data/tools/zookeeper-3.4.5/logs/</div><div class="line">sudo chown -R jollybi:jollybi /data/tools/zookeeper-3.4.5/logs/</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG_DIR=<span class="string">"<span class="variable">$ZOOBINDIR</span>/../logs"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG4J_PROP=<span class="string">"INFO,ROLLINGFILE"</span>  //ROLLINGFILE —— 日志轮转，避免单一文件过大</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h3 id="Zk设置定期自动清理日志"><a href="#Zk设置定期自动清理日志" class="headerlink" title="Zk设置定期自动清理日志."></a>Zk设置定期自动清理日志.</h3><p>从<code>3.4.0</code>开始，zookeeper提供了自动清理<code>snapshot</code>和事务日志的功能，通过配置 <code>autopurge.snapRetainCount</code> 和 <code>autopurge.purgeInterval</code> 这两个参数能够实现定时清理了。这两个参数都是在zoo.cfg中配置的：</p><ul><li>在zoo.cfg中配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">autopurge.purgeInterval: 24*2     </div><div class="line"><span class="comment">##这个参数指定了清理频率，单位是小时。默认是0，表示不开启自己清理功能。</span></div><div class="line">autopurge.snapRetainCount:  2</div><div class="line"><span class="comment">##这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。</span></div></pre></td></tr></table></figure><h3 id="配置zookeeper-out的位置及log4j日志输出"><a href="#配置zookeeper-out的位置及log4j日志输出" class="headerlink" title="配置zookeeper.out的位置及log4j日志输出"></a>配置zookeeper.out的位置及log4j日志输出</h3><h6 id="1-zookeeper-out由nohup的输出，也就是zookeeper的stdout和stdeer输出。"><a href="#1-zookeeper-out由nohup的输出，也就是zookeeper的stdout和stdeer输出。" class="headerlink" title="1. zookeeper.out由nohup的输出，也就是zookeeper的stdout和stdeer输出。"></a>1. <code>zookeeper.out</code>由nohup的输出，也就是<code>zookeeper</code>的<code>stdout和stdeer</code>输出。</h6><p>在zkServer.sh中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ ! -w <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span> ] ; <span class="keyword">then</span>  </div><div class="line">mkdir -p <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span>  </div><div class="line"><span class="keyword">fi</span>  </div><div class="line">  </div><div class="line">_ZOO_DAEMON_OUT=<span class="string">"<span class="variable">$ZOO_LOG_DIR</span>/zookeeper.out"</span>  <span class="comment">#日志输出文件路径</span></div><div class="line"></div><div class="line"><span class="comment">#nohup日志输出</span></div><div class="line">nohup <span class="variable">$JAVA</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \  </div><div class="line">-cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> &gt; <span class="string">"<span class="variable">$_ZOO_DAEMON_OUT</span>"</span> 2&gt;&amp;1 &lt; /dev/null &amp;</div></pre></td></tr></table></figure><h6 id="2-log4j日志输出配置-conf-log4j-properties中："><a href="#2-log4j日志输出配置-conf-log4j-properties中：" class="headerlink" title="2.log4j日志输出配置 conf/log4j.properties中："></a>2.log4j日志输出配置 conf/log4j.properties中：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add ROLLINGFILE to rootLogger to get log file output  </span></div><div class="line"><span class="comment">#    Log DEBUG level and above messages to a log file  </span></div><div class="line"></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender  //日志轮转，DaliyRollingFileAppender —— 按天轮转</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.Threshold=<span class="variable">$&#123;zookeeper.log.threshold&#125;</span>  </div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.File=<span class="variable">$&#123;zookeeper.log.dir&#125;</span>/<span class="variable">$&#123;zookeeper.log.file&#125;</span></div></pre></td></tr></table></figure><p>轮转前提需要将(1)里bin/zkEnv.sh中的轮转配置好</p><p>4.zk事务日志查看</p><p>zookeeper的事务日志通过zoo.cfg文件中的dataLogDir配置项配置：</p><pre><code># the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/tmp/zookeeper    </code></pre><p>查看事务日志方法：<br>(需要下载slf4j-api-1.6.1.jar包) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -classpath .:slf4j-api-1.6.1.jar:zookeeper-3.4.5.jar org.apache.zookeeper.server.LogFormatter /tmp/zookeeper/version-2/xxx.xxx</div></pre></td></tr></table></figure><h3 id="怎么自定义zookeeper的启动内存"><a href="#怎么自定义zookeeper的启动内存" class="headerlink" title="怎么自定义zookeeper的启动内存"></a>怎么自定义zookeeper的启动内存</h3><p>运行zookeeper时，使用jmap -heap <pid> 命令查看内存情况如下:</pid></p><p><img src="http://image.chengyangyang.com/zookeeper_01.png" alt=""></p><p>解决：分配内存文件路径：<code>zookeeper/bin/zkEnv.sh</code></p><p>该文件已经明确说明有独立JVM内存的设置文件，路径是<code>zookeeper/conf/java.env</code><br>安装的时候这个路径下没有有<code>java.env</code>文件，需要自己新建一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim java.env</span></div><div class="line"></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk</div><div class="line"><span class="comment"># heap size MUST be modified according to cluster environment</span></div><div class="line"><span class="built_in">export</span> JVMFLAGS=<span class="string">"-Xms4g -Xmx4g <span class="variable">$JVMFLAGS</span>"</span></div><div class="line"></div><div class="line">对于内存的分配，还是根据项目和机器情况而定。如果内存够用，适当的大点可以提升zk性能。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Zookeeper集群日志配置详解和清理自定义启动内存&quot;&gt;&lt;a href=&quot;#Zookeeper集群日志配置详解和清理自定义启动内存&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper集群日志配置详解和清理自定义启动内存&quot;&gt;&lt;/a&gt;Zookeeper集群日志配置详解和清理自定义启动内存&lt;/h4&gt;&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;搭建zookeeper和kafka集群运行大数据处理数据消费，公司dubbo使用zookeeper做服务端的服务发现管理及配置中心，在使用时都出现过由于zk的日志大小过大塞满磁盘的情况 ，遇到了Zookeeper日志问题输出路径的问题, 发现zookeeper设置log4j.properties不能解决日志路径问题, 发现解决方案如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/zookeeper_cartoon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;zookeeper日志说明&quot;&gt;&lt;a href=&quot;#zookeeper日志说明&quot; class=&quot;headerlink&quot; title=&quot;zookeeper日志说明&quot;&gt;&lt;/a&gt;zookeeper日志说明&lt;/h3&gt;&lt;p&gt;ZooKeeper使用&lt;code&gt;SLF4J(the Simple Logging Facade for Java)&lt;/code&gt;作为日志的抽象层，默认使用&lt;code&gt;Log4J&lt;/code&gt;来做实际的日志工作。使用2层日志抽象看起来真是够呛，这里简要的说明如何来配置&lt;code&gt;Log4J&lt;/code&gt;。尽管Log4J非常灵活且强大，但它也有一些复杂，可以用一整本书来描述它，这里只是简要的介绍一下基本的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata" scheme="http://weblog.chengyangyang.com/categories/Bigdata/"/>
    
    
      <category term="ZooKeeper" scheme="http://weblog.chengyangyang.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>tomcat Java heap space 内存溢出</title>
    <link href="http://weblog.chengyangyang.com/2017/08/18/Web%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF/tomcat/tomcat%20Java%20heap%20space%20%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>http://weblog.chengyangyang.com/2017/08/18/Web服务技术/tomcat/tomcat Java heap space 内存溢出/</id>
    <published>2017-08-18T09:44:04.000Z</published>
    <updated>2019-01-17T08:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tomcat-Java-heap-space-内存溢出"><a href="#tomcat-Java-heap-space-内存溢出" class="headerlink" title="tomcat Java heap space 内存溢出"></a>tomcat Java heap space 内存溢出</h3><p>confluence服务器早上BI那边反应访问wiki出现504 Gateway time-out 之前定位到问题是服务器CPU负载过高 之前服务器配置1核1G的配置 导致用户请求超时，后面服务器升级到2核4G内存，默认wiki没有内存优化，导致这次访问出现内存溢出的报错。</p><p>内存溢出日志报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">2017-08-18 16:30:07,181 INFO [main] [com.atlassian.confluence.lifecycle] contextInitialized Starting Confluence 3.4.5 (build <span class="comment">#2035)</span></div><div class="line">2017-08-18 16:30:10,297 INFO [main] [atlassian.plugin.manager.DefaultPluginManager] init Initialising the plugin system</div><div class="line">2017-08-18 16:30:10,519 INFO [main] [atlassian.plugin.manager.DefaultPluginManager] init Plugin system started <span class="keyword">in</span> 0:00:00.219</div><div class="line">Aug 18, 2017 4:30:51 PM org.apache.coyote.http11.Http11Protocol start</div><div class="line">INFO: Starting Coyote HTTP/1.1 on http-8080</div><div class="line">Aug 18, 2017 4:30:51 PM org.apache.catalina.startup.Catalina start</div><div class="line">INFO: Server startup <span class="keyword">in</span> 48320 ms</div><div class="line"></div><div class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler <span class="keyword">in</span> thread <span class="string">"Timer-0"</span></div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"DefaultQuartzScheduler_QuartzSchedulerThread"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"com.mchange.v2.async.ThreadPoolAsynchronousRunner<span class="variable">$PoolThread</span>-#2"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line"></div><div class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler <span class="keyword">in</span> thread <span class="string">"ContainerBackgroundProcessor[StandardEngine[Standalone]]"</span></div><div class="line"></div><div class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler <span class="keyword">in</span> thread <span class="string">"com.mchange.v2.async.ThreadPoolAsynchronousRunner<span class="variable">$PoolThread</span>-#1"</span></div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"com.mchange.v2.async.ThreadPoolAsynchronousRunner<span class="variable">$PoolThread</span>-#0"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"DefaultQuartzScheduler_Worker-1"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"DefaultQuartzScheduler_Worker-3"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"DefaultQuartzScheduler_Worker-2"</span> java.lang.OutOfMemoryError: Java heap space</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"http-8080-2"</span> java.lang.OutOfMemoryError: Java heap space</div></pre></td></tr></table></figure><p>第一查看现在Java应用进程运行状态是否优化过，运行的内存大小多少。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@wiki-bi logs]<span class="comment"># jmap -heap 4299</span></div><div class="line">Attaching to process ID 4299, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 23.25-b01</div><div class="line"></div><div class="line">using thread-local object allocation.</div><div class="line">Parallel GC with 4 thread(s)</div><div class="line"></div><div class="line">Heap Configuration:</div><div class="line">   M<span class="keyword">in</span>HeapFreeRatio = 40</div><div class="line">   MaxHeapFreeRatio = 70</div><div class="line">   MaxHeapSize      = 536870912 (512.0MB)</div><div class="line">   NewSize          = 1310720 (1.25MB)</div><div class="line">   MaxNewSize       = 17592186044415 MB</div><div class="line">   OldSize          = 5439488 (5.1875MB)</div><div class="line">   NewRatio         = 2</div><div class="line">   SurvivorRatio    = 8</div><div class="line">   PermSize         = 21757952 (20.75MB)</div><div class="line">   MaxPermSize      = 268435456 (256.0MB)</div><div class="line">   G1HeapRegionSize = 0 (0.0MB)</div><div class="line"></div><div class="line">Heap Usage:</div><div class="line">PS Young Generation</div><div class="line">Eden Space:</div><div class="line">   capacity = 71958528 (68.625MB)</div><div class="line">   used     = 71943440 (68.61061096191406MB)</div><div class="line">   free     = 15088 (0.0143890380859375MB)</div><div class="line">   99.97903236708788% used</div><div class="line">From Space:</div><div class="line">   capacity = 52166656 (49.75MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 52166656 (49.75MB)</div><div class="line">   0.0% used</div><div class="line">To Space:</div><div class="line">   capacity = 53477376 (51.0MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 53477376 (51.0MB)</div><div class="line">   0.0% used</div><div class="line">PS Old Generation</div><div class="line">   capacity = 357957632 (341.375MB)</div><div class="line">   used     = 357957344 (341.3747253417969MB)</div><div class="line">   free     = 288 (2.74658203125E-4MB)</div><div class="line">   99.9999195435509% used</div><div class="line">PS Perm Generation</div><div class="line">   capacity = 90898432 (86.6875MB)</div><div class="line">   used     = 90605744 (86.40837097167969MB)</div><div class="line">   free     = 292688 (0.2791290283203125MB)</div><div class="line">   99.67800544678262% used</div><div class="line"></div><div class="line">43519 interned Strings occupying 4740128 bytes.</div></pre></td></tr></table></figure><p>这里可以看到MaxHeapSize 等参数默认512MB，这里优化内存配置后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /data/wiki-bi/bin/setenv.sh</div><div class="line"></div><div class="line">JAVA_OPTS=<span class="string">"-Xms2g -Xmx2g  -Xss256k  -XX:PermSize=256M -XX:MaxPermSize=256m -Duser.timezone=Asia/Shanghai <span class="variable">$JAVA_OPTS</span> -Djava.awt.headless=true "</span></div><div class="line"><span class="built_in">export</span> JAVA_OPTS</div></pre></td></tr></table></figure><p><img src="http://image.chengyangyang.com/tomcat-heap-space.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@wiki-bi bin]<span class="comment"># jmap -heap 25727</span></div><div class="line">Attaching to process ID 25727, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 23.25-b01</div><div class="line"></div><div class="line">using thread-local object allocation.</div><div class="line">Parallel GC with 4 thread(s)</div><div class="line"></div><div class="line">Heap Configuration:</div><div class="line">   M<span class="keyword">in</span>HeapFreeRatio = 40</div><div class="line">   MaxHeapFreeRatio = 70</div><div class="line">   MaxHeapSize      = 2147483648 (2048.0MB)</div><div class="line">   NewSize          = 1310720 (1.25MB)</div><div class="line">   MaxNewSize       = 17592186044415 MB</div><div class="line">   OldSize          = 5439488 (5.1875MB)</div><div class="line">   NewRatio         = 2</div><div class="line">   SurvivorRatio    = 8</div><div class="line">   PermSize         = 268435456 (256.0MB)</div><div class="line">   MaxPermSize      = 268435456 (256.0MB)</div><div class="line">   G1HeapRegionSize = 0 (0.0MB)</div><div class="line"></div><div class="line">Heap Usage:</div><div class="line">PS Young Generation</div><div class="line">Eden Space:</div><div class="line">   capacity = 536870912 (512.0MB)</div><div class="line">   used     = 448110856 (427.35181427001953MB)</div><div class="line">   free     = 88760056 (84.64818572998047MB)</div><div class="line">   83.46715122461319% used</div><div class="line">From Space:</div><div class="line">   capacity = 89456640 (85.3125MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 89456640 (85.3125MB)</div><div class="line">   0.0% used</div><div class="line">To Space:</div><div class="line">   capacity = 89456640 (85.3125MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 89456640 (85.3125MB)</div><div class="line">   0.0% used</div><div class="line">PS Old Generation</div><div class="line">   capacity = 1431699456 (1365.375MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 1431699456 (1365.375MB)</div><div class="line">   0.0% used</div><div class="line">PS Perm Generation</div><div class="line">   capacity = 268435456 (256.0MB)</div><div class="line">   used     = 35112728 (33.486106872558594MB)</div><div class="line">   free     = 233322728 (222.5138931274414MB)</div><div class="line">   13.0805104970932% used</div><div class="line"></div><div class="line">15180 interned Strings occupying 1629600 bytes.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tomcat-Java-heap-space-内存溢出&quot;&gt;&lt;a href=&quot;#tomcat-Java-heap-space-内存溢出&quot; class=&quot;headerlink&quot; title=&quot;tomcat Java heap space 内存溢出&quot;&gt;&lt;/a&gt;tomca
      
    
    </summary>
    
      <category term="tomcat" scheme="http://weblog.chengyangyang.com/categories/tomcat/"/>
    
    
      <category term="Java+Tomcat notes" scheme="http://weblog.chengyangyang.com/tags/Java-Tomcat-notes/"/>
    
  </entry>
  
  <entry>
    <title>Monitor Kafka with Prometheus +Grafana</title>
    <link href="http://weblog.chengyangyang.com/2017/08/04/Bigdata-hadoop/Kafka/Monitor%20Kafka%20with%20Prometheus%20+Grafana/"/>
    <id>http://weblog.chengyangyang.com/2017/08/04/Bigdata-hadoop/Kafka/Monitor Kafka with Prometheus +Grafana/</id>
    <published>2017-08-04T03:22:00.000Z</published>
    <updated>2019-01-17T08:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Monitoring-Kafka-with-Prometheus"><a href="#Monitoring-Kafka-with-Prometheus" class="headerlink" title="Monitoring Kafka with Prometheus"></a>Monitoring Kafka with Prometheus</h3><p>We’ve previously looked at how to monitor Cassandra with <a href="https://www.robustperception.io/monitoring-cassandra-with-prometheus/" target="_blank" rel="external">Prometheus</a>. Let’s see the process for getting metrics from another popular Java application, <a href="https://kafka.apache.org/" target="_blank" rel="external">Kafka.</a></p><p><img src="http://image.chengyangyang.com/kafka-overview.png" alt=""></p><a id="more"></a><p>we download Kafka, the JMX exporter and the config file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">wget http://ftp.heanet.ie/mirrors/www.apache.org/dist/kafka/0.10.1.0/kafka_2.11-0.10.1.0.tgz</div><div class="line">tar -xzf kafka _ *。tgz</div><div class="line"><span class="built_in">cd</span> kafka_ *</div><div class="line"></div><div class="line">wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.6/jmx_prometheus_javaagent-0.6.jar</div><div class="line">wget https://raw.githubusercontent.com/prometheus/jmx_exporter/master/example_configs/kafka-0-8-2.yml</div><div class="line"></div><div class="line">Download the good files and put them under the Kafka directory:</div><div class="line">[hadoop@hadoop6 kafka_2.10-0.9.0.1]$ ll</div><div class="line">drwxr-xr-x 3 hadoop hadoop    4096 9月  27 13:34 bin</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 9月  27 21:18 config</div><div class="line">-rw-rw-r-- 1 hadoop hadoop 1225418 2月   5 2016 jmx_prometheus_javaagent-0.6.jar</div><div class="line">-rw-rw-r-- 1 hadoop hadoop    2824 9月  26 17:48 kafka-0-8-2.yml</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 9月  27 13:31 libs</div><div class="line">-rw-r--r-- 1 hadoop hadoop   11358 2月  12 2016 LICENSE</div><div class="line">drwxrwxr-x 2 hadoop hadoop  266240 9月  27 21:19 logs</div><div class="line">-rw-r--r-- 1 hadoop hadoop     162 2月  12 2016 NOTICE</div><div class="line">drwxrwxr-x 5 hadoop hadoop    4096 9月  27 15:56 prometheus-1.2.1.linux-amd64</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 2月  12 2016 site-docs</div></pre></td></tr></table></figure><p>We start a Zookeeper (a Kafka dependency) and Kafka with the JMX exporter running as a Java agent:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">First step:</div><div class="line">Configure the zookeeper zoo.zoo.cfg port: 2181</div><div class="line">Start zookeeper:</div><div class="line">./zookeeper-3.4.6/bin/zkServer.sh start</div><div class="line"></div><div class="line">Second steps:</div><div class="line">Configuration modification: kafka_2.10-0.9.0.1/config/zookeeper.properties</div><div class="line">Port modification: 2182 <span class="keyword">do</span> not conflict with the zookeeper service port</div><div class="line"></div><div class="line"></div><div class="line">dataDir=/data2/zookeeper-3.4.6/zookeeper-data</div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line">clientPort=2181</div><div class="line"><span class="comment"># disable the per-ip limit on the number of connections since this is a non-production config</span></div><div class="line">maxClientCnxns=0</div><div class="line"></div><div class="line">./bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</div><div class="line"></div><div class="line">KAFKA_OPTS=<span class="string">"<span class="variable">$KAFKA_OPTS</span> -javaagent:<span class="variable">$PWD</span>/jmx_prometheus_javaagent-0.6.jar=7071:<span class="variable">$PWD</span>/kafka-0-8-2.yml"</span> \</div><div class="line">./bin/kafka-server-start.sh config/server.properties &amp;</div></pre></td></tr></table></figure><h4 id="If-you-visit-http-localhost-7071-metrics-you’ll-see-the-metrics"><a href="#If-you-visit-http-localhost-7071-metrics-you’ll-see-the-metrics" class="headerlink" title="If you visit http://localhost:7071/metrics you’ll see the metrics."></a>If you visit <a href="http://localhost:7071/metrics" target="_blank" rel="external">http://localhost:7071/metrics</a> you’ll see the metrics.</h4><p>Let’s setup a quick Prometheus server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/prometheus/prometheus/releases/download/v1.2.1/prometheus-1.2.1.linux-amd64.tar.gz</div><div class="line">tar -xzf prometheus-*.tar.gz</div><div class="line"><span class="built_in">cd</span> prometheus-*</div><div class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt; prometheus.yml</div><div class="line">global:</div><div class="line"> scrape_interval: 10s</div><div class="line"> evaluation_interval: 10s</div><div class="line">scrape_configs:</div><div class="line"> - job_name: <span class="string">'kafka'</span></div><div class="line">   static_configs:</div><div class="line">    - targets:</div><div class="line">      - localhost:7071</div><div class="line">EOF</div><div class="line">./prometheus</div></pre></td></tr></table></figure><p>Following run access: <a href="http://localhost:9090/graph" target="_blank" rel="external">http://localhost:9090/graph</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[hadoop@hadoop8 prometheus-1.2.1.linux-amd64]$ ./prometheus</div><div class="line">INFO[0000] Starting prometheus (version=1.2.1, branch=master, revision=dd66f2e94b2b662804b9aa1b6a50587b990ba8b7)  <span class="built_in">source</span>=main.go:75</div><div class="line">INFO[0000] Build context (go=go1.7.1, user=root@fd9b0daff6bd, date=20161010-15:58:23)  <span class="built_in">source</span>=main.go:76</div><div class="line">INFO[0000] Loading configuration file prometheus.yml     <span class="built_in">source</span>=main.go:247</div><div class="line">INFO[0000] Loading series map and head chunks...         <span class="built_in">source</span>=storage.go:354</div><div class="line">INFO[0000] 49 series loaded.                             <span class="built_in">source</span>=storage.go:359</div><div class="line">WARN[0000] No AlertManagers configured, not dispatching any alerts  <span class="built_in">source</span>=notifier.go:176</div><div class="line">INFO[0000] Listening on :9090                            <span class="built_in">source</span>=web.go:240</div><div class="line">INFO[0000] Starting target manager...                    <span class="built_in">source</span>=targetmanager.go:76</div></pre></td></tr></table></figure><p>The Prometheus platform monitors all data from the Kafka index:<br>This function is very powerful, late will explain what each representative means:</p><p><img src="http://image.chengyangyang.com/kafka-monitor02.png" alt=""></p><p><img src="http://image.chengyangyang.com/kafka-monitor03.png" alt=""></p><p>Install <a href="http://docs.grafana.org/installation/rpm/#install-stable" target="_blank" rel="external">open source Grafana monitoring</a>, combine <a href="https://prometheus.io/docs/visualization/grafana/" target="_blank" rel="external">prometheus.io</a> to obtain Prometheus platform data.</p><h3 id="Installing-Grafana"><a href="#Installing-Grafana" class="headerlink" title="Installing Grafana"></a>Installing Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Download and unpack Grafana from binary tar (adjust version as appropriate).</span></div><div class="line">curl -L -O https://grafanarel.s3.amazonaws.com/builds/grafana-2.5.0.linux-x64.tar.gz</div><div class="line">tar zxf grafana-2.5.0.linux-x64.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># Start Grafana.</span></div><div class="line"><span class="built_in">cd</span> grafana-2.5.0/</div><div class="line">./bin/grafana-server web</div></pre></td></tr></table></figure><h3 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h3><p>By default, Grafana will be listening on <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>. The default login is “admin” / “admin”.</p><h4 id="Creating-a-Prometheus-data-source"><a href="#Creating-a-Prometheus-data-source" class="headerlink" title="Creating a Prometheus data source"></a>Creating a Prometheus data source</h4><p>To create a Prometheus data source:</p><ol><li>Click on the Grafana logo to open the sidebar menu.</li><li>Click on “Data Sources” in the sidebar.</li><li>Click on “Add New”.</li><li>Select “Prometheus” as the type.</li><li>Set the appropriate Prometheus server URL (for example, <a href="http://localhost:9090/" target="_blank" rel="external">http://localhost:9090/</a>)</li><li>Adjust other data source settings as desired (for example, turning the proxy access off).</li><li>Click “Add” to save the new data source.</li><li>The following shows an example data source configuration:</li></ol><p>Reference address: <a href="https://prometheus.io/docs/visualization/grafana/" target="_blank" rel="external">GRAFANA SUPPORT FOR PROMETHEUS</a></p><p><img src="https://prometheus.io/assets/grafana_configuring_datasource-cb0e78b7cfa.png" alt=""></p><p>Finally load the <a href="https://grafana.com/dashboards/721" target="_blank" rel="external">Kafka Overview</a> dashboard from grafana.net into your Grafana to get the above console!</p><p>If you want to run Kafka inside docker, there’s <a href="https://www.robustperception.io/monitoring-kafka-in-a-docker-container-using-prometheus/" target="_blank" rel="external">another blog post</a> covering that.</p><p>Reference address: <a href="https://www.robustperception.io/monitoring-kafka-with-prometheus/" target="_blank" rel="external">monitoring-kafka-with-prometheus</a></p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Monitoring-Kafka-with-Prometheus&quot;&gt;&lt;a href=&quot;#Monitoring-Kafka-with-Prometheus&quot; class=&quot;headerlink&quot; title=&quot;Monitoring Kafka with Prometheus&quot;&gt;&lt;/a&gt;Monitoring Kafka with Prometheus&lt;/h3&gt;&lt;p&gt;We’ve previously looked at how to monitor Cassandra with &lt;a href=&quot;https://www.robustperception.io/monitoring-cassandra-with-prometheus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prometheus&lt;/a&gt;. Let’s see the process for getting metrics from another popular Java application, &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kafka.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/kafka-overview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
      <category term="Prometheus" scheme="http://weblog.chengyangyang.com/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="http://weblog.chengyangyang.com/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Kafka-node模块实现调用js发送数据</title>
    <link href="http://weblog.chengyangyang.com/2017/08/01/Bigdata-hadoop/Kafka/Kafka-node%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8js%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>http://weblog.chengyangyang.com/2017/08/01/Bigdata-hadoop/Kafka/Kafka-node模块实现调用js发送数据/</id>
    <published>2017-08-01T06:46:00.000Z</published>
    <updated>2019-01-17T08:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.chengyangyang.com/streams-interactive-queries-02.png" alt=""></p><p>mongodb写到kafka 指定topic消费。为了保证数据稳定可靠性。<br>配合大数据在countly 使用开源<code>Kafka-node</code>是一个Node.js客户端 写js程序让countly三台集群分别数据到kafka 做新的topic主题备份。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install kafka-node</div></pre></td></tr></table></figure><p>进入kafka-node目录: vim kafka_test.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">var kafka = require(<span class="string">'kafka-node'</span>),</div><div class="line">HighLevelProducer = kafka.HighLevelProducer,</div><div class="line">    //Producer = kafka.Producer,</div><div class="line">    client = new kafka.Client(<span class="string">'169.44.62.139:2281,169.44.59.138:2281,169.44.62.137:2281'</span>),</div><div class="line">    //producer = new Producer(client);</div><div class="line">producer = new HighLevelProducer(client);</div><div class="line"></div><div class="line">console.log(<span class="string">'连接kafka中'</span>);</div><div class="line"></div><div class="line">var argv = &#123;</div><div class="line">    topic: <span class="string">"test1"</span></div><div class="line">&#125;;</div><div class="line">var topic = argv.topic || <span class="string">'test1'</span>;</div><div class="line">var p = argv.p || 0;</div><div class="line">var a = argv.a || 0;</div><div class="line">var producer = new HighLevelProducer(client, &#123;</div><div class="line">    requireAcks: 1,</div><div class="line">    partitionerType: 3</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(producer);</div><div class="line"></div><div class="line">producer.on(<span class="string">'ready'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    var args = &#123;</div><div class="line">        appid: <span class="string">'222-wx238c28839a133d0e'</span>,</div><div class="line">        createTime: <span class="string">'222-ddd'</span>,</div><div class="line">        toUserName: <span class="string">'222-wx238c28839a133d0e'</span>,</div><div class="line">        fromUserName: <span class="string">'222-wx238c28839a133d0e'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    producer.send([&#123;</div><div class="line">        topic: topic,</div><div class="line">        partition: p,</div><div class="line">        messages: [JSON.stringify(args)],</div><div class="line">        attributes: a</div><div class="line">    &#125;], <span class="keyword">function</span>(err, result) &#123;</div><div class="line">        console.log(err || result);</div><div class="line">        process.exit();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    console.log(args);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="官网地址：https-www-npmjs-com-package-kafka-node-install-kafka"><a href="#官网地址：https-www-npmjs-com-package-kafka-node-install-kafka" class="headerlink" title="官网地址：https://www.npmjs.com/package/kafka-node#install-kafka"></a>官网地址：<a href="https://www.npmjs.com/package/kafka-node#install-kafka" target="_blank" rel="external">https://www.npmjs.com/package/kafka-node#install-kafka</a></h4><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/streams-interactive-queries-02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;mongodb写到kafka 指定topic消费。为了保证数据稳定可靠性。&lt;br&gt;配合大数据在countly 使用开源&lt;code&gt;Kafka-node&lt;/code&gt;是一个Node.js客户端 写js程序让countly三台集群分别数据到kafka 做新的topic主题备份。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://weblog.chengyangyang.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 3.0 监控推送rabbitmq队列-消息堆积</title>
    <link href="http://weblog.chengyangyang.com/2017/07/29/Bigdata-hadoop/RabbitMQ/Zabbix%203.0%20%E7%9B%91%E6%8E%A7%E6%8E%A8%E9%80%81rabbitmq%E9%98%9F%E5%88%97/"/>
    <id>http://weblog.chengyangyang.com/2017/07/29/Bigdata-hadoop/RabbitMQ/Zabbix 3.0 监控推送rabbitmq队列/</id>
    <published>2017-07-29T06:46:00.000Z</published>
    <updated>2019-01-17T08:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Zabbix-3-0-监控推送rabbitmq队列"><a href="#Zabbix-3-0-监控推送rabbitmq队列" class="headerlink" title="Zabbix 3.0 监控推送rabbitmq队列"></a>Zabbix 3.0 监控推送rabbitmq队列</h4><p>对于RabbitMQ的监控，除了服务器基本信息<code>（硬盘、CPU、内存、IO等）</code>以及MQ的进程和端口，我们也可以通过请求url访问管理API监控其集群和队列的情况。在java api 3.6.0以后，channel接口为我们提供了如下接口：</p><ul><li>messageCount：查询队列未消费的消息数，可以监控消息堆积的情况。 </li><li>consumerCount：队列的消费者个数，可以对消费者进行监控 </li></ul><p>1.监控告警需求问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">message.bi队列  积压&gt; 300 或者 消费者数&lt;=2</div><div class="line">message.push.cart队列  积压 &gt;10000 或者消费者数&lt;5</div><div class="line">message.user.related队列 积压&gt;2000 或者 消费者数&lt;=2</div><div class="line">message.cart队列 积压&gt;10000 或者 消费者数&lt;=2</div></pre></td></tr></table></figure><p>2.编写Python脚本监控获取消费者数监控，队列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">vim rabbitmq-monitor.py</div><div class="line"><span class="comment">#!/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line">import sys, urllib2, base64, json, re,time</div><div class="line">ip = <span class="string">"169.23.73.22"</span></div><div class="line">keys = (<span class="string">'messages_ready'</span>,)</div><div class="line">def GetRabbitmqData():</div><div class="line">        request = urllib2.Request(<span class="string">"http://%s:15672/api/queues"</span> % ip)</div><div class="line">        base64string = base64.b64encode(<span class="string">'guest:guest'</span>)</div><div class="line">        request.add_header(<span class="string">"Authorization"</span>, <span class="string">"Basic %s"</span> % base64string)</div><div class="line">        result = urllib2.urlopen(request)</div><div class="line">        data = json.loads(result.read())</div><div class="line">        <span class="built_in">return</span> data</div><div class="line"></div><div class="line"></div><div class="line">data=GetRabbitmqData()</div><div class="line"><span class="comment">#print data</span></div><div class="line"><span class="keyword">for</span> queue <span class="keyword">in</span> data:</div><div class="line">    try:</div><div class="line">        <span class="built_in">print</span> <span class="string">"消费者数量:"</span>,queue[<span class="string">'consumers'</span>],<span class="string">"队列:"</span>,queue[<span class="string">'name'</span>],<span class="string">"消息积压数:"</span>,int(queue[keys[0]])</div><div class="line">    except:</div><div class="line">        pass</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@message-center-mq zabbix]<span class="comment"># python rabbitmq-monitor.py</span></div><div class="line">消费者数量: 0 队列: 79d02dde-2007-4a49-b94b-0d4bee67b19c 消息积压数: 0</div><div class="line">消费者数量: 0 队列: aliveness-test 消息积压数: 0</div><div class="line">消费者数量: 0 队列: cartService.orderCancel.update 消息积压数: 0</div><div class="line">消费者数量: 0 队列: cartService.virtualOrderCancel.update 消息积压数: 0</div><div class="line">消费者数量: 0 队列: e9de65bd-be59-4c1c-b4a8-7312f382ac59 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.bi 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.cart 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.console 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.logistics 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.order.info 消息积压数: 0</div><div class="line">消费者数量: 30 队列: message.push.cart 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.style 消息积压数: 0</div><div class="line">消费者数量: 3 队列: message.user.related 消息积压数: 0</div><div class="line">消费者数量: 0 队列: payment.virtual.notify.success 消息积压数: 0</div><div class="line">消费者数量: 1 队列: 61b73745-4c74-475b-803e-bf2d48d2fa50 消息积压数: 0</div><div class="line">消费者数量: 1 队列: a984d00a-8bbe-43c1-aa20-c1dc788ddd97 消息积压数: 0</div><div class="line">消费者数量: 1 队列: e569e8a1-b7c9-4736-8bf8-13d76ecf7577 消息积压数: 0</div><div class="line">消费者数量: 3 队列: push.station.task.status 消息积压数: 0</div></pre></td></tr></table></figure><p>编写zabbix-agentd 监控：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@message-center-mq zabbix]<span class="comment"># vim zabbix_agentd.conf</span></div><div class="line">UserParameter=rabbitmq.consumer.bi,python /etc/zabbix/rabbitmq-monitor.py | grep message.bi |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=rabbitmq.overstock.bi,python /etc/zabbix/rabbitmq-monitor.py | grep message.bi |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $NF&#125;'</span></div><div class="line">UserParameter=rabbitmq.consumer.push.cart,python /etc/zabbix/rabbitmq-monitor.py | grep message.push.cart |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=rabbitmq.overstock.push.cart,python /etc/zabbix/rabbitmq-monitor.py | grep message.push.cart |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $NF&#125;'</span></div><div class="line">UserParameter=rabbitmq.consumer.user.related,python /etc/zabbix/rabbitmq-monitor.py | grep message.user.related |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=rabbitmq.overstock.user.related,python /etc/zabbix/rabbitmq-monitor.py | grep message.user.related |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $NF&#125;'</span></div><div class="line">UserParameter=rabbitmq.consumer.cart,python /etc/zabbix/rabbitmq-monitor.py | grep message.cart |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=rabbitmq.overstock.cart,python /etc/zabbix/rabbitmq-monitor.py | grep message.cart |awk -F<span class="string">'[ :]'</span> <span class="string">'&#123;print $NF&#125;'</span></div></pre></td></tr></table></figure><p>监控模板下载：在我github上面.</p><p>weixin监控效果图：</p><p><img src="http://image.chengyangyang.com/rabbitmq.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Zabbix-3-0-监控推送rabbitmq队列&quot;&gt;&lt;a href=&quot;#Zabbix-3-0-监控推送rabbitmq队列&quot; class=&quot;headerlink&quot; title=&quot;Zabbix 3.0 监控推送rabbitmq队列&quot;&gt;&lt;/a&gt;Zabbix 3.0 
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/tags/Bigdata-Hadoop/"/>
    
      <category term="Rabbitmq" scheme="http://weblog.chengyangyang.com/tags/Rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Cloudera Manager5及CDH5安装指导</title>
    <link href="http://weblog.chengyangyang.com/2017/07/29/Bigdata-hadoop/countly/Cloudera%20Manager5%E5%8F%8ACDH5%E5%AE%89%E8%A3%85%E6%8C%87%E5%AF%BC/"/>
    <id>http://weblog.chengyangyang.com/2017/07/29/Bigdata-hadoop/countly/Cloudera Manager5及CDH5安装指导/</id>
    <published>2017-07-29T06:46:00.000Z</published>
    <updated>2019-01-17T08:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.chengyangyang.com/Bigdata-Cloudera-Manager.png" alt=""></p><h3 id="问题导读："><a href="#问题导读：" class="headerlink" title="问题导读："></a>问题导读：</h3><p>1.什么是cloudera CM 、CDH?<br>2.CDH、CM有哪些版本？<br>3.CDH、CM有哪些安装方式？<br>4.CDH如何开发？</p><a id="more"></a><h3 id="什么是CDH"><a href="#什么是CDH" class="headerlink" title="什么是CDH"></a>什么是CDH</h3><p>hadoop是一个开源项目，所以很多公司在这个基础进行商业化，Cloudera对hadoop做了相应的改变。<br>Cloudera公司的发行版，我们将该版本称为CDH。</p><p>很多新手问的最多的问题是，哪个是收费的，那个是免费的。<br>Cloudera Express版本是免费的<br>Cloudera Enterprise是需要购买注册码的</p><p>更多内容：<br>Cloudera Hadoop什么是CDH及CDH版本介绍 :<a href="http://www.aboutyun.com/thread-6788-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-6788-1-1.html</a> </p><p>CDH（Cloudera）与hadoop（apache）对比 : <a href="http://www.aboutyun.com/thread-9225-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-9225-1-1.html</a></p><p>大数据架构师基础：hadoop家族，Cloudera产品系列等各种技术 : <a href="http://www.aboutyun.com/thread-6842-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-6842-1-1.html</a> </p><h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p><img src="http://image.chengyangyang.com/bidata-cloudera1.png" alt=""></p><p><strong>主页：</strong><br><a href="https://www.cloudera.com/downloads/manager/5-12-0.html" target="_blank" rel="external">https://www.cloudera.com/downloads/manager/5-12-0.html</a></p><h3 id="CM-Cloudera-Manager-有三种安装方式："><a href="#CM-Cloudera-Manager-有三种安装方式：" class="headerlink" title="CM(Cloudera Manager)有三种安装方式："></a>CM(Cloudera Manager)有三种安装方式：</h3><p><strong>1.第一种使用cloudera-manager-installer.bin安装</strong></p><p>这种安装方式，只要从官网下载<code>cloudera-manager-installer.bin</code> 然后执行这个<code>bin</code>文件，剩下的就是等待下载和安装。但是这个时间不是一般的长，最好吃个饭，睡个觉，最后看到还在安装过程中。此帖安装步骤及遇到问题记录很详细，可参考<br><a href="http://www.aboutyun.com/thread-9303-1-1.html" target="_blank" rel="external">Cloudera Manager5及CDH5在线（cloudera-manager-installer.bin）安装详细文档</a><br><a href="http://www.aboutyun.com/thread-9075-1-1.html" target="_blank" rel="external">Cloudera Manager5及CDH5安装指导（终极在线安装）</a></p><h3 id="问题导读：-1"><a href="#问题导读：-1" class="headerlink" title="问题导读："></a>问题导读：</h3><p>1.Cloudera Manager5安装需要哪些环境要求？<br>2.哪些Linux系统上，可以安装Cloudera Manager5？<br>3.在安装cdh的过程中，该如何选择版本？</p><p><strong>安装环境要求</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">集群中的四台主机必须满足以下要求：</div><div class="line">主机必须至少有16 GB的RAM</div><div class="line">对于RAM，我们或许没有太多的概念，下面可以参考</div><div class="line">RAM容量是运行中的程序所占用的空间，他运行需要的空间、</div><div class="line">ROM容量是你的系统可以存放，占用的空间，你的所有系统文件，程序都在这里存放。</div><div class="line"></div><div class="line">必须使用root用户，或则使用sudo无密码访问</div><div class="line">（也就是说当你使用其它用户，使用sudo的时候，不能输入密码）</div><div class="line"></div><div class="line">如果使用root用户，必须使用相同的密码</div><div class="line">主机必须能上网，允许安装向导访问cdm.jollychic.com</div><div class="line">可以从下面选择一个系统</div><div class="line"></div><div class="line">RHEL-兼容系统</div><div class="line">Red Hat Enterprise Linux and CentOS 5, 64-bit</div><div class="line">Red Hat Enterprise Linux and CentOS 6, 64-bit</div><div class="line">Red Hat Enterprise Linux and CentOS 7 <span class="keyword">in</span> SE Linux Mode</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">SLES - SUSE Linux Enterprise Server 11, 64-bit. Service Pack 2或则更高版本. 更新存储库必须是激活的和 SUSE Linux Enterprise 软件开发包11 SP1 .</div><div class="line">Debian - Debian 7.0 and 7.1, 64-bit</div><div class="line">Ubuntu - Ubuntu 12.04, 64-bit</div><div class="line"></div><div class="line">如果要求不能上面满足，安装会不成功。关于Cloudera Manager安装选项和安装要求的详细信息可以查看Cloudera Manager安装向导（英文版）</div><div class="line">补充和强调一些内容</div><div class="line">1.关闭防火墙</div><div class="line">2.配置host，如下形式</div><div class="line">3.swapoff <span class="_">-a</span> 关闭swap分区</div><div class="line">添加开机启动生效：</div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</div></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">系统： CentOS Linux release 7.3.1611 (Core)  </div><div class="line">2台Namenode</div><div class="line">10台DataNode</div><div class="line">1台cdm 安装Cloudera Manager</div><div class="line">1台gateway</div></pre></td></tr></table></figure><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><ul><li>准备工作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">配置hosts</div><div class="line"></div><div class="line">14台服务器需要配置hostname及hosts如下</div><div class="line">（这里一定要配置正确否则，会面会出通信问题）</div><div class="line"></div><div class="line">vim /etc/hosts</div><div class="line">127.0.0.1 localhost.localdomain localhost</div><div class="line">10.155.90.132  cdm  cdm.jollychic.com</div><div class="line">10.155.90.134  gateway gateway.jollychic.com</div><div class="line">10.155.90.165  namenode1  namenode1.jollychic.com</div><div class="line">10.155.90.146  namenode2  namenode2.jollychic.com</div><div class="line">10.155.90.177  datanode1  datanode1.jollychic.com</div><div class="line">10.155.90.184  datanode2  datanode2.jollychic.com</div><div class="line">10.155.90.166  datanode3  datanode3.jollychic.com</div><div class="line">10.155.90.188  datanode4  datanode4.jollychic.com</div><div class="line">10.155.90.156  datanode5  datanode5.jollychic.com</div><div class="line">10.155.90.172  datanode6  datanode6.jollychic.com</div><div class="line">10.155.90.182  datanode7  datanode7.jollychic.com</div><div class="line">10.155.90.142  datanode8  datanode8.jollychic.com</div><div class="line">10.155.90.151  datanode9  datanode9.jollychic.com</div><div class="line">10.155.90.159  datanode10  datanode10.jollychic.com</div><div class="line"></div><div class="line">关闭SELinux</div><div class="line">[root@cdm ~]<span class="comment"># setenforce 0</span></div><div class="line">[root@cdm ~]<span class="comment"># getenforce</span></div><div class="line">Disabled</div></pre></td></tr></table></figure><ul><li>下载安装：</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">单击下载 Cloudera Express 或则 Download Cloudera Enterprise. 查看 Cloudera Express <span class="keyword">and </span>Cloudera Enterprise Features.</div><div class="line">选择注册和单击<span class="keyword">Submit </span>或则直接单击下载页链接（ download page），下载 cloudera-manager-installer.<span class="keyword">bin文件</span></div><div class="line"></div><div class="line"><span class="symbol">Pre</span>-requisites: <span class="keyword">multiple, </span>Internet-connected Linux machines, with SSH access, <span class="keyword">and </span>significant free <span class="meta">space</span> in /var <span class="keyword">and </span>/<span class="meta">opt</span>.</div><div class="line"></div><div class="line"><span class="number">1</span>. 下载cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">$ wget http://archive.cloudera.com/cm5/installer/latest/cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line"></div><div class="line"><span class="number">2</span>.改变 cloudera-manager-installer.<span class="keyword">bin </span>的执行权限</div><div class="line"></div><div class="line">$ chmod u+x cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">复制代码</div><div class="line"></div><div class="line"><span class="number">3</span>.执行 cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line"></div><div class="line">$ sudo ./cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">复制代码</div><div class="line"></div><div class="line"><span class="number">4</span>.按照cloudera-manager的README 来安装</div><div class="line"><span class="number">5</span>.阅读Cloudera Manager Express License，然后按照提示选择YES来确定接受授权（license）</div><div class="line"><span class="number">6</span>.读取 Oracle 二进制 <span class="meta">Code</span> 授权许可协议，然后安装 </div><div class="line"><span class="number">7</span>.当安装完成，Cloudera Manager 管理控制台会提供一个完成的url包括默认端口<span class="number">7180</span></div><div class="line"></div><div class="line">我这种方法是在线安装方式，就说直接用.<span class="keyword">bin让系统自动下载需要的jdk和cm管理包。 </span></div><div class="line">如果网络差建议用离线安装方式。</div></pre></td></tr></table></figure><p>先在本地搭建一个<a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_yumrepo_local_create.html" target="_blank" rel="external">Creating a Local Yum Repository:</a><br>下载独立的包路径：<a href="http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5/RPMS/x86_64/" target="_blank" rel="external">cm need package</a></p><p>安装完成以后服务也启动。</p><p><img src="http://image.chengyangyang.com/bidata-cloudera2.png" alt=""></p><p>这里显示安装成功，访问地址，如果离线安装不到这一步不能操作，会提示报错指示。先手动下载好包rpm安装上即可。</p><h4 id="安装目录详情："><a href="#安装目录详情：" class="headerlink" title="安装目录详情："></a>安装目录详情：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">默认安装目录：/opt/cloudera</div><div class="line">日志目录：/var/<span class="built_in">log</span>/cloudera-scm-server</div><div class="line">启动服务：[root@yancy cloudera-scm-server]<span class="comment"># /etc/init.d/cloudera-scm-server status</span></div><div class="line">cloudera-scm-server (pid  2723) 正在运行...</div></pre></td></tr></table></figure><h4 id="查看启动进程端口："><a href="#查看启动进程端口：" class="headerlink" title="查看启动进程端口："></a>查看启动进程端口：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cdm opt]<span class="comment"># netstat -ntulp | grep java</span></div><div class="line">tcp        0      0 0.0.0.0:7180            0.0.0.0:*               LISTEN      25780/java</div><div class="line">tcp        0      0 0.0.0.0:7182            0.0.0.0:*               LISTEN      25780/java   </div><div class="line"></div><div class="line">访问地址：http://cdm.jollychic.com:7180 </div><div class="line">登录Cloudera Manager Admin 控制</div><div class="line">Username: admin </div><div class="line">Password: admin.</div></pre></td></tr></table></figure><h3 id="使用Cloudera-Manager-向导安装和配置软件"><a href="#使用Cloudera-Manager-向导安装和配置软件" class="headerlink" title="使用Cloudera Manager 向导安装和配置软件"></a>使用Cloudera Manager 向导安装和配置软件</h3><h4 id="cloudera首页："><a href="#cloudera首页：" class="headerlink" title="cloudera首页："></a>cloudera首页：</h4><p><img src="http://image.chengyangyang.com/bidata-cloudera3.png" alt=""></p><h5 id="1-添加服务器集群："><a href="#1-添加服务器集群：" class="headerlink" title="1. 添加服务器集群："></a>1. 添加服务器集群：</h5><p>在集群主机上安装和配置Cloudera Manager ，CDH，和管理服务软件包括以下三个主要步骤<br>选择 Cloudera Manager 版本 和指定主机</p><p><img src="http://image.chengyangyang.com/bidata-cloudera5.png" alt=""></p><h5 id="2-选择免费版，add继续"><a href="#2-选择免费版，add继续" class="headerlink" title="2. 选择免费版，add继续"></a>2. 选择免费版，add继续</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera6.png" alt=""></p><h5 id="3-显示的是安装Cloudera-Manager后面可以安装的服务的软件包"><a href="#3-显示的是安装Cloudera-Manager后面可以安装的服务的软件包" class="headerlink" title="3. 显示的是安装Cloudera Manager后面可以安装的服务的软件包"></a>3. 显示的是安装Cloudera Manager后面可以安装的服务的软件包</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera7.png" alt=""></p><h5 id="4-这里需要说明的是指定主机安装有多种方式："><a href="#4-这里需要说明的是指定主机安装有多种方式：" class="headerlink" title="4. 这里需要说明的是指定主机安装有多种方式："></a>4. 这里需要说明的是指定主机安装有多种方式：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>直接列出ip或则host，多台以逗号、分号、制表符、空格或放置在单独的行。</div><div class="line"><span class="number">2.</span>指定ip的地址范围例如：<span class="number">10.1</span><span class="number">.1</span>.[<span class="number">1</span><span class="number">-4</span>] 或则 host[<span class="number">1</span><span class="number">-3</span>].hadoop.com<span class="number">.3</span>.记得指定的主机需要关闭防火墙，（如果遇到不能安装，最好使用安装cloudera manager虚拟机进行复制）</div><div class="line">选择需要安装的Hadoop datanode服务器：这里我们线上访问端口不是<span class="number">22</span>是<span class="number">58958</span></div></pre></td></tr></table></figure><p>显示如下图说明机器通信没问题。</p><p><img src="http://image.chengyangyang.com/bidata-cloudera8.png" alt=""></p><h5 id="5-安装CDH"><a href="#5-安装CDH" class="headerlink" title="5. 安装CDH"></a>5. 安装CDH</h5><p>选择安装方式<br>当我们选择安装的host之后，我们需要选择CDH的安装方式（方法），如下图所示</p><p><img src="http://image.chengyangyang.com/bidata-cloudera9.png" alt=""><br><img src="http://image.chengyangyang.com/bidata-cloudera10.png" alt=""></p><h5 id="6-这里点击安装Java工具包"><a href="#6-这里点击安装Java工具包" class="headerlink" title="6. 这里点击安装Java工具包"></a>6. 这里点击安装Java工具包</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera11.png" alt=""></p><h5 id="7-这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。"><a href="#7-这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。" class="headerlink" title="7. 这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。"></a>7. 这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera12.png" alt=""><br><img src="http://image.chengyangyang.com/bidata-cloudera13.png" alt=""></p><h5 id="8-安装这里如果提示出现报错：查看好文-Cloudera-Manager5-在线bin安装遇到-无法检测到-Agent-发出的检测信号-总结"><a href="#8-安装这里如果提示出现报错：查看好文-Cloudera-Manager5-在线bin安装遇到-无法检测到-Agent-发出的检测信号-总结" class="headerlink" title="8.安装这里如果提示出现报错：查看好文 Cloudera Manager5 在线bin安装遇到 无法检测到 Agent 发出的检测信号 总结"></a>8.安装这里如果提示出现报错：查看好文 <a href="http://www.aboutyun.com/thread-9293-1-1.html" target="_blank" rel="external">Cloudera Manager5 在线bin安装遇到 无法检测到 Agent 发出的检测信号 总结</a></h5><p><img src="http://image.chengyangyang.com/bidata-cloudera14.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">这里只需要卸载：</div><div class="line">yum remove cloudera-manager-agent </div><div class="line"></div><div class="line">如果想重新安装可以卸载所有：</div><div class="line">yum remove cloudera-manager-repository cloudera-manager-agent cloudera-manager-daemons cloudera-manager-server-db cloudera-manager-server -y</div></pre></td></tr></table></figure></p><p><img src="http://image.chengyangyang.com/bidata-cloudera15.png" alt=""></p><h5 id="9-集群安装"><a href="#9-集群安装" class="headerlink" title="9.集群安装"></a>9.集群安装</h5><p><strong>图1</strong></p><p><img src="http://image.chengyangyang.com/bidata-cloudera16.png" alt=""><br><img src="http://image.chengyangyang.com/bidata-cloudera17.png" alt=""><br><strong>这是一个很漫长的过程，不幸的是在下载完毕，执行分发的时候，这个过程被打断，安装被终止。导致回不到图2，这个该如何解决？</strong><br><img src="http://image.chengyangyang.com/bidata-cloudera18.png" alt=""></p><p>难道真的要重装吗？花费了大半天功夫，又不得不重来。<br>这里面的问题是找不到cloudera manager5所管理的节点了？</p><p>记得about云有这篇文章<a href="http://www.aboutyun.com/thread-8992-1-1.html" target="_blank" rel="external">卸载 Cloudera Manager 5.1.x.和 相关软件</a>【官网翻译：高可用】<br>但是这篇文章是卸载Cloudera Manager以及CDH的，由于cloudera-scm-server和cloudera-scm-agent查看都是运行正常的，如何查看状态，可以参考：</p><p><a href="http://www.aboutyun.com/thread-9096-1-1.html" target="_blank" rel="external">Cloudera Manager Server5及Cloudera Manager Agents5命令整理（about云）</a>，所以cloudera manager不需要卸载，卸载的是CDH的相关内容。<br>于是执行下面命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">update</span> remove avro-tools crunch flume-ng hadoop-hdfs-fuse hadoop-hdfs-nfs3 hadoop-httpfs hbase-solr hive-hbase hive-webhcat hue-beeswax hue-hbase hue-impala hue-pig hue-plugins hue-rdbms hue-<span class="keyword">search</span> hue-spark hue-sqoop hue-zookeeper impala impala-<span class="keyword">shell</span> kite llama mahout oozie pig pig-udf-datafu <span class="keyword">search</span> sentry solr-mapreduce spark-python sqoop sqoop2 whirr</div><div class="line">复制代码</div><div class="line">sudo apt-get clean</div><div class="line">复制代码</div><div class="line">sudo <span class="keyword">rm</span> -Rf /<span class="keyword">var</span>/lib/flume-ng /<span class="keyword">var</span>/lib/hadoop* /<span class="keyword">var</span>/lib/hue /<span class="keyword">var</span>/lib/navigator /<span class="keyword">var</span>/lib/oozie /<span class="keyword">var</span>/lib/solr /<span class="keyword">var</span>/lib/sqoop* /<span class="keyword">var</span>/lib/zookeeper</div><div class="line">复制代码</div><div class="line">sudo <span class="keyword">rm</span> -Rf /dfs /mapred /yarn</div><div class="line">复制代码</div><div class="line">通过上面终于找到所管理的三个节点。然后从新登录，选择三个主机，然后继续继续，最后终于进入了这个界面。但是细心的同学会发现这里已经更换为中文版本。因为这是通过宿主主机访问的。而前面是在虚拟机里使用firefox访问的。</div></pre></td></tr></table></figure><h4 id="成功到这一步：集群安装"><a href="#成功到这一步：集群安装" class="headerlink" title="成功到这一步：集群安装"></a>成功到这一步：集群安装</h4><p><img src="http://image.chengyangyang.com/bidata-cloudera19.png" alt=""><br><img src="http://image.chengyangyang.com/bidata-cloudera20.png" alt=""></p><h5 id="10-选择集群设置"><a href="#10-选择集群设置" class="headerlink" title="10.选择集群设置"></a>10.选择集群设置</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera21.png" alt=""></p><h5 id="10-1-集群设置：自定义角色分配"><a href="#10-1-集群设置：自定义角色分配" class="headerlink" title="10.1 集群设置：自定义角色分配"></a>10.1 集群设置：自定义角色分配</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera22.png" alt=""><br>设置好角色分配查看主机：</p><p><img src="http://image.chengyangyang.com/bidata-cloudera23.png" alt=""></p><h5 id="11-数据库设置"><a href="#11-数据库设置" class="headerlink" title="11. 数据库设置"></a>11. 数据库设置</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera24.png" alt=""></p><p>✨✨ <strong>这里使用默认设置，填写MySQL服务器IP，给予MySQL 用户名和密码all权限，不然会提示权限不足。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Create the Oozie Database and Oozie MySQL User</div><div class="line">For example, using the MySQL mysql <span class="built_in">command</span>-line tool:</div><div class="line"></div><div class="line">$ mysql -u root -p</div><div class="line">Enter password:</div><div class="line"></div><div class="line">mysql&gt; create database oozie default character <span class="built_in">set</span> utf8;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;  grant all privileges on oozie.* to <span class="string">'oozie'</span>@<span class="string">'localhost'</span> identified by <span class="string">'oozie'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;  grant all privileges on oozie.* to <span class="string">'oozie'</span>@<span class="string">'%'</span> identified by <span class="string">'oozie'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="built_in">exit</span></div><div class="line">Bye</div></pre></td></tr></table></figure><p>选择然后单击测试连接即可。</p><p><strong>测试 Activity Monitor 的数据库连接</strong><br><strong>JDBC driver cannot be found. Unable to find the JDBC database jar on host : wlj-cdm.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">如果出现需要MySQL驱动,下载对应版本驱动，copy到相应目录/usr/share/java/ 统一去掉版本号.</div><div class="line">参考Installing the MySQL JDBC Driver官网文档：https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_mysql.html</div><div class="line"></div><div class="line"><span class="comment">#### Installing the MySQL JDBC Driver </span></div><div class="line"></div><div class="line"></div><div class="line">Download the MySQL JDBC driver from http://www.mysql.com/downloads/connector/j/5.1.html.</div><div class="line">Extract the JDBC driver JAR file from the downloaded file. For example:</div><div class="line"></div><div class="line"><span class="comment">### $ wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.44.tar.gz</span></div><div class="line"><span class="comment">### $ tar zxvf mysql-connector-java-5.1.31.tar.gz</span></div><div class="line">Copy the JDBC driver, renamed, to the relevant host. For example:</div><div class="line"><span class="comment">### $ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar</span></div><div class="line">If the target directory does not yet exist on this host, you can create it before copying the JAR file. For example:</div><div class="line"></div><div class="line"><span class="comment">### $ sudo mkdir -p /usr/share/java/</span></div><div class="line"><span class="comment">### $ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar</span></div></pre></td></tr></table></figure><h5 id="12-审核更改-这里选择默认路径"><a href="#12-审核更改-这里选择默认路径" class="headerlink" title="12. 审核更改(这里选择默认路径)"></a>12. 审核更改(这里选择默认路径)</h5><p>等待安装：<br><img src="http://image.chengyangyang.com/bidata-cloudera25.png" alt=""></p><h5 id="13-安装成功"><a href="#13-安装成功" class="headerlink" title="13. 安装成功"></a>13. 安装成功</h5><p><img src="http://image.chengyangyang.com/bidata-cloudera25.png" alt=""></p><p><img src="http://image.chengyangyang.com/bidata-cloudera26.png" alt=""></p><p><img src="http://image.chengyangyang.com/bidata-cloudera27.png" alt=""></p><p><img src="http://image.chengyangyang.com/bidata-cloudera28.png" alt=""></p><p><img src="http://image.chengyangyang.com/bidata-cloudera29.png" alt=""></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/Bigdata-Cloudera-Manager.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题导读：&quot;&gt;&lt;a href=&quot;#问题导读：&quot; class=&quot;headerlink&quot; title=&quot;问题导读：&quot;&gt;&lt;/a&gt;问题导读：&lt;/h3&gt;&lt;p&gt;1.什么是cloudera CM 、CDH?&lt;br&gt;2.CDH、CM有哪些版本？&lt;br&gt;3.CDH、CM有哪些安装方式？&lt;br&gt;4.CDH如何开发？&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/tags/Bigdata-Hadoop/"/>
    
      <category term="Countly" scheme="http://weblog.chengyangyang.com/tags/Countly/"/>
    
  </entry>
  
  <entry>
    <title>Kafka动态增加Topic的副本(Replication)</title>
    <link href="http://weblog.chengyangyang.com/2017/07/21/Bigdata-hadoop/Kafka/Kafka%E5%8A%A8%E6%80%81%E5%A2%9E%E5%8A%A0Topic%E7%9A%84%E5%89%AF%E6%9C%AC(Replication)/"/>
    <id>http://weblog.chengyangyang.com/2017/07/21/Bigdata-hadoop/Kafka/Kafka动态增加Topic的副本(Replication)/</id>
    <published>2017-07-21T03:22:00.000Z</published>
    <updated>2018-04-11T06:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka动态增加Topic的副本-Replication"><a href="#Kafka动态增加Topic的副本-Replication" class="headerlink" title="Kafka动态增加Topic的副本(Replication)"></a>Kafka动态增加Topic的副本(Replication)</h2><p>当前我的topic ：countly_event 只有1个副本，如果集群其中一台机器出现问题，就会丢失数据。所以这里以后新建新的topic 最少2个副本，如果资源非常充足可以考虑副本3个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[jollybi@kafka1 kafka_2.10-0.9.0.1]$ ./bin/kafka-topics.sh --zookeeper 172.31.2.6:2182,172.31.2.7:2182,172.31.2.8:2182  -describe -topic countly_event</div><div class="line">Topic:countly_eventPartitionCount:12ReplicationFactor:1Configs:</div><div class="line">Topic: countly_eventPartition: 0Leader: 1Replicas: 1Isr: 1</div><div class="line">Topic: countly_eventPartition: 1Leader: 2Replicas: 2Isr: 2</div><div class="line">Topic: countly_eventPartition: 2Leader: 3Replicas: 3Isr: 3</div><div class="line">Topic: countly_eventPartition: 3Leader: 4Replicas: 4Isr: 4</div><div class="line">Topic: countly_eventPartition: 4Leader: 1Replicas: 1Isr: 1</div><div class="line">Topic: countly_eventPartition: 5Leader: 2Replicas: 2Isr: 2</div><div class="line">Topic: countly_eventPartition: 6Leader: 3Replicas: 3Isr: 3</div><div class="line">Topic: countly_eventPartition: 7Leader: 4Replicas: 4Isr: 4</div><div class="line">Topic: countly_eventPartition: 8Leader: 1Replicas: 1Isr: 1</div><div class="line">Topic: countly_eventPartition: 9Leader: 2Replicas: 2Isr: 2</div><div class="line">Topic: countly_eventPartition: 10Leader: 3Replicas: 3Isr: 3</div><div class="line">Topic: countly_eventPartition: 11Leader: 4Replicas: 4Isr: 4</div></pre></td></tr></table></figure><p>增加现有分区的复制因子很容易。只需在自定义重新分配json文件中指定额外副本，并将其与–execute选项一起使用即可增加指定分区的复制因子。</p><p>例如，以下示例将主题countly_event的分区0的复制因子从1增加到3.在增加复制因子之前，该分区的唯一副本存在于代理1上。作为增加复制因子的一部分，我们将添加更多副本经纪人2和3和4。</p><p>第一步是在json文件中手工制作自定义重新分配计划 - 这个自己定义每个分区设置副本，例如：0分区设置在3和2和4. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"version"</span>:1,</div><div class="line"> <span class="string">"partitions"</span>:</div><div class="line"> [&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[3,2,4]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[3,2,4]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[4,3,1]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[2,1,3]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[3,4,1]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[4,1,2]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[1,2,3]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[2,3,4]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[3,1,2]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[4,2,3]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[1,3,4]&#125;,</div><div class="line"> &#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[2,4,1]&#125;]</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>然后，使用带有–execute选项的json文件启动重新分配过程 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> ./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file increase-replication-factor.json --execute</div><div class="line"></div><div class="line"></div><div class="line">[jollybi@kafka1 kafka_2.10-0.9.0.1]$ ./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file increase-replication-factor.json --execute</div><div class="line">Current partition replica assignment</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2]&#125;]&#125;</div><div class="line"></div><div class="line">Save this to use as the --reassignment-json-file option during rollback</div><div class="line">Successfully started reassignment of partitions &#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[1,2,3,4]&#125;]&#125;</div></pre></td></tr></table></figure><p>–verify选项可与该工具一起使用，以检查分区重新分配的状态。请注意，与–verify选项一起使用相同的increase-replication-factor.json（与–execute选项一起使用）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="string">[jollybi@kafka1</span> <span class="string">kafka_2.10-0.9.0.1]$</span> <span class="string">./bin/kafka-reassign-partitions.sh</span> <span class="bullet">--zookeeper</span> <span class="number">10.155</span><span class="number">.90</span><span class="number">.153</span><span class="string">:2281,10.155.90.155:2281,10.155.90.138:2281</span>  <span class="bullet">--reassignment-json-file</span> <span class="string">increase-replication-factor.json</span> <span class="bullet">--verify</span></div><div class="line"><span class="string">Status</span> <span class="string">of</span> <span class="string">partition</span> <span class="attr">reassignment:</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,0]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,1]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,2]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,3]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,4]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,5]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,6]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,7]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,8]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,9]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,10]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"><span class="string">Reassignment</span> <span class="string">of</span> <span class="string">partition</span> <span class="string">[countly_event,11]</span> <span class="string">is</span> <span class="string">still</span> <span class="string">in</span> <span class="string">progress</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">您还可以使用kafka-topics工具验证复制因子的增加情况</span> </div><div class="line"></div><div class="line"><span class="string">[root@kafka1</span> <span class="string">kafka_2.10-0.9.0.1]#</span> <span class="string">./bin/kafka-topics.sh</span> <span class="bullet">--zookeeper</span> <span class="number">10.155</span><span class="number">.90</span><span class="number">.153</span><span class="string">:2281,10.155.90.155:2281,10.155.90.138:2281</span> <span class="bullet">-describe</span> <span class="bullet">-topic</span> <span class="string">countly_event</span></div><div class="line"><span class="attr">Topic:</span><span class="string">countly_event</span><span class="attr">PartitionCount:12</span><span class="attr">ReplicationFactor:3</span><span class="attr">Configs:</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">0</span><span class="attr">Leader:</span> <span class="number">2</span><span class="attr">Replicas:</span> <span class="number">3</span><span class="string">,2,4</span><span class="attr">Isr:</span> <span class="number">2</span><span class="string">,3,4</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">1</span><span class="attr">Leader:</span> <span class="number">3</span><span class="attr">Replicas:</span> <span class="number">3</span><span class="string">,2,4</span><span class="attr">Isr:</span> <span class="number">3</span><span class="string">,2,4</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">2</span><span class="attr">Leader:</span> <span class="number">4</span><span class="attr">Replicas:</span> <span class="number">4</span><span class="string">,3,1</span><span class="attr">Isr:</span> <span class="number">4</span><span class="string">,1,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">3</span><span class="attr">Leader:</span> <span class="number">1</span><span class="attr">Replicas:</span> <span class="number">2</span><span class="string">,1,3</span><span class="attr">Isr:</span> <span class="number">1</span><span class="string">,2,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">4</span><span class="attr">Leader:</span> <span class="number">3</span><span class="attr">Replicas:</span> <span class="number">3</span><span class="string">,4,1</span><span class="attr">Isr:</span> <span class="number">4</span><span class="string">,1,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">5</span><span class="attr">Leader:</span> <span class="number">4</span><span class="attr">Replicas:</span> <span class="number">4</span><span class="string">,1,2</span><span class="attr">Isr:</span> <span class="number">1</span><span class="string">,4,2</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">6</span><span class="attr">Leader:</span> <span class="number">1</span><span class="attr">Replicas:</span> <span class="number">1</span><span class="string">,2,3</span><span class="attr">Isr:</span> <span class="number">2</span><span class="string">,1,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">7</span><span class="attr">Leader:</span> <span class="number">2</span><span class="attr">Replicas:</span> <span class="number">2</span><span class="string">,3,4</span><span class="attr">Isr:</span> <span class="number">4</span><span class="string">,2,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">8</span><span class="attr">Leader:</span> <span class="number">2</span><span class="attr">Replicas:</span> <span class="number">3</span><span class="string">,1,2</span><span class="attr">Isr:</span> <span class="number">2</span><span class="string">,1,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">9</span><span class="attr">Leader:</span> <span class="number">3</span><span class="attr">Replicas:</span> <span class="number">4</span><span class="string">,2,3</span><span class="attr">Isr:</span> <span class="number">3</span><span class="string">,2,4</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">10</span><span class="attr">Leader:</span> <span class="number">4</span><span class="attr">Replicas:</span> <span class="number">1</span><span class="string">,3,4</span><span class="attr">Isr:</span> <span class="number">4</span><span class="string">,1,3</span></div><div class="line"><span class="attr">Topic:</span> <span class="string">countly_event</span><span class="attr">Partition:</span> <span class="number">11</span><span class="attr">Leader:</span> <span class="number">1</span><span class="attr">Replicas:</span> <span class="number">2</span><span class="string">,4,1</span><span class="attr">Isr:</span> <span class="number">1</span><span class="string">,4,2</span></div></pre></td></tr></table></figure><p>参考地址：<a href="http://kafka.apache.org/documentation/" target="_blank" rel="external">http://kafka.apache.org/documentation/</a></p><p>Communicative learning:<br>🐧 Linux shell_ senior operation and maintenance faction: QQ group 459096184 circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧 BigData-Exchange School:QQ group 521621407 circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka动态增加Topic的副本-Replication&quot;&gt;&lt;a href=&quot;#Kafka动态增加Topic的副本-Replication&quot; class=&quot;headerlink&quot; title=&quot;Kafka动态增加Topic的副本(Replication)&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka性能优化–JVM参数配置优化</title>
    <link href="http://weblog.chengyangyang.com/2017/07/04/Bigdata-hadoop/Kafka/kafka%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%93JVM%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://weblog.chengyangyang.com/2017/07/04/Bigdata-hadoop/Kafka/kafka性能优化–JVM参数配置优化/</id>
    <published>2017-07-04T03:22:00.000Z</published>
    <updated>2017-11-30T13:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.hubspot.net/hubfs/540072/Kafka_Connect_graphic.png" alt="img-w650"></p><h3 id="Kafka集群稳定"><a href="#Kafka集群稳定" class="headerlink" title="Kafka集群稳定"></a>Kafka集群稳定</h3><p>GC调优<br>　　调GC是门手艺活，幸亏Java 7引进了G1 垃圾回收，使得GC调优变的没那么难。G1主要有两个配置选项来调优：MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent，具体参数设置可以参考Google，这里不赘述。</p><p>　　Kafka broker能够有效的利用堆内存和对象回收，所以这些值可以调小点。对于 64Gb内存，Kafka运行堆内存5Gb，MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent 分别设置为 20毫秒和 35。Kafka的启动脚本使用的不是 G1回收，需要在环境变量中加入。<br><a id="more"></a></p><h3 id="Kafka-Broker个数决定因素"><a href="#Kafka-Broker个数决定因素" class="headerlink" title="Kafka Broker个数决定因素"></a>Kafka Broker个数决定因素</h3><p>　　磁盘容量：首先考虑的是所需保存的消息所占用的总磁盘容量和每个broker所能提供的磁盘空间。如果Kafka集群需要保留 10 TB数据，单个broker能存储 2 TB，那么我们需要的最小Kafka集群大小5个broker。此外，如果启用副本参数，则对应的存储空间需至少增加一倍（取决于副本参数）。这意味着对应的Kafka集群至少需要 10 个broker。</p><p>　　请求量：另外一个要考虑的是Kafka集群处理请求的能力。这主要取决于对Kafka client请求的网络处理能力，特别是，有多个consumer或者网路流量不稳定。如果，高峰时刻，单个broker的网络流量达到80%，这时是撑不住两个consumer的，除非有两个broker。再者，如果启用了副本参数，则需要考虑副本这个额外的consumer。也可以扩展多个broker来减少磁盘的吞吐量和系统内存。</p><h3 id="主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。"><a href="#主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。" class="headerlink" title="主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。"></a>主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。</h3><h3 id="1、JVM参数配置优化"><a href="#1、JVM参数配置优化" class="headerlink" title="1、JVM参数配置优化"></a>1、JVM参数配置优化</h3><p>如果使用的CMS GC算法，建议JVM Heap不要太大，在4GB以内就可以。JVM太大，导致Major GC或者Full GC产生的“stop the world”时间过长，导致broker和zk之间的session超时，比如重新选举controller节点和提升follow replica为leader replica。<br>JVM也不能过小，否则会导致频繁地触发gc操作，也影响Kafka的吞吐量。另外，需要避免CMS GC过程中的发生promotion failure和concurrent failure问题。CMSInitiatingOccupancyFraction=70可以预防concurrent failure问题，提前出发Major GC。<br>Kafka JVM参数可以直接修改启动脚本<code>bin/kafka-server-start.sh</code><br>中的变量值。下面是一些基本参数，也可以根据实际的gc状况和调试GC需要增加一些相关的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx8G -Xms8G -Xmn4G -XX:PermSize=64m -XX:MaxPermSize=128m  -XX:SurvivorRatio=6  -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly"</span></div></pre></td></tr></table></figure><p>需要关注gc日志中的YGC时间以及CMS GC里面的CMS-initial-mark和CMS-remark两个阶段的时间，这些GC过程是“stop the world”方式完成的。</p><blockquote><p>jdk1.8 优化的话会提示MaxPermSize=128m,PermSize=64m 字面意思是MaxPermSize不需要我们配置了,jdk1.8 版本功能其实已不需要这个优化参数：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[jollybi@kafka3 kafka_2.10-0.8.2.1]$ /data/tools/kafka_2.10-0.8.2.1/bin/kafka-server-start.sh /data/tools/kafka_2.10-0.8.2.1/config/server.properties &amp;</div><div class="line">[1] 10312</div><div class="line">[jollybi@kafka3 kafka_2.10-0.8.2.1]$ Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=64m; support was removed <span class="keyword">in</span> 8.0</div><div class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed <span class="keyword">in</span> 8.0</div><div class="line"></div><div class="line">优化参数：</div><div class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx4G -Xms4G -Xmn2G  -XX:SurvivorRatio=6  -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly"</span></div><div class="line"><span class="built_in">export</span> JMX_PORT=<span class="string">"9999"</span>  <span class="comment">### Kafka Manager监控监听jmx端口,如果没有可不设置。</span></div></pre></td></tr></table></figure><h3 id="2、打开JMX端口"><a href="#2、打开JMX端口" class="headerlink" title="2、打开JMX端口"></a>2、打开JMX端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主要是为了通过JMX端口监控Kafka Broker信息。可以在bin/kafka-server-start.sh中打开JMX端口变量。</div><div class="line"><span class="built_in">export</span> JMX_PORT=9999</div></pre></td></tr></table></figure><h3 id="3、调整log4j的日志级别"><a href="#3、调整log4j的日志级别" class="headerlink" title="3、调整log4j的日志级别"></a>3、调整log4j的日志级别</h3><p>如果集群中topic和partition数量较大时，因为log4j的日志级别太低，导致进程持续很长的时间在打印日志。日志量巨大，导致很多额外的性能开销。特别是contoller日志级别为trace级别，这点比较坑。<br>Tips 通过JMX端口设置log4j日志级别，不用重启broker节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">设置日志级别：</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController <span class="built_in">set</span>LogLevel=kafka.controller,INFO</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController <span class="built_in">set</span>LogLevel=state.change.logger,INFO</div><div class="line"> </div><div class="line">检查日志级别：</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController getLogLevel=kafka.controller</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController getLogLevel=state.change.logger</div></pre></td></tr></table></figure><h3 id="4、性能优化技巧"><a href="#4、性能优化技巧" class="headerlink" title="4、性能优化技巧"></a>4、性能优化技巧</h3><p>4.1、配置合适的partitons数量。</p><p>这似乎是kafka新手必问得问题。首先，我们必须理解，partiton是kafka的并行单元。从producer和broker的视角看，向不同的partition写入是完全并行的；而对于consumer，并发数完全取决于partition的数量，即，如果consumer数量大于partition数量，则必有consumer闲置。所以，我们可以认为kafka的吞吐与partition时线性关系。partition的数量要根据吞吐来推断，假定p代表生产者写入单个partition的最大吞吐，c代表消费者从单个partition消费的最大吞吐，我们的目标吞吐是t，那么partition的数量应该是t/p和t/c中较大的那一个。实际情况中，p的影响因素有批处理的规模，压缩算法，确认机制和副本数等，然而，多次benchmark的结果表明，单个partition的最大写入吞吐在10MB/sec左右；c的影响因素是逻辑算法，需要在不同场景下实测得出。</p><p>这个结论似乎太书生气和不实用。我们通常建议partition的数量一定要大于等于消费者的数量来实现最大并发。官方曾测试过1万个partition的情况，所以不需要太担心partition过多的问题。下面的知识会有助于读者在生产环境做出最佳的选择：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a、一个partition就是一个存储kafka-log的目录。</div><div class="line">b、一个partition只能寄宿在一个broker上。</div><div class="line">c、单个partition是可以实现消息的顺序写入的。</div><div class="line">d、单个partition只能被单个消费者进程消费，与该消费者所属于的消费组无关。这样做，有助于实现顺序消费。</div><div class="line">e、单个消费者进程可同时消费多个partition，即partition限制了消费端的并发能力。</div><div class="line">f、partition越多则file和memory消耗越大，要在服务器承受服务器设置。</div><div class="line">g、每个partition信息都存在所有的zk节点中。</div><div class="line">h、partition越多则失败选举耗时越长。</div><div class="line">k、offset是对每个partition而言的，partition越多，查询offset就越耗时。</div><div class="line">i、partition的数量是可以动态增加的（只能加不能减）。</div></pre></td></tr></table></figure><p>我们建议的做法是，如果是3个broker的集群，有5个消费者，那么建议partition的数量是15，也就是broker和consumer数量的最小公倍数。当然，也可以是一个大于消费者的broker数量的倍数，比如6或者9，还请读者自行根据实际环境裁定。</p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn2.hubspot.net/hubfs/540072/Kafka_Connect_graphic.png&quot; alt=&quot;img-w650&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Kafka集群稳定&quot;&gt;&lt;a href=&quot;#Kafka集群稳定&quot; class=&quot;headerlink&quot; title=&quot;Kafka集群稳定&quot;&gt;&lt;/a&gt;Kafka集群稳定&lt;/h3&gt;&lt;p&gt;GC调优&lt;br&gt;　　调GC是门手艺活，幸亏Java 7引进了G1 垃圾回收，使得GC调优变的没那么难。G1主要有两个配置选项来调优：MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent，具体参数设置可以参考Google，这里不赘述。&lt;/p&gt;
&lt;p&gt;　　Kafka broker能够有效的利用堆内存和对象回收，所以这些值可以调小点。对于 64Gb内存，Kafka运行堆内存5Gb，MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent 分别设置为 20毫秒和 35。Kafka的启动脚本使用的不是 G1回收，需要在环境变量中加入。&lt;br&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://weblog.chengyangyang.com/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-如何手动更新Kafka中某个Topic的偏移量</title>
    <link href="http://weblog.chengyangyang.com/2017/06/29/Bigdata-hadoop/Kafka/%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0Kafka%E4%B8%AD%E6%9F%90%E4%B8%AATopic%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://weblog.chengyangyang.com/2017/06/29/Bigdata-hadoop/Kafka/如何手动更新Kafka中某个Topic的偏移量/</id>
    <published>2017-06-29T06:46:00.000Z</published>
    <updated>2019-01-17T08:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何手动更新Kafka中某个Topic的偏移量"><a href="#如何手动更新Kafka中某个Topic的偏移量" class="headerlink" title="如何手动更新Kafka中某个Topic的偏移量"></a>如何手动更新Kafka中某个Topic的偏移量</h3><p><img src="http://image.chengyangyang.com/kafka-streams-poc-old-solution.jpg" alt=""></p><p>我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为<code>/consumers/[groupId]/offsets/[topic]/[partitionId]</code>，比如iteblog主题分区10的偏移量获取如下：<br>在有些场景下，这个工具不满足我们的需求，我们需要的是能够手动设置分区的偏移量为任何有意义的值，而不仅仅是earliest或者latest。那咋办？</p><a id="more"></a><p>我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为<code>/consumers/[groupId]/offsets/[topic]/[partitionId]</code>，比如<code>mongotail_lz4</code>主题分区10的偏移量获取如下：　　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[zk: 127.0.0.1:2281(CONNECTED) 2]  get /consumers/ibm_event/offsets/mongotail_lz4/10</div><div class="line">293894</div><div class="line">cZxid = 0x6000011f3</div><div class="line">ctime = Wed Jul 26 17:57:27 CST 2017</div><div class="line">mZxid = 0x6000018c9</div><div class="line">mtime = Wed Jul 26 18:18:27 CST 2017</div><div class="line">pZxid = 0x6000011f3</div><div class="line">cversion = 0</div><div class="line">dataVersion = 20</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 6</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure><p>所以，我们可以通过set命令来设置某个分区的偏移量，如下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[zk: 127.0.0.1:2281(CONNECT get /consumers/ibm_event/offsets/mongotail_lz4/10 0 </div><div class="line">0</div><div class="line">cZxid = 0x6000011f3</div><div class="line">ctime = Wed Jul 26 17:57:27 CST 2017</div><div class="line">mZxid = 0x60000204c</div><div class="line">mtime = Wed Jul 26 18:37:21 CST 2017</div><div class="line">pZxid = 0x6000011f3</div><div class="line">cversion = 0</div><div class="line">dataVersion = 21</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 1</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure><p>12个分区分别更新过去。</p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何手动更新Kafka中某个Topic的偏移量&quot;&gt;&lt;a href=&quot;#如何手动更新Kafka中某个Topic的偏移量&quot; class=&quot;headerlink&quot; title=&quot;如何手动更新Kafka中某个Topic的偏移量&quot;&gt;&lt;/a&gt;如何手动更新Kafka中某个Topic的偏移量&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/kafka-streams-poc-old-solution.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为&lt;code&gt;/consumers/[groupId]/offsets/[topic]/[partitionId]&lt;/code&gt;，比如iteblog主题分区10的偏移量获取如下：&lt;br&gt;在有些场景下，这个工具不满足我们的需求，我们需要的是能够手动设置分区的偏移量为任何有意义的值，而不仅仅是earliest或者latest。那咋办？&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://weblog.chengyangyang.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>OpenLDAP一主多从复制节点服务的配置-phpldapadmin管理认证</title>
    <link href="http://weblog.chengyangyang.com/2017/06/08/OpenLDAP/OpenLDAP%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%85%8D%E7%BD%AE-phpldapadmin%E7%AE%A1%E7%90%86%E8%AE%A4%E8%AF%81/"/>
    <id>http://weblog.chengyangyang.com/2017/06/08/OpenLDAP/OpenLDAP一主多从复制节点服务的配置-phpldapadmin管理认证/</id>
    <published>2017-06-08T03:36:00.000Z</published>
    <updated>2019-01-17T08:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OpenLDAP主从复制节点配置线上版本"><a href="#OpenLDAP主从复制节点配置线上版本" class="headerlink" title="OpenLDAP主从复制节点配置线上版本"></a>OpenLDAP主从复制节点配置线上版本</h4><p>公司服务器上搭建了一个OpenLDAP服务，为了避免出现单点，需要给LDAP做主从要从国外从服务器实时同步。这里我也升级了Openldap 配置一主多从方法。<br>于是上openldap官网上查了一下openldap的复制功能。</p><p><img src="https://devopsideas.com/wp-content/uploads/2017/09/Openldap-7-800x445.jpg" alt=""></p><a id="more"></a><h4 id="OpenLDAP软件2-3管理员指南"><a href="#OpenLDAP软件2-3管理员指南" class="headerlink" title="OpenLDAP软件2.3管理员指南"></a><a href="http://www.openldap.org/doc/admin23/" target="_blank" rel="external">OpenLDAP软件2.3管理员指南</a></h4><p><a href=""></a></p><ul><li>OpenLDAP前期配置准备：</li><li>OpenLDAP同步条件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">一主多从OpenLDAP集群服务器：特意声明下：2.3版本实现不了1主多从，只能实现1主1从。</div><div class="line"></div><div class="line">1.Linux系统最好保持一致：CentOS release 6.7 </div><div class="line">2.LDAP服务器之间需要保持时间同步  /usr/sbin/ntpdate ntp.api.bz</div><div class="line">3.LDAP软件包版本保持一致     openldap-2.4.40</div><div class="line">4.节点之间的域名可以互相解析  </div><div class="line">5.配置LDAP同步复制，需要提供完全一致的配置及目录树信息 （这里我会重点讲如何初始化数据）</div><div class="line">6.数据条目保持一致  （数据和结构目录统一化）</div><div class="line">7.额外的schema文件保持一致</div></pre></td></tr></table></figure><h4 id="openldap支持5种复制方式，分别是"><a href="#openldap支持5种复制方式，分别是" class="headerlink" title="openldap支持5种复制方式，分别是:"></a>openldap支持5种复制方式，分别是:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Syncrepl：slave服务器从master上拉取数据，缺点是拉取的最小粒度是单条记录</div><div class="line">Delta-syncrepl：与上一条相似，但拉取的最小粒度是属性</div><div class="line">N-Way Multi-Master：多主，支持2个及以上的master</div><div class="line">MirrorMode：双主镜像，不支持3个及以上的master，但可以有slave</div><div class="line">Syncrepl Proxy：代理模式</div></pre></td></tr></table></figure><ul><li>同步需要开启syncrepl模式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slave服务器到master服务器以拉的模式同步目录树。当主服务器对某个条目或更多条目</div><div class="line">修改条目属性时，slave服务器会把修改的整个条目进行同步，而不是单独的同步修改的属</div><div class="line">性值。</div></pre></td></tr></table></figure><p>按目前的需求只要配置成MirrorMode即可，编辑<code>/etc/openldap/sldap.conf</code><br>找到<code>“moduleload syncprov.la”</code>，将前面的#号去掉。</p><p>操作系统信息：CentOS_6.x_64   <code>备注：6.0以下系统安装版本会过低，不支持一主多从配置。</code></p><table><thead><tr><th>角色</th><th>主机名</th><th>IP 地址</th></tr></thead><tbody><tr><td>OpenLDAP MAster服务器</td><td>openldap-master</td><td>192.168.17.145</td></tr><tr><td>OpenLDAP slave1服务器</td><td>openldap-slave1</td><td>192.168.3.15</td></tr><tr><td>OpenLDAP slave2服务器</td><td>openldap-slave2</td><td>192.168.3.82</td></tr></tbody></table><p>安装方法我在另外一篇安装配置文档很详细的写出。 这里我快速命令操作 不做太多的命令描述了。</p><h3 id="初始化数据结构"><a href="#初始化数据结构" class="headerlink" title="初始化数据结构"></a>初始化数据结构</h3><p>初始化命令：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cp -a /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span> /<span class="title">var</span>/<span class="title">lib</span>/<span class="title">ldap</span>.<span class="title">backup</span></span></div><div class="line">rm -f /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/*</span></div><div class="line">cp /usr/share/openldap-servers/DB_CONFIG.example /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/<span class="title">DB_CONFIG</span></span></div><div class="line">cp -a /etc/openldap/slapd.d/ <span class="regexp">/etc/openldap</span><span class="regexp">/slapd.dbakup</span></div><div class="line">rm -rf /etc<span class="regexp">/openldap/slapd</span>.d/*</div><div class="line">chown ldap.ldap /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/*</span></div><div class="line">chmod -R <span class="number">600</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/*</span></div><div class="line">chown -R <span class="symbol">ldap:</span>ldap /etc/openldap/slapd.d</div><div class="line">cd /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/ &amp;&amp; <span class="title">slapd</span></span></div><div class="line">slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d</div><div class="line">chown -R <span class="symbol">ldap:</span>ldap /etc/openldap/slapd.d</div><div class="line">chown ldap.ldap /var/<span class="class"><span class="keyword">lib</span>/<span class="title">ldap</span>/*</span></div><div class="line">service slapd restart</div></pre></td></tr></table></figure><h3 id="主服务器-Master-Centos6-6安装OpenLDAP"><a href="#主服务器-Master-Centos6-6安装OpenLDAP" class="headerlink" title="主服务器 Master | Centos6.6安装OpenLDAP"></a>主服务器 Master | Centos6.6安装OpenLDAP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">添加host配置：</div><div class="line"></div><div class="line">1.时间同步：</div><div class="line">因为使用的是xx云主机，默认添加的有时间同步，这里就不在描述。</div><div class="line"></div><div class="line"></div><div class="line">yum快速安装openldap</div><div class="line"></div><div class="line"><span class="comment"># yum install -y vim automake autoconf gcc xz ncurses-devel \ patch python-devel git python-pip gcc-c++  # 安装基本环境，后面依赖</span></div><div class="line"><span class="comment"># yum install -y openldap openldap-servers openldap-clients openldap-devel</span></div><div class="line"></div><div class="line">配置 OpenLDAP 服务器</div><div class="line"></div><div class="line"><span class="comment">#拷贝LDAP配置文件到LDAP目录</span></div><div class="line"></div><div class="line"><span class="comment"># cp /usr/share/openldap-servers/slapd.conf.obsolete /etc/openldap/slapd.conf  ## 该文件是slapd的配置文件</span></div><div class="line"><span class="comment"># cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG    ## 数据库的配置文件</span></div><div class="line"></div><div class="line"><span class="comment"># cd /etc/openldap/</span></div><div class="line"><span class="comment"># cp slapd.conf slapd.conf.bak</span></div></pre></td></tr></table></figure><h4 id="编辑LDAP主配置文件-slapd-conf-文件如下"><a href="#编辑LDAP主配置文件-slapd-conf-文件如下" class="headerlink" title="编辑LDAP主配置文件 slapd.conf 文件如下:"></a>编辑LDAP主配置文件 slapd.conf 文件如下:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">include         /etc/openldap/schema/corba.schema</div><div class="line">include         /etc/openldap/schema/core.schema</div><div class="line">include         /etc/openldap/schema/cosine.schema</div><div class="line">include         /etc/openldap/schema/duaconf.schema</div><div class="line">include         /etc/openldap/schema/dyngroup.schema</div><div class="line">include         /etc/openldap/schema/inetorgperson.schema</div><div class="line">include         /etc/openldap/schema/java.schema</div><div class="line">include         /etc/openldap/schema/misc.schema</div><div class="line">include         /etc/openldap/schema/nis.schema</div><div class="line">include         /etc/openldap/schema/openldap.schema</div><div class="line">include         /etc/openldap/schema/ppolicy.schema</div><div class="line">include         /etc/openldap/schema/collective.schema</div><div class="line"></div><div class="line"><span class="comment"># Allow LDAPv2 client connections.  This is NOT the default.</span></div><div class="line">allow bind_v2</div><div class="line">disallow bind_anon                   <span class="comment">#阻止匿名登陆</span></div><div class="line"><span class="comment"># Do not enable referrals until AFTER you have a working directory</span></div><div class="line"><span class="comment"># service AND an understanding of referrals.</span></div><div class="line"><span class="comment">#referral       ldap://root.openldap.org</span></div><div class="line"></div><div class="line">pidfile         /var/run/openldap/slapd.pid</div><div class="line">argsfile        /var/run/openldap/slapd.args</div><div class="line"></div><div class="line"><span class="comment"># Load dynamic backend modules</span></div><div class="line"><span class="comment"># - modulepath is architecture dependent value (32/64-bit system)</span></div><div class="line"><span class="comment"># - back_sql.la overlay requires openldap-server-sql package</span></div><div class="line"><span class="comment"># - dyngroup.la and dynlist.la cannot be used at the same time</span></div><div class="line"></div><div class="line">modulepath /usr/lib/openldap</div><div class="line">modulepath /usr/lib64/openldap</div><div class="line"></div><div class="line"><span class="comment"># moduleload accesslog.la</span></div><div class="line"><span class="comment"># moduleload auditlog.la</span></div><div class="line"><span class="comment"># moduleload back_sql.la</span></div><div class="line"><span class="comment"># moduleload chain.la</span></div><div class="line"><span class="comment"># moduleload collect.la</span></div><div class="line"><span class="comment"># moduleload constraint.la</span></div><div class="line"><span class="comment"># moduleload dds.la</span></div><div class="line"><span class="comment"># moduleload deref.la</span></div><div class="line"><span class="comment"># moduleload dyngroup.la</span></div><div class="line"><span class="comment"># moduleload dynlist.la</span></div><div class="line"><span class="comment"># moduleload memberof.la</span></div><div class="line"><span class="comment"># moduleload pbind.la</span></div><div class="line"><span class="comment"># moduleload pcache.la</span></div><div class="line"><span class="comment"># moduleload ppolicy.la</span></div><div class="line"><span class="comment"># moduleload refint.la</span></div><div class="line"><span class="comment"># moduleload retcode.la</span></div><div class="line"><span class="comment"># moduleload rwm.la</span></div><div class="line"><span class="comment"># moduleload seqmod.la</span></div><div class="line"><span class="comment"># moduleload seqmod.la</span></div><div class="line"><span class="comment"># moduleload smbk5pwd.la</span></div><div class="line"><span class="comment"># moduleload sssvlv.la</span></div><div class="line">moduleload syncprov.la</div><div class="line"><span class="comment"># moduleload translucent.la</span></div><div class="line"><span class="comment"># moduleload unique.la</span></div><div class="line"><span class="comment"># moduleload valsort.la</span></div><div class="line"></div><div class="line"><span class="comment"># The next three lines allow use of TLS for encrypting connections using a</span></div><div class="line"><span class="comment"># dummy test certificate which you can generate by running</span></div><div class="line"><span class="comment"># /usr/libexec/openldap/generate-server-cert.sh. Your client software may balk</span></div><div class="line"><span class="comment"># at self-signed certificates, however.</span></div><div class="line">TLSCACertificatePath /etc/openldap/certs</div><div class="line">TLSCertificateFile <span class="string">"\"OpenLDAP Server\""</span></div><div class="line">TLSCertificateKeyFile /etc/openldap/certs/password</div><div class="line"></div><div class="line"><span class="comment"># Sample security restrictions</span></div><div class="line"><span class="comment">#       Require integrity protection (prevent hijacking)</span></div><div class="line"><span class="comment">#       Require 112-bit (3DES or better) encryption for updates</span></div><div class="line"><span class="comment">#       Require 63-bit encryption for simple bind</span></div><div class="line"><span class="comment"># security ssf=1 update_ssf=112 simple_bind=64</span></div><div class="line"></div><div class="line"><span class="comment"># Sample access control policy:</span></div><div class="line"><span class="comment">#       Root DSE: allow anyone to read it</span></div><div class="line"><span class="comment">#       Subschema (sub)entry DSE: allow anyone to read it</span></div><div class="line"><span class="comment">#       Other DSEs:</span></div><div class="line"><span class="comment">#               Allow self write access</span></div><div class="line"><span class="comment">#               Allow authenticated users read access</span></div><div class="line"><span class="comment">#               Allow anonymous users to authenticate</span></div><div class="line"><span class="comment">#       Directives needed to implement policy:</span></div><div class="line"><span class="comment"># access to dn.base="" by * read</span></div><div class="line"><span class="comment"># access to dn.base="cn=Subschema" by * read</span></div><div class="line"><span class="comment"># access to *</span></div><div class="line"><span class="comment">#       by self write</span></div><div class="line"><span class="comment">#       by users read</span></div><div class="line"><span class="comment">#       by anonymous auth</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># if no access controls are present, the default policy</span></div><div class="line"><span class="comment"># allows anyone and everyone to read anything but restricts</span></div><div class="line"><span class="comment"># updates to rootdn.  (e.g., "access to * by * read")</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># rootdn can always read and write EVERYTHING!</span></div><div class="line"></div><div class="line">access to dn.subtree=<span class="string">"ou=users,dc=jollychic,dc=com"</span></div><div class="line">       by self write</div><div class="line">       by dn=<span class="string">"cn=Manager,dc=jollychic,dc=com"</span> write</div><div class="line">       by dn=<span class="string">"cn=repl,ou=manager,dc=jollychic,dc=com"</span> write</div><div class="line">       by dn.exact=<span class="string">"cn=zabbix,ou=manager,dc=jollychic,dc=com"</span> <span class="built_in">read</span></div><div class="line">       by users <span class="built_in">read</span></div><div class="line">       by anonymous auth</div><div class="line"></div><div class="line"> access to *</div><div class="line">        by self write</div><div class="line">        by users <span class="built_in">read</span></div><div class="line">        by anonymous auth</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># enable on-the-fly configuration (cn=config)</span></div><div class="line">database config</div><div class="line">access to *</div><div class="line">        by dn.exact=<span class="string">"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"</span> manage</div><div class="line">        by * none</div><div class="line"></div><div class="line"><span class="comment"># enable server status monitoring (cn=monitor)</span></div><div class="line">database monitor</div><div class="line">access to *</div><div class="line">        by dn.exact=<span class="string">"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"</span> <span class="built_in">read</span></div><div class="line">        by dn.exact=<span class="string">"cn=Manager,dc=my-domain,dc=com"</span> <span class="built_in">read</span></div><div class="line">        by * none</div><div class="line"></div><div class="line"><span class="comment">#######################################################################</span></div><div class="line"><span class="comment"># database definitions</span></div><div class="line"><span class="comment">#######################################################################</span></div><div class="line"></div><div class="line">database        bdb</div><div class="line">suffix          <span class="string">"dc=jollychic,dc=com"</span> </div><div class="line">checkpoint      1024 15</div><div class="line">rootdn          <span class="string">"cn=Manager,dc=jollychic,dc=com"</span></div><div class="line"><span class="comment"># Cleartext passwords, especially for the rootdn, should</span></div><div class="line"><span class="comment"># be avoided.  See slappasswd(8) and slapd.conf(5) for details.</span></div><div class="line"><span class="comment"># Use of strong authentication encouraged.</span></div><div class="line"><span class="comment"># rootpw                secret</span></div><div class="line"><span class="comment"># rootpw                &#123;crypt&#125;ijFYNcSNctBYg</span></div><div class="line">rootpw          se12pa  <span class="comment">#管理员密码</span></div><div class="line"><span class="comment"># The database directory MUST exist prior to running slapd AND</span></div><div class="line"><span class="comment"># should only be accessible by the slapd and slap tools.</span></div><div class="line"><span class="comment"># Mode 700 recommended.</span></div><div class="line">directory       /var/lib/ldap <span class="comment">#存储目录</span></div><div class="line"></div><div class="line"><span class="comment"># Indices to maintain for this database</span></div><div class="line">index objectClass                       eq,pres</div><div class="line">index ou,cn,mail,surname,givenname      eq,pres,sub</div><div class="line">index uidNumber,gidNumber,loginShell    eq,pres</div><div class="line">index uid,memberUid                     eq,pres,sub</div><div class="line">index nisMapName,nisMapEntry            eq,pres,sub</div><div class="line">index entryCSN,entryUUID eq</div><div class="line"></div><div class="line"><span class="comment"># syncprov配置</span></div><div class="line"><span class="comment">#配置末尾添加如下3行</span></div><div class="line"><span class="comment"># #######################################################################</span></div><div class="line"><span class="comment">#后端工作在overlay模式</span></div><div class="line">overlay syncprov</div><div class="line"><span class="comment">#当满足需改100个entry或者10分钟的条件时主动以推的方式执行</span></div><div class="line">syncprov-checkpoint 100 10</div><div class="line"><span class="comment">#会话日志条目的最大数量</span></div><div class="line">syncprov-sessionlog 100</div></pre></td></tr></table></figure><h4 id="修改系统日志配置文件"><a href="#修改系统日志配置文件" class="headerlink" title="修改系统日志配置文件"></a>修改系统日志配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/rsyslog.conf</span></div><div class="line"> <span class="built_in">local</span>4.*        /var/<span class="built_in">log</span>/ldap.log</div><div class="line"><span class="comment"># local7.*下添加一行</span></div><div class="line"></div><div class="line">在启动服务。</div><div class="line"><span class="comment"># service rsyslog restart</span></div></pre></td></tr></table></figure><h4 id="测试-slapd-conf-设置-slaptest检测、生成数据库"><a href="#测试-slapd-conf-设置-slaptest检测、生成数据库" class="headerlink" title="测试 slapd.conf 设置 slaptest检测、生成数据库"></a>测试 slapd.conf 设置 slaptest检测、生成数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@openldap-master openldap]<span class="comment"># slaptest -u</span></div><div class="line">config file testing succeeded</div></pre></td></tr></table></figure><h4 id="OpenLDAP-的启动与停止"><a href="#OpenLDAP-的启动与停止" class="headerlink" title="OpenLDAP 的启动与停止"></a>OpenLDAP 的启动与停止</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service slapd stop</span></div><div class="line"><span class="comment"># rm -rf /etc/openldap/slapd.d/*</span></div><div class="line"><span class="comment">#chown ldap.ldap /var/lib/ldap/*</span></div><div class="line"><span class="comment"># slaptest  -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d</span></div><div class="line"><span class="comment"># chown -R ldap:ldap /etc/openldap/slapd.d</span></div><div class="line"><span class="comment"># service slapd restart</span></div></pre></td></tr></table></figure><p>配置管理脚本：可以写成脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#----------------------------------------------------</span></div><div class="line">vim ldap.sh</div><div class="line"><span class="comment">#----------------------------------------------------</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">/etc/init.d/slapd stop</div><div class="line">rm -rf /etc/openldap/slapd.d/*</div><div class="line">slaptest <span class="_">-f</span> /etc/openldap/slapd.conf -F /etc/openldap/slapd.d</div><div class="line">chown -R ldap.ldap /etc/openldap/slapd.d</div><div class="line">/etc/init.d/slapd start</div><div class="line"><span class="comment">#----------------------------------------------------</span></div></pre></td></tr></table></figure><p>设置开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@Ldap-Server ldap]<span class="comment"># chkconfig slapd on</span></div><div class="line">[root@Ldap-Server ldap]<span class="comment"># chkconfig rsyslog on</span></div></pre></td></tr></table></figure><p>默认使用端口为389 通过ssl协议加密后slapd进程使用663端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@Ldap-Server ldap]<span class="comment"># netstat -lntup|grep 389</span></div><div class="line">tcp        0      0 0.0.0.0:389                 0.0.0.0:*                   LISTEN      25358/slapd</div><div class="line">tcp        0      0 :::389                      :::*                        LISTEN      25358/slapd</div></pre></td></tr></table></figure><p>这里创建好以后再参考第一篇创建导入点数据，作为设置同步查看效果。</p><h3 id="使用-phpLDAPadmin"><a href="#使用-phpLDAPadmin" class="headerlink" title="使用 phpLDAPadmin"></a>使用 phpLDAPadmin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装PHP</span></div><div class="line">yum -y install php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc  php 需要PHP模块支持</div><div class="line"></div><div class="line"><span class="comment">#安装Apache</span></div><div class="line">yum install httpd -y</div><div class="line">vi /etc/httpd/conf/httpd.conf</div><div class="line"></div><div class="line">添加：</div><div class="line">....</div><div class="line">ServerName 192.168.17.145:80</div><div class="line">Listen 80</div><div class="line">.....</div><div class="line"></div><div class="line">service httpd start</div></pre></td></tr></table></figure><p>先通过scp上传phpldapadmin-1.2.3.zip到apache网页目录</p><p>下载：<a href="https://sourceforge.net/projects/phpldapadmin/files/phpldapadmin-php5/1.2.3/phpldapadmin-1.2.3.tgz" target="_blank" rel="external">phpldapadmin</a></p><p>或者这里用我下载好的链接wget.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. 下载安装</span></div><div class="line">    <span class="built_in">cd</span> /var/www/html/</div><div class="line">    wget http://oak0aohum.bkt.clouddn.com/phpldapadmin-1.2.3.tgz</div><div class="line">    tar -zxvf phpldapadmin-1.2.3.tgz</div><div class="line">    mv phpldapadmin-1.2.3 phpldapadmin</div><div class="line">    <span class="built_in">cd</span> phpldapadmin/config/</div><div class="line">    cp config.php.example config.php</div><div class="line">    vim config.php</div><div class="line"></div><div class="line"><span class="comment">#2. 修改配置文件：vim /var/www/html/phpldapadmin/config/config.php</span></div><div class="line">/*</div><div class="line"><span class="variable">$servers</span>-&gt;newServer(<span class="string">'ldap_pla'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'LDAP Server'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'host'</span>,<span class="string">'192.168.17.145'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'port'</span>,389);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'base'</span>,array(<span class="string">'dc=jollychic,dc=com'</span>));</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'login'</span>,<span class="string">'auth_type'</span>,<span class="string">'cookie'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'login'</span>,<span class="string">'bind_id'</span>,<span class="string">'cn=Manager,dc=jollychic,dc=com'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'login'</span>,<span class="string">'bind_pass'</span>,<span class="string">'&#123;SSHA&#125;SlPVguw1zrxCkTnGXLM2jZpDZio9Btyt'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'tls'</span>,<span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">#apache-http修改</span></div><div class="line"></div><div class="line">    vim /etc/httpd/conf/httpd.conf</div><div class="line">    &lt;Directory <span class="string">"/var/www/html/phpldapadmin"</span>&gt;</div><div class="line">    DirectoryIndex index.html index.html.var index.php</div><div class="line"><span class="comment">#重启服务。</span></div><div class="line"> service httpd restart</div><div class="line"></div><div class="line"><span class="comment">#防火墙端口开启</span></div><div class="line"> -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment">#重启iptables </span></div><div class="line">service iptables restart</div></pre></td></tr></table></figure><h4 id="登录PHPldapadmin"><a href="#登录PHPldapadmin" class="headerlink" title="登录PHPldapadmin"></a>登录PHPldapadmin</h4><p><img src="http://image.chengyangyang.com/openldapsalve1.png" alt=""><br><img src="http://image.chengyangyang.com/openldapsalve2.png" alt=""></p><h3 id="slave1-Centos6-6安装OpenLDAP"><a href="#slave1-Centos6-6安装OpenLDAP" class="headerlink" title="slave1 | Centos6.6安装OpenLDAP"></a>slave1 | Centos6.6安装OpenLDAP</h3><p><code>OpenLDAP slave1服务器|  openldap-slave1 | 192.168.3.15</code></p><p>前面安装全部一样，只需要在slave配置上面做下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># syncprov配置</span></div><div class="line"><span class="comment"># #######################################################################</span></div><div class="line">overlay syncprov</div><div class="line">syncprov-checkpoint 100 10</div><div class="line">syncprov-sessionlog 100</div><div class="line"></div><div class="line">syncrepl rid=123</div><div class="line">    provider=ldap://192.168.17.145:389</div><div class="line">    <span class="built_in">type</span>=refreshAndPersist</div><div class="line">    searchbase=<span class="string">"dc=jollychic,dc=com"</span></div><div class="line">    interval=00:00:00:10</div><div class="line">    schemachecking=off</div><div class="line">    searchbase=<span class="string">"dc=jollychic,dc=com"</span></div><div class="line">    bindmethod=simple</div><div class="line">    scope=sub</div><div class="line">    binddn=<span class="string">"cn=Manager,dc=jollychic,dc=com"</span></div><div class="line">    retry=<span class="string">"60 +"</span></div><div class="line">    attrs=<span class="string">"*,+"</span></div><div class="line">    credentials=se12pa</div><div class="line">    </div><div class="line">mirrormode on</div></pre></td></tr></table></figure><h3 id="slave2-Centos6-6安装OpenLDAP"><a href="#slave2-Centos6-6安装OpenLDAP" class="headerlink" title="slave2 | Centos6.6安装OpenLDAP"></a>slave2 | Centos6.6安装OpenLDAP</h3><p><code>OpenLDAP slave2服务器|  openldap-slave2 | 192.168.3.82</code></p><p>只需要修改<code>rid=124</code> 可以往后添加ID数字加1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">syncrepl rid=124</div><div class="line">    provider=ldap://192.168.17.145:389</div><div class="line">    <span class="built_in">type</span>=refreshAndPersist</div><div class="line">    searchbase=<span class="string">"dc=jollychic,dc=com"</span></div><div class="line">    interval=00:00:00:00</div><div class="line">    schemachecking=off</div><div class="line">    searchbase=<span class="string">"dc=jollychic,dc=com"</span></div><div class="line">    bindmethod=simple</div><div class="line">    scope=sub</div><div class="line">    binddn=<span class="string">"cn=Manager,dc=jollychic,dc=com"</span></div><div class="line">    retry=<span class="string">"60 +"</span></div><div class="line">    attrs=<span class="string">"*,+"</span></div><div class="line">    credentials=se12pa</div><div class="line">    </div><div class="line">mirrormode on</div></pre></td></tr></table></figure><p>解释说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># syncrepl特有的索引  </span></div><div class="line">index entryCSN eq  </div><div class="line">index entryUUID eq  </div><div class="line">   </div><div class="line"><span class="comment"># syncrepl参数  </span></div><div class="line">syncrepl rid=203  </div><div class="line">provider=ldap://IP地址:端口 <span class="comment">#提供者的IP和端口号  provider项填写主服务器的ldap地址</span></div><div class="line">bindmethod=simple <span class="comment">#认证方式，默认选择简单认证  </span></div><div class="line">interval=00:00:00:00 <span class="comment">#同步时间间隔 天：小时：分钟：秒  interval表示从服务器多久跟主服务器进行一次数据同步</span></div><div class="line">binddn=<span class="string">"cn=Manager,dc=jollychic,dc=com"</span> <span class="comment">#登陆的ldap账号  </span></div><div class="line">credentials=登陆密码  </div><div class="line">searchbase=<span class="string">"dc=jollychic,dc=com"</span> <span class="comment">#同步的根路径  </span></div><div class="line">filter=<span class="string">"(objectClass=*)"</span>  </div><div class="line">scope=sub  </div><div class="line">attrs=<span class="string">"*,+"</span>  </div><div class="line"><span class="built_in">type</span>=refreshAndPersist <span class="comment">#同步方式：有refreshAndPersist和  </span></div><div class="line">retry=<span class="string">"60 10 600 +"</span>  <span class="comment"># retry表示失败重试策略</span></div></pre></td></tr></table></figure><h3 id="PS-在phpldapadmin添加从LDAP服务器、便于管理"><a href="#PS-在phpldapadmin添加从LDAP服务器、便于管理" class="headerlink" title="PS:在phpldapadmin添加从LDAP服务器、便于管理"></a>PS:在phpldapadmin添加从LDAP服务器、便于管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* A convenient name that will appear <span class="keyword">in</span> the tree viewer and throughout</div><div class="line">   phpLDAPadmin to identify this LDAP server to users. */</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'My LDAP Server'</span>);</div><div class="line"></div><div class="line"><span class="variable">$servers</span>-&gt;newServer(<span class="string">'ldap_pla'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'192.168.3.15:389'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'host'</span>,<span class="string">'192.168.3.15'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'port'</span>,<span class="string">'389'</span>);</div><div class="line"></div><div class="line"><span class="variable">$servers</span>-&gt;newServer(<span class="string">'ldap_pla'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'192.168.3.82:389'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'host'</span>,<span class="string">'192.168.3.82'</span>);</div><div class="line"><span class="variable">$servers</span>-&gt;<span class="built_in">set</span>Value(<span class="string">'server'</span>,<span class="string">'port'</span>,<span class="string">'389'</span>);</div></pre></td></tr></table></figure><h3 id="登录测试数据是否同步："><a href="#登录测试数据是否同步：" class="headerlink" title="登录测试数据是否同步："></a>登录测试数据是否同步：</h3><p><img src="http://image.chengyangyang.com/openldapsalve3.png" alt=""></p><h3 id="slave1-数据同步成功图："><a href="#slave1-数据同步成功图：" class="headerlink" title="slave1 数据同步成功图："></a>slave1 数据同步成功图：</h3><p><img src="http://image.chengyangyang.com/openldapsalve4.png" alt=""></p><h3 id="slave2-数据同步成功图："><a href="#slave2-数据同步成功图：" class="headerlink" title="slave2 数据同步成功图："></a>slave2 数据同步成功图：</h3><p><img src="http://image.chengyangyang.com/openldapsalve5.png" alt=""></p><p>遇到故障问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@ldap-master ~]<span class="comment"># ldapsearch -x -LLL</span></div><div class="line">No such object (32)</div><div class="line"></div><div class="line">打开并修改为如下两行即可</div><div class="line">vim /etc/openldap/ldap.conf</div><div class="line"><span class="comment">#-----------------------------------------------------------------</span></div><div class="line">BASE dc=jollychic,dc=com</div><div class="line">URI ldap://192.168.17.145</div><div class="line"><span class="comment">#-----------------------------------------------------------------</span></div></pre></td></tr></table></figure><p>测试结果，主从配置成功。</p><p>补充：由于在syncrepl中slave是refreshOnly，相当于从节点是只读的，这时不允许在从节点导入或者删除用户，否则会出现错误，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@LDAP openldap]<span class="comment"># ldapadd -x -D "cn=Manager,dc=jollychic,dc=com" -W -f /tmp/jolly.ldif</span></div><div class="line">Enter LDAP Password:</div><div class="line">adding new entry <span class="string">"dc=jollychic,dc=com"</span></div><div class="line">ldap_add: Server is unwilling to perform (53)</div><div class="line">additional info: shadow context; no update referral</div></pre></td></tr></table></figure><p>参考：<a href="https://itsecureadmin.com/2013/01/ldapmodify-fails-with-server-is-unwilling-to-perform-53/" target="_blank" rel="external">https://itsecureadmin.com/2013/01/ldapmodify-fails-with-server-is-unwilling-to-perform-53/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;OpenLDAP主从复制节点配置线上版本&quot;&gt;&lt;a href=&quot;#OpenLDAP主从复制节点配置线上版本&quot; class=&quot;headerlink&quot; title=&quot;OpenLDAP主从复制节点配置线上版本&quot;&gt;&lt;/a&gt;OpenLDAP主从复制节点配置线上版本&lt;/h4&gt;&lt;p&gt;公司服务器上搭建了一个OpenLDAP服务，为了避免出现单点，需要给LDAP做主从要从国外从服务器实时同步。这里我也升级了Openldap 配置一主多从方法。&lt;br&gt;于是上openldap官网上查了一下openldap的复制功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devopsideas.com/wp-content/uploads/2017/09/Openldap-7-800x445.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenLDAP" scheme="http://weblog.chengyangyang.com/categories/OpenLDAP/"/>
    
    
      <category term="OpenLDAP" scheme="http://weblog.chengyangyang.com/tags/OpenLDAP/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警</title>
    <link href="http://weblog.chengyangyang.com/2017/06/05/Bigdata-hadoop/Kafka/Zabbix-Monitoring%20Kafka%20Consumer%20%7C%20kafka%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E5%91%8A%E8%AD%A6/"/>
    <id>http://weblog.chengyangyang.com/2017/06/05/Bigdata-hadoop/Kafka/Zabbix-Monitoring Kafka Consumer | kafka的监控和告警/</id>
    <published>2017-06-05T09:56:03.000Z</published>
    <updated>2019-01-17T08:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.chengyangyang.com/Zabbix-Monitoring-Kafka.png" alt=""></p><h3 id="Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警"><a href="#Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警" class="headerlink" title="Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警"></a>Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警</h3><p>前面一篇讲了我们监控kafka集群Brokers服务状态监控。生产环境监控，可以在Zabbix中对Kafka进行监控，一种是监控JMX端口，另外一种是直接写脚本，使用bin/kafka-run-class.sh里提供的相关方法类。</p><p>根据我们的业务场景，最为主要的的是监控消费者Lag的情况。所有我直接写脚本了。<br>我们对某一个Topic的30个分区，每个分区，当前Consumer的Lag情况。<br>当然还可以生成汇总图，在此不做多展示。在Zabbix中配置对应的Triggers，当Lag超过阀值，实现报警。</p><a id="more"></a><p>这里我用命令在kafka当中一台服务器获取了其中一个Topic group的Lag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[jollybi@countly2 kafka_2.10]$ </div><div class="line">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper 75.126.39.4:2281,75.126.5.2:2281,75.126.5.1:2281 --group group_zybi --topic mongotail_lz4  </div><div class="line">消费组           话题id                        分区ID 当前已消费的条数   总条数         未消费的            </div><div class="line">Group           Topic                          Pid Offset          <span class="built_in">log</span>Size         Lag             Owner</div><div class="line">group_zybi      mongotail_lz4                  0   1092163900      2253744158      1161580258      none</div><div class="line">group_zybi      mongotail_lz4                  1   1092281117      2253795899      1161514782      none</div><div class="line">group_zybi      mongotail_lz4                  2   1092834883      2253771036      1160936153      none</div><div class="line">group_zybi      mongotail_lz4                  3   1092822121      2253772916      1160950795      none</div><div class="line">group_zybi      mongotail_lz4                  4   1092040532      2253775432      1161734900      none</div><div class="line">group_zybi      mongotail_lz4                  5   1095163824      2253744329      1158580505      none</div><div class="line">group_zybi      mongotail_lz4                  6   1097623779      2253781500      1156157721      none</div><div class="line">group_zybi      mongotail_lz4                  7   1097459357      2253782032      1156322675      none</div><div class="line">group_zybi      mongotail_lz4                  8   1099080546      2253741287      1154660741      none</div><div class="line">group_zybi      mongotail_lz4                  9   1099028190      2253785053      1154756863      none</div><div class="line">group_zybi      mongotail_lz4                  10  1099535928      2253795680      1154259752      none</div><div class="line">group_zybi      mongotail_lz4                  11  1099701993      2253742880      1154040887      none</div></pre></td></tr></table></figure><p>其实命令大体的逻辑就是通过Consumer获取到当前的offset，就能有lag信息了，如何写成脚本获取我们想要的消费和未消费与总消息条数呢。</p><p>脚本贴出来了，很简单理解，把自己获取到topic的消费条数过滤。我公司有两个主题topic分别对不同组获取lag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">[root@countly2 zabbix]<span class="comment"># vim monitor_kafka.sh</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/home/jollybi/tools/java-7-sun</div><div class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></div><div class="line">topic=mongotail_lz4_imp</div><div class="line">group=group_imp</div><div class="line"></div><div class="line"><span class="comment">#topic2</span></div><div class="line"></div><div class="line">topic2=mongotail_lz4</div><div class="line">group2=group_event</div><div class="line">group3=group_event_spm</div><div class="line"></div><div class="line"><span class="comment">#启动目录</span></div><div class="line">kafkaserver=/home/jollybi/tools/kafka_2.10-0.8.2.1/bin/kafka-run-class.sh</div><div class="line">zk=75.126.39.4:2281,75.126.5.2:2281,75.126.5.8:2281</div><div class="line"></div><div class="line"><span class="keyword">function</span> imp_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> imp_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> imp_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># Run the requested function</span></div><div class="line"><span class="variable">$1</span></div></pre></td></tr></table></figure><p>⏰ <strong>这里脚本我更新过了，这个脚本实现是当个分片的消费情况。 不是总的消费和未消费的取到的值。</strong><br>🎋 需要原脚本的留言喔，下面步骤都是一样的效果。</p><h4 id="脚本放到kafka服务器-etc-zabbix-下面，并配合zabbix监控。"><a href="#脚本放到kafka服务器-etc-zabbix-下面，并配合zabbix监控。" class="headerlink" title="脚本放到kafka服务器/etc/zabbix/下面，并配合zabbix监控。"></a>脚本放到kafka服务器/etc/zabbix/下面，并配合zabbix监控。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@countly2 zabbix]<span class="comment"># ll</span></div><div class="line">total 8</div><div class="line">-rwxrwxr-x 1 jollybi jollybi 1932 Jun  7 10:40 monitor_kafka.sh</div><div class="line">-rw-r--r-- 1 root    root     218 Jun  7 14:19 zabbix_agentd.conf</div><div class="line">drwxr-xr-x 2 root    root      45 Sep 20  2016 zabbix_agentd.d</div></pre></td></tr></table></figure><h4 id="然后zabbix-agentd-conf扩展配置"><a href="#然后zabbix-agentd-conf扩展配置" class="headerlink" title="然后zabbix_agentd.conf扩展配置"></a>然后zabbix_agentd.conf扩展配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserParameter=kafka.[*],/etc/zabbix/monitor_kafka.sh <span class="variable">$1</span></div></pre></td></tr></table></figure><blockquote><p>也可以这么写：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UserParameter=kafka.imp_lag,/etc/zabbix/monitor_kafka.sh imp_lag</div><div class="line">UserParameter=kafka.imp_offset,/etc/zabbix/monitor_kafka.sh imp_offset</div><div class="line">UserParameter=kafka.imp_logsize,/etc/zabbix/monitor_kafka.sh imp_logsize</div><div class="line">UserParameter=kafka.event_spm_lag,/etc/zabbix/monitor_kafka.sh event_spm_lag</div><div class="line">UserParameter=kafka.event_spm_logsize,/etc/zabbix/monitor_kafka.sh event_spm_logsize</div><div class="line">UserParameter=kafka.event_spm_offset,/etc/zabbix/monitor_kafka.sh event_spm_offset </div><div class="line">UserParameter=kafka.event_lag,/etc/zabbix/monitor_kafka.sh event_lag</div><div class="line">UserParameter=kafka.event_offset,/etc/zabbix/monitor_kafka.sh event_offset</div><div class="line">UserParameter=kafka.event_logsize,/etc/zabbix/monitor_kafka.sh event_logsize</div></pre></td></tr></table></figure><p>这里写键值就不需要加[]</p><p>然后配置完成重启zabbix-agent服务。</p><h4 id="zabbix设置Key"><a href="#zabbix设置Key" class="headerlink" title="zabbix设置Key"></a>zabbix设置Key</h4><p>zabbix-组态-模板-创建模板。</p><p>创建：KafkaConsumers模板<br>然后点击KafkaConsumers模板，创建相应的项目:kafka.event_lag 未消费的条数 </p><p>设置zabbix代理。默认的代理方式。</p><p>zabbix,key 键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka.[event_lag]</div></pre></td></tr></table></figure><p>数据类型默认浮点就可以了。 后面应用集选择下KafkaConsumers 即可。</p><p><img src="http://image.chengyangyang.com/kafka-Consumer.01.png" alt=""><br>陆陆续续配置完所有项目。</p><h3 id="然后配置图形。"><a href="#然后配置图形。" class="headerlink" title="然后配置图形。"></a>然后配置图形。</h3><p><img src="http://image.chengyangyang.com/kafka-Consumer.02.png" alt=""></p><p><img src="http://image.chengyangyang.com/kafka-Consumer.04.png" alt=""></p><p><img src="http://image.chengyangyang.com/kafka-Consumer.05.png" alt=""></p><h3 id="查看最新数据图："><a href="#查看最新数据图：" class="headerlink" title="查看最新数据图："></a>查看最新数据图：</h3><p><img src="http://image.chengyangyang.com/kafka-Consumer.06.png" alt=""><br><img src="http://image.chengyangyang.com/kafka-Consumer.07.png" alt=""></p><p>出现问题第一时间发送报警消息。<br>报警的Trigger触发规则也是对lag的值做报警，具体阀值设置为多少，还是看大家各自业务需求了。</p><h3 id="这里我对未消费告警定时60分钟触发一次。"><a href="#这里我对未消费告警定时60分钟触发一次。" class="headerlink" title="这里我对未消费告警定时60分钟触发一次。"></a>这里我对未消费告警定时60分钟触发一次。</h3><p>⚠️注释：设置group_event_lag最近消息条数的60分钟时间之内一直超过200万消费则报警</p><p><img src="http://image.chengyangyang.com/kafka-Consumer.08.png" alt=""><br><img src="http://image.chengyangyang.com/kafka-Consumer.09.png" alt=""></p><p><img src="http://image.chengyangyang.com/kafka-Consumer.10.png" alt=""></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.chengyangyang.com/Zabbix-Monitoring-Kafka.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警&quot;&gt;&lt;a href=&quot;#Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警&quot; class=&quot;headerlink&quot; title=&quot;Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警&quot;&gt;&lt;/a&gt;Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警&lt;/h3&gt;&lt;p&gt;前面一篇讲了我们监控kafka集群Brokers服务状态监控。生产环境监控，可以在Zabbix中对Kafka进行监控，一种是监控JMX端口，另外一种是直接写脚本，使用bin/kafka-run-class.sh里提供的相关方法类。&lt;/p&gt;
&lt;p&gt;根据我们的业务场景，最为主要的的是监控消费者Lag的情况。所有我直接写脚本了。&lt;br&gt;我们对某一个Topic的30个分区，每个分区，当前Consumer的Lag情况。&lt;br&gt;当然还可以生成汇总图，在此不做多展示。在Zabbix中配置对应的Triggers，当Lag超过阀值，实现报警。&lt;/p&gt;
    
    </summary>
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="http://weblog.chengyangyang.com/tags/Kafka/"/>
    
      <category term="Zabbix" scheme="http://weblog.chengyangyang.com/tags/Zabbix/"/>
    
  </entry>
  
</feed>
