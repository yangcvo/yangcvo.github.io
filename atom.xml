<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yancy&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/4bb94619692fa63fbfa18343b7c7965c</icon>
  <subtitle>SIMPLICITY IS PREREQUISITE FOR  RELIABILITY</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yancy.cc/"/>
  <updated>2017-11-01T10:04:30.000Z</updated>
  <id>http://blog.yancy.cc/</id>
  
  <author>
    <name>Yancy</name>
    <email>yangcvo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤</title>
    <link href="http://blog.yancy.cc/2017/10/11/Bigdata-hadoop/Kafka/KafKa%E4%BB%8E0.8.2.1%E5%8D%87%E7%BA%A7%E5%88%B00.9.0.1%E5%8F%98%E5%8C%96%E6%96%B9%E6%A1%88%E4%B8%8E%E6%AD%A5%E9%AA%A4/"/>
    <id>http://blog.yancy.cc/2017/10/11/Bigdata-hadoop/Kafka/KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤/</id>
    <published>2017-10-11T03:22:00.000Z</published>
    <updated>2017-11-01T10:04:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KafKa从0-8-2-1升级到0-9-0-1变化方案与步骤"><a href="#KafKa从0-8-2-1升级到0-9-0-1变化方案与步骤" class="headerlink" title="KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤"></a>KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤</h2><p>🍊我这里是采用,群集升级,全部更新停止老版本zk和kafka更新服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">9.0.0有潜在的中断更改风险（在升级之前需要知道），并且与之前版本的broker之间的协议改变。这意味着此次升级可能和客户端旧版本不兼容。因此在升级客户端之前，先升级kafka集群。如果你使用MirrorMaker下游集群，则同样应首先升级。</div><div class="line"></div><div class="line"><span class="comment">### 滚动升级</span></div><div class="line"></div><div class="line">升级所有broker的server.properties,并在其中添加</div><div class="line">inter.broker.protocol.version = 0.8.2.X</div><div class="line">每次升级一个broker：关闭broker，替换新版本，然后重新启动。</div><div class="line"></div><div class="line"><span class="comment">### 群集升级</span></div><div class="line">一旦整个群集升级，通过编辑inter.broker.protocol.version并将其设置为0.9.0.0来转换所有协议。</div><div class="line">逐个重新启动broker，使新协议版本生效。</div><div class="line">注意 ：如果你可接受停机，你可以简单地将所有broker关闭，更新版本并重启启动，协议将默认从新版本开始。</div><div class="line">注意 ：变换协议版本和重启启动可以在broker升级完成后的任何时间去做，不必马上做。</div></pre></td></tr></table></figure><a id="more"></a><h4 id="0-9-0-0潜在的中断变化"><a href="#0-9-0-0潜在的中断变化" class="headerlink" title="0.9.0.0潜在的中断变化"></a>0.9.0.0潜在的中断变化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Java 1.6不再支持，需要Jdk1.7版本以上。</div><div class="line">Scala 2.9不再支持。</div><div class="line"></div><div class="line">默认情况下，1000以上的Broker ID为自动分配。如果你的集群高于该阈值，需相应地增加</div><div class="line">reserved.broker.max.id配置。</div><div class="line"></div><div class="line">replica.lag.max.messages配置已经移除。分区leader在决定哪些副本处于同步时将不再考虑落后的消息的数。</div><div class="line"></div><div class="line">配置参数replica.lag.time.max.ms现在不仅指自上次从副本获取请求后经过的时间，还指自副本上次被捕获以来的时间。 副本仍然从leader获取消息，但超过replica.lag.time.max.ms配置的最新消息将被认为不同步的。</div><div class="line"></div><div class="line">压缩的topic不再接受没有key的消息，如果出现，生产者将抛出异常。 在0.8.x中，没有key的消息将导致日志压缩线程退出（并停止所有压缩的topic）。</div><div class="line"></div><div class="line">MirrorMaker不再支持多个目标集群。 它只接受一个--consumer.config。 要镜像多个源集群，每个源集群至少需要一个MirrorMaker实例，每个源集群都有自己的消费者配置。</div><div class="line"></div><div class="line">在org.apache.kafka.clients.tools。包下的Tools已移至org.apache.kafka.tools。。 所有包含的脚本仍将照常工作，只有直接导入这些类的自定义代码将受到影响。</div><div class="line"></div><div class="line">在kafka-run-class.sh中更改了默认的Kafka JVM性能选项（KAFKA_JVM_PERFORMANCE_OPTS）。</div><div class="line"></div><div class="line">kafka-topics.sh脚本（kafka.admin.TopicCommand）现在退出，失败时出现非零退出代码。</div><div class="line"></div><div class="line">kafka-topics.sh脚本（kafka.admin.TopicCommand）现在将在topic名称由于使用“.”或“_”而导致风险度量标准冲突时打印警告。以及冲突的情况下的错误。</div><div class="line"></div><div class="line">kafka-console-producer.sh脚本（kafka.tools.ConsoleProducer）将默认使用新的Java Producer，用户必须指定“old-producer”才能使用旧生产者。</div><div class="line">默认情况下，所有命令行工具都会将所有日志消息打印到stderr而不是stdout。</div></pre></td></tr></table></figure><h4 id="0-9-0-1中的显著变化"><a href="#0-9-0-1中的显著变化" class="headerlink" title="0.9.0.1中的显著变化"></a>0.9.0.1中的显著变化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">可以通过将broker.id.generation.enable设置为<span class="literal">false</span>来禁用新的broker ID生成功能。</div><div class="line"></div><div class="line">默认情况下，配置参数log.cleaner.enable为<span class="literal">true</span>。 这意味着topic会清理。</div><div class="line">policy = compact现在将被默认压缩，并且128MB的堆（通过log.cleaner.dedupe.buffer.size）分配给清洗进程。你可能需要根据你对压缩topic的使用情况，查看log.cleaner.dedupe.buffer.size和其他log.cleaner配置值。</div><div class="line"></div><div class="line">默认情况下，新消费者的配置参数fetch.min.bytes的默认值为1。</div></pre></td></tr></table></figure><h4 id="0-9-0-0弃用的"><a href="#0-9-0-0弃用的" class="headerlink" title="0.9.0.0弃用的"></a>0.9.0.0弃用的</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh脚本的变更topic配置已弃用（kafka.admin.ConfigCommand），以后将使用kafka-configs.sh(kafka.admin.ConfigCommand) 。</div><div class="line"></div><div class="line">kafka-consumer-offset-checker.sh(kafka.tools.ConsumerOffsetChecker)已弃用，以后将使用kafka-consumer-groups.sh (kafka.admin.ConsumerGroupCommand)</div><div class="line"></div><div class="line">kafka.tools.ProducerPerformance已弃用。以后将使用org.apache.kafka.tools.ProducerPerformance（kafka-producer-perf-test.sh也将使用新类）</div><div class="line"></div><div class="line">生产者的block.on.buffer.full已弃用，并将在以后的版本中移除。目前其默认已经更为<span class="literal">false</span>。KafkaProducer将不再抛出BufferExhaustedException，而是使用max.block.ms来中止，之后将抛出TimeoutException。如果block.on.buffer.full属性明确地设置为<span class="literal">true</span>，它将设置max.block.ms为Long.MAX_VALUE和metadata.fetch.timeout.ms将不执行。</div></pre></td></tr></table></figure><h4 id="升级准备步骤："><a href="#升级准备步骤：" class="headerlink" title="升级准备步骤："></a>升级准备步骤：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">（0）</div><div class="line">wget http://mirror.bit.edu.cn/apache/kafka/0.9.0.1/kafka_2.10-0.9.0.1.tgz</div><div class="line">tar -xvf kafka_2.10-0.9.0.1.tgz</div><div class="line"></div><div class="line">[jollybi@kafka1 tools]$ ll</div><div class="line">total 88100</div><div class="line">drwxr-xr-x  7 jollybi jollybi     4096 Jul 14 13:07 kafka_2.10-0.8.2.1</div><div class="line">-rw-rw-r--  1 jollybi jollybi 16162559 Jul 14 11:40 kafka_2.10-0.8.2.1.tgz</div><div class="line">drwxr-xr-x  6 jollybi jollybi     4096 Feb 12  2016 kafka_2.10-0.9.0.1</div><div class="line">-rw-rw-r--  1 jollybi jollybi 35725063 Jun 20 20:11 kafka_2.10-0.9.0.1.tgz</div><div class="line">drwxr-xr-x 12 jollybi jollybi     4096 Sep 25 16:41 zookeeper-3.4.5</div><div class="line">-rw-rw-r--  1 jollybi jollybi 38307840 Jul 14 11:40 zookeeper-3.4.5.tar</div><div class="line"></div><div class="line">[jollybi@kafka1 tools]$ mkdir -p /data/tools/kafka_2.10-0.9.0.1/kafka-logs</div><div class="line">[jollybi@kafka1 tools]$ mkdir -p /data/tools/kafka_2.10-0.9.0.1/logs</div><div class="line"></div><div class="line"><span class="comment">###修改配置：</span></div><div class="line"></div><div class="line">(1)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/zookeeper.properties</div><div class="line">第一步修改:</div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line">dataDir=dataDir=/data/jollybi/tools/zookeeper-3.4.5/tmp</div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line">clientPort=2281</div><div class="line"><span class="comment"># disable the per-ip limit on the number of connections since this is a non-production config</span></div><div class="line">maxClientCnxns=0</div><div class="line">dataDir,clientPort的意义不需要说明了，对于maxClientCnxns选项，如果不设置或者设置为0，则每个ip连接zookeeper时的连接数没有限制。</div><div class="line">需要注意的是，设置maxClientCnxns的值时需要把kafka server的连接数考虑进去，因为启动kafka server时，kafka server也会连接zookeeper的。</div><div class="line"></div><div class="line">(2)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/consumer.properties</div><div class="line">zookeeper.connect=10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">其他参数根据不同集群环境调整</div><div class="line"></div><div class="line">(3)</div><div class="line">[jollybi@kafka1 tools]$ vim kafka_2.10-0.9.0.1/config/producer.properties (修改内网IP)</div><div class="line">metadata.broker.list=10.155.90.153:9292,10.155.90.155:9292,10.155.90.138:9292</div><div class="line">producer.type=sync</div><div class="line">compression.codec=none</div><div class="line">serializer.class=kafka.serializer.DefaultEncoder</div><div class="line">其他参数根据不同集群环境调整</div><div class="line"></div><div class="line">(4) </div><div class="line">[jollybi@kafka1 config]$ cat server.properties | grep -Pv <span class="string">"^#|^$"</span></div><div class="line">broker.id=1</div><div class="line">auto.leader.rebalance.enable = <span class="literal">true</span></div><div class="line">listeners=PLAINTEXT://10.155.90.153:9292</div><div class="line">port=9292</div><div class="line">host.name=10.155.90.153</div><div class="line">zookeeper.connect=10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">zookeeper.connection.timeout.ms=6000</div><div class="line">num.network.threads=3</div><div class="line">num.io.threads=8</div><div class="line">socket.send.buffer.bytes=102400</div><div class="line">socket.receive.buffer.bytes=102400</div><div class="line">socket.request.max.bytes=104857600</div><div class="line">log.dirs=/data/tools/kafka_2.10-0.9.0.1/kafka-logs</div><div class="line">log.cleaner.enable=<span class="literal">true</span></div><div class="line">delete.topic.enable=<span class="literal">true</span></div><div class="line">num.partitions=1</div><div class="line">num.recovery.threads.per.data.dir=1</div><div class="line">log.retention.hours=96</div><div class="line">log.segment.bytes=1073741824</div><div class="line">log.retention.check.interval.ms=300000</div><div class="line"></div><div class="line">备注：listeners一定要配置成为IP地址；如果配置为localhost或服务器的hostname,在使用java发送数据时就会抛出异 常：org.apache.kafka.common.errors.TimeoutException: Batch Expired 。因为在没有配置advertised.host.name 的情况下，Kafka并没有像官方文档宣称的那样改为广播我们配置的hostname，而是广播了主机配置的hostname。远端的客户端并没有配置 hosts，所以自然是连接不上这个hostname的</div></pre></td></tr></table></figure><h4 id="kafka与zk内存日志优化"><a href="#kafka与zk内存日志优化" class="headerlink" title="kafka与zk内存日志优化"></a>kafka与zk内存日志优化</h4><p>我个人博客有写优化文档<br><a href="http://blog.yancy.cc/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper%E9%9B%86%E7%BE%A4%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E5%92%8C%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%20/">Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存</a><br><a href="http://blog.yancy.cc/2017/07/04/Bigdata-hadoop/Kafka/kafka%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%93JVM%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/">Kafka性能优化–JVM参数配置优化</a><br><a href="http://blog.yancy.cc/2017/03/30/Bigdata-hadoop/Kafka/Kafka%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BC%98%E5%8C%96/">Kafka日志存储解析与实践数据存储优化</a></p><h4 id="升级步骤方案："><a href="#升级步骤方案：" class="headerlink" title="升级步骤方案："></a>升级步骤方案：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(0) mongodb 能存储时间戳4个小时的数据，在4个小时之内升级不会有风险。</div><div class="line">(1) mongotail 先停止生产写入数据到kafka</div><div class="line">(2) kafka 消费组继续消费 topic分区查看消费为零。</div><div class="line">(3) zk需要升级3.4.6版本对应kafka0.9.1版本，如果zk不需要升级，升级之前要先将ZooKeeper中原版本的kafka生成的znode删除，包括：consumers, controller, brokers, controller_epoch等。否则启动kafka会报错。</div><div class="line">(4) 重启新版本zk集群，查看集群服务选举是否正常。</div><div class="line">(5) 重启新版本kafka集群，重启没有报错，查看版本没问题就行。</div><div class="line">(6) zk上面查看命令</div><div class="line"> ./zkCli.sh -server 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /</div><div class="line"></div><div class="line">controller_epoch          controller                brokers                   zookeeper                 kafka-manager             admin                     isr_change_notification   consumers                 config</div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /brokers/ids</div><div class="line">[1, 2, 3]  </div><div class="line">集群三个brokers id正常</div><div class="line">(7)修改监控指标。 完成升级</div><div class="line"></div><div class="line">(8) 另外，新版本的一些命令与原版本的有些相同,增删改查命令。</div></pre></td></tr></table></figure><h4 id="开始升级步骤操作："><a href="#开始升级步骤操作：" class="headerlink" title="开始升级步骤操作："></a>开始升级步骤操作：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">（1)启动zk与kafka</div><div class="line"><span class="comment"># /data/tools/zookeeper-3.4.6/bin/zkServer.sh start</span></div><div class="line"><span class="comment"># /data/tools/kafka_2.10-0.9.0.1/bin/kafka-server-start.sh /data/tools/ kafka_2.10-0.9.0.1/config/server.properties &amp;</span></div><div class="line"></div><div class="line">（2）新建topic</div><div class="line"><span class="comment">#./bin/kafka-topics.sh --create --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --replication-factor 3 --partitions 12  --topic mongotail_lz4_imp </span></div><div class="line"><span class="comment">#./bin/kafka-topics.sh --create --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --replication-factor 3 --partitions 12  --topic mongotail_lz4</span></div><div class="line"></div><div class="line">(3) 查看集群topic分区情况</div><div class="line"><span class="comment">#./bin/kafka-topics.sh  --describe --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topic mongotail_lz4</span></div><div class="line"></div><div class="line">(4) 更新所有开源监控（KafkaOffsetMonitor）</div><div class="line">vim /home/jollybi/./monitor/monitor.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">java -Xms512M -Xmx512M -Xss1024K -XX:PermSize=256m -XX:MaxPermSize=512m -cp KafkaOffsetMonitor-assembly-0.2.0_modify.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --port 8086  --refresh 10.seconds  --retain 7.days &gt;/tmp/stdout.log 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line">zk地址修改成内网地址 这里的数据存储7天。</div><div class="line">重启服务：</div><div class="line">./monitor/monitor.sh &amp;</div><div class="line"></div><div class="line">（5）更新开源监控（kafka-manager）</div><div class="line">vim kafka-manager-1.3.3.8/conf/application.conf</div><div class="line">kafka-manager.zkhosts=<span class="string">"10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281"</span></div><div class="line">zk地址修改成内网地址.</div><div class="line"></div><div class="line">重启服务：</div><div class="line">./kafka-manager-1.3.3.8/bin/kafka-manager -Dconfig.file=kafka-manager-1.3.3.8/conf/application.conf -Dhttp.port=8080 &amp;</div><div class="line"></div><div class="line">（6）更新开源监控（zabbix）自己写的监控脚本</div><div class="line"></div><div class="line">[jollybi@kafka1 ~]$ /data/tools/kafka_2.10-0.9.0.1/bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeepe 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --group group_ml --topic mongotail_lz4</div><div class="line">[2017-10-31 14:05:24,390] WARN WARNING: ConsumerOffsetChecker is deprecated and will be dropped <span class="keyword">in</span> releases following 0.9.0. Use ConsumerGroupCommand instead. (kafka.tools.ConsumerOffsetChecker$)</div><div class="line">Group           Topic                          Pid Offset          <span class="built_in">log</span>Size         Lag             Owner</div><div class="line">group_ml        mongotail_lz4                  0   1205186         1205257         71              group_ml_Graphsql-test.jollychic.com-1509421110787-1daec53a-0</div><div class="line">group_ml        mongotail_lz4                  1   1206860         1206915         55              group_ml_Graphsql-test.jollychic.com-1509421110787-1daec53a-0</div><div class="line">....</div><div class="line">运行会出现WARN警告，0.9版本更新过了，</div><div class="line"></div><div class="line">注意：在0.9.0.0，kafka.tools.ConsumerOffsetChecker已经不支持了。你应该使用kafka.admin.ConsumerGroupCommand(或bin/kafka-consumer-groups.sh脚本)来管理消费者组，包括用新消费者API创建的消费者。</div><div class="line"></div><div class="line">这里使用kafka.admin.ConsumerGroupCommand 提示命令不对，现在在研究使用。 </div><div class="line">监控脚本 输出会有提示直接过滤掉即可。</div><div class="line"><span class="keyword">function</span> wlj_event_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`sh /etc/zabbix/kafka_topic_monitor.sh 2&gt;/dev/null |  sed -n  '3p'`"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>🎉 kafka升级，调配内网访问地址，内存，日志输出类型调优，监控更新配置。<br>🎉 参考官网文档 <a href="https://kafka.apache.org/0101/documentation.html#upgrade_9" target="_blank" rel="external">Apache Kafka 从 0.8.0, 0.8.1.X 或 0.8.2.X 升级到 0.9.0.0</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;KafKa从0-8-2-1升级到0-9-0-1变化方案与步骤&quot;&gt;&lt;a href=&quot;#KafKa从0-8-2-1升级到0-9-0-1变化方案与步骤&quot; class=&quot;headerlink&quot; title=&quot;KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤&quot;&gt;&lt;/a&gt;KafKa从0.8.2.1升级到0.9.0.1变化方案与步骤&lt;/h2&gt;&lt;p&gt;🍊我这里是采用,群集升级,全部更新停止老版本zk和kafka更新服务。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;9.0.0有潜在的中断更改风险（在升级之前需要知道），并且与之前版本的broker之间的协议改变。这意味着此次升级可能和客户端旧版本不兼容。因此在升级客户端之前，先升级kafka集群。如果你使用MirrorMaker下游集群，则同样应首先升级。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 滚动升级&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;升级所有broker的server.properties,并在其中添加&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inter.broker.protocol.version = 0.8.2.X&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;每次升级一个broker：关闭broker，替换新版本，然后重新启动。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 群集升级&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;一旦整个群集升级，通过编辑inter.broker.protocol.version并将其设置为0.9.0.0来转换所有协议。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;逐个重新启动broker，使新协议版本生效。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注意 ：如果你可接受停机，你可以简单地将所有broker关闭，更新版本并重启启动，协议将默认从新版本开始。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注意 ：变换协议版本和重启启动可以在broker升级完成后的任何时间去做，不必马上做。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>KafKa扩容群集(Topic.partitions迁移)</title>
    <link href="http://blog.yancy.cc/2017/10/11/Bigdata-hadoop/Kafka/KafKa%E6%89%A9%E5%AE%B9%E7%BE%A4%E9%9B%86(Topic.partitions%E8%BF%81%E7%A7%BB)/"/>
    <id>http://blog.yancy.cc/2017/10/11/Bigdata-hadoop/Kafka/KafKa扩容群集(Topic.partitions迁移)/</id>
    <published>2017-10-11T03:22:00.000Z</published>
    <updated>2017-11-21T03:16:17.137Z</updated>
    
    <content type="html"><![CDATA[<h4 id="kafka的扩容难点："><a href="#kafka的扩容难点：" class="headerlink" title="kafka的扩容难点："></a>kafka的扩容难点：</h4><p>1）主要在于增加机器之后，数据需要rebalance到新增的空闲节点，即把partitions迁移到空闲机器上。<br>kafka提供<code>bin/kafka-reassign-partitions.sh</code>工具，完成parttition的迁移。</p><p>2）kafka的集群的数据量加大，数据rebalance的时间较长。解决办法是把<code>log.retention.hours=1</code>设置一小时（生产参数24小时）。<br>修改参数之后，重启kakfa节点，kafka会主动purge 1小时之前的log数据。<br>以下是kafka_0.8.1.1版本kafkka集群扩容操作记录，从3台物理机扩容到4台物理，partition数量由24个增加到28个。</p><p>参考：<a href="http://kafka.apache.org/081/documentation.html#basic_ops_modify_topic" target="_blank" rel="external">http://kafka.apache.org/081/documentation.html#basic_ops_modify_topic</a></p><p>将服务器添加到Kafka集群非常简单，只需为其分配唯一的代理ID，然后在新服务器上启动Kafka。但是，这些新的服务器不会自动分配任何数据分区，除非将分区移动到这些分区，否则直到创建新主题时才会执行任何工作。所以通常当你将机器添加到你的群集中时，你会想把一些现有的数据迁移到这些机器上。<br>数据迁移过程是手动启动的，但是完全自动化。下面介绍的是，Kafka会将新服务器添加为正在迁移的分区的跟随者，并允许其完全复制该分区中的现有数据。当新服务器完全复制了此分区的内容并加入了同步副本时，其中一个现有副本将删除其分区的数据。</p><p>分区重新分配工具可用于跨代理移动分区。理想的分区分布将确保所有代理的数据加载和分区大小。分区重新分配工具不具备自动研究Kafka集群中的数据分布并移动分区以实现均匀负载分配的功能。因此，管理员必须找出哪些主题或分区应该移动。</p><p>分区重新分配工具可以运行在3个互斥的模式中：</p><ul><li>生成：在此模式下，给定主题列表和经纪人列表，该工具会生成候选重新​​分配，以将指定主题的所有分区移至新经纪人。此选项仅提供了一种便捷的方式，可以根据主题和目标代理列表生成分区重新分配计划。<br>–execute：在此模式下，该工具根据用户提供的重新分配计划启动分区重新分配。（使用–reassignment-json-file选项）。这可以是由管理员制作的自定义重新分配计划，也可以是使用–generate选项提供的自定义重新分配计划<br>–verify：在此模式下，该工具会验证上次执行过程中列出的所有分区的重新分配状态。状态可以是成功完成，失败或正在进行</li></ul><p>自动将数据迁移到新机器</p><p>分区重新分配工具可用于将当前一组经纪人的一些主题移到新增的经纪人。这在扩展现有集群时通常很有用，因为将整个主题移动到新的代理集比移动一个分区更容易。用于这样做时，用户应该提供应该移动到新的经纪人集合和新的经纪人的目标列表的主题列表。然后，该工具在新的代理集合上均匀分配给定主题列表的所有分区。在此过程中，主题的复制因子保持不变。有效地，主题输入列表的所有分区副本都从旧的代理集合移动到新添加的代理。<br>例如，以下示例将把主题<code>countly_apppush，countly_event...</code>的所有分区移动到新的代理集4 。在本次移动结束时，主题<code>countly_apppush，countly_event...</code>的所有分区将仅存在于代理4上。</p><h5 id="1-kafka-扩容"><a href="#1-kafka-扩容" class="headerlink" title="1.kafka 扩容"></a>1.kafka 扩容</h5><p>首先按照搭建步骤，在其他机器上搭建集群，kafka的配置文件中 zkconnect 要保持与原kafka一致<br>kafka版本一致，配置跟之前kafka集群一致，只需要修改本地kafka的地址.</p><h5 id="2-验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli-sh-去查看"><a href="#2-验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli-sh-去查看" class="headerlink" title="2.验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli.sh 去查看"></a>2.验证kafka新节点是否加入集群成功，这个应该去zookeeper的zkCli.sh 去查看</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@kafka1 bin]<span class="comment"># ./zkCli.sh -server  10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281</span></div><div class="line">[zk: 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281(CONNECTED) 0] ls /brokers/ids/</div><div class="line">1,2,3,4</div></pre></td></tr></table></figure><h5 id="3-由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示："><a href="#3-由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示：" class="headerlink" title="3.由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示："></a>3.由于该工具接受主题的输入列表作为json文件，因此首先需要确定要移动的主题并创建json文件，如下所示：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"topics"</span>: [&#123;<span class="string">"topic"</span>: <span class="string">"countly_apppush"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_event"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_imp"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_metrics"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_pv"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"countly_session"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"mongotail_lz4"</span>&#125;,</div><div class="line">            &#123;<span class="string">"topic"</span>: <span class="string">"mongotail_lz4_imp"</span>&#125;</div><div class="line">            ],</div><div class="line"> <span class="string">"version"</span>:1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="4-一旦json文件准备就绪，使用分区重新分配工具来生成候选分配："><a href="#4-一旦json文件准备就绪，使用分区重新分配工具来生成候选分配：" class="headerlink" title="4.一旦json文件准备就绪，使用分区重新分配工具来生成候选分配："></a>4.一旦json文件准备就绪，使用分区重新分配工具来生成候选分配：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topics-to-move-json-file topics-to-move.json --broker-list <span class="string">"1,2,3,4"</span> --generate</div><div class="line"></div><div class="line"></div><div class="line">[jollybi@kafka3 kafka_2.10-0.9.0.1]$ bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281 --topics-to-move-json-file topics-to-move.json --broker-list <span class="string">"1,2,3,4"</span> --generate</div><div class="line">Current partition replica assignment</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[3,2,1]&#125;,</div><div class="line">.....</div><div class="line"></div><div class="line">Proposed partition reassignment configuration</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"countly_event"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[4,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_metrics"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_session"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[1,4,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_apppush"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"countly_pv"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[1,2,3]&#125;</div><div class="line">......</div></pre></td></tr></table></figure><p>其中的<code>Current partition replica assignment</code>指的是迁移前的partition replica；Proposed partition reassignment configuration 指的就是迁移分配规则json。需要将该<code>[Proposed partition reassignment configuration]</code>json文件保存到json文件中(如expand-cluster-reassignment.json)</p><p>该工具会生成一个候选分配，将所有分区从主题<code>countly_apppush，countly_event...</code>移动到<code>brokers 1,2,3,4</code>但是，请注意，在这一点上，分区运动还没有开始，它只是告诉你当前的任务和建议的新任务。应该保存当前的分配，以防你想要回滚到它。新的任务应该保存在一个json文件中<code>（例如expand-cluster-reassignment.json）</code>，并用<code>--execute</code>选项输入到工具中，如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json --execute</div><div class="line">Current partition replica assignment</div><div class="line"></div><div class="line">&#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[1,3,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[3,2,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[3,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[2,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[1,2,3]&#125;]&#125;</div><div class="line"></div><div class="line">Save this to use as the --reassignment-json-file option during rollback</div><div class="line">Successfully started reassignment of partitions &#123;<span class="string">"version"</span>:1,<span class="string">"partitions"</span>:[&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:3,<span class="string">"replicas"</span>:[3,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:8,<span class="string">"replicas"</span>:[4,3,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:0,<span class="string">"replicas"</span>:[4,1,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:6,<span class="string">"replicas"</span>:[2,4,1]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:11,<span class="string">"replicas"</span>:[3,2,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:1,<span class="string">"replicas"</span>:[1,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:10,<span class="string">"replicas"</span>:[2,1,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:4,<span class="string">"replicas"</span>:[4,2,3]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:9,<span class="string">"replicas"</span>:[1,4,2]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:2,<span class="string">"replicas"</span>:[2,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:5,<span class="string">"replicas"</span>:[1,3,4]&#125;,&#123;<span class="string">"topic"</span>:<span class="string">"mongotail_lz4_imp"</span>,<span class="string">"partition"</span>:7,<span class="string">"replicas"</span>:[3,1,2]&#125;]&#125;</div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">最后，可以使用`--verify`选项来检查分区重新分配的状态。</div><div class="line">请注意，相同的`expand-cluster-reassignment.json`（与`--execute`选项一起使用）应该与--verify选项一起使用</div><div class="line"></div><div class="line">```BASH</div><div class="line">/bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json  --verify</div><div class="line"></div><div class="line">[jollybi@kafka4 kafka_2.10-0.9.0.1]$ ./bin/kafka-reassign-partitions.sh --zookeeper 10.155.90.153:2281,10.155.90.155:2281,10.155.90.138:2281  --reassignment-json-file expand-cluster-reassignment.json  --verify</div><div class="line">Status of partition reassignment:</div><div class="line">Reassignment of partition [countly_event,2] completed successfully</div><div class="line">Reassignment of partition [countly_session,7] completed successfully</div><div class="line">Reassignment of partition [countly_pv,5] completed successfully</div><div class="line">Reassignment of partition [countly_apppush,1] completed successfully</div><div class="line">Reassignment of partition [countly_event,0] completed successfully</div><div class="line">Reassignment of partition [countly_session,10] completed successfully</div><div class="line">Reassignment of partition [countly_apppush,4] completed successfully</div><div class="line">Reassignment of partition [countly_event,7] is still <span class="keyword">in</span> progress</div><div class="line">Reassignment of partition [countly_metrics,7] completed successfully</div><div class="line">Reassignment of partition [countly_imp,4] is still <span class="keyword">in</span> progress</div><div class="line">Reassignment of partition [countly_apppush,10] completed successfully</div><div class="line">Reassignment of partition [countly_imp,5] is still <span class="keyword">in</span> progress</div><div class="line">.....</div></pre></td></tr></table></figure><p>注意：在迁移过程中不能人为的结束或停止kafka服务，不然会有数据不一致的问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;kafka的扩容难点：&quot;&gt;&lt;a href=&quot;#kafka的扩容难点：&quot; class=&quot;headerlink&quot; title=&quot;kafka的扩容难点：&quot;&gt;&lt;/a&gt;kafka的扩容难点：&lt;/h4&gt;&lt;p&gt;1）主要在于增加机器之后，数据需要rebalance到新增的空闲节点
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>ZABBIX monitoring Flume</title>
    <link href="http://blog.yancy.cc/2017/09/21/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/Zabbix/ZABBIX%20monitoring%20Flume/"/>
    <id>http://blog.yancy.cc/2017/09/21/性能监控/Zabbix/ZABBIX monitoring Flume/</id>
    <published>2017-09-21T10:42:58.000Z</published>
    <updated>2017-11-30T08:04:27.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ZABBIX-monitoring-Flume"><a href="#ZABBIX-monitoring-Flume" class="headerlink" title="ZABBIX monitoring Flume"></a>ZABBIX monitoring Flume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Flume本身提供了http, ganglia的监控服务，而我们目前主要使用zabbix做监控。因此，我们为Flume添加了zabbix监控模块，和sa的监控服务无缝融合。</div><div class="line">另一方面，净化Flume的metrics。只将我们需要的metrics发送给zabbix，避免 zabbix server造成压力。目前我们最为关心的是Flume能否及时把应用端发送过来的日志写到Hdfs上， 对应关注的metrics为：</div><div class="line">Source : 接收的event数和处理的event数</div><div class="line">Channel : Channel中拥堵的event数</div><div class="line">Sink : 已经处理的event数</div></pre></td></tr></table></figure><a id="more"></a><h5 id="zabbix安装-amp-JVM性能监控"><a href="#zabbix安装-amp-JVM性能监控" class="headerlink" title="zabbix安装&amp;JVM性能监控"></a>zabbix安装&amp;JVM性能监控</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">zabbix安装</div><div class="line">http://my.oschina.net/yunnet/blog/173161</div><div class="line"></div><div class="line">JDK1.8</div><div class="line">[jollybi@countly1 conf]$ java -version</div><div class="line">java version <span class="string">"1.8.0_65"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_65-b17)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#JVM性能监控</span></div><div class="line">Young GC  counts</div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jstat  -gcutil 87007 | tail -1 | awk <span class="string">'&#123;print  $6&#125;'</span></div><div class="line">95.16</div><div class="line"></div><div class="line">Full GC counts</div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jstat  -gcutil 87007 | tail -1 | awk <span class="string">'&#123;print  $8&#125;'</span></div><div class="line">436.252</div><div class="line"></div><div class="line">JVM total  memory usage</div><div class="line">/usr/<span class="built_in">local</span>/jdk/bin/jmap -histo $(pgrep java)|grep Total | sed -n <span class="string">'$p'</span> | awk <span class="string">'&#123;print  $3&#125;'</span></div><div class="line"></div><div class="line"></div><div class="line">JVM total  instances usage</div><div class="line"> /usr/<span class="built_in">local</span>/jdk/bin/jmap -histo $(pgrep java)|grep Total | sed -n <span class="string">'$p'</span> | awk <span class="string">'&#123;print  $2&#125;'</span></div></pre></td></tr></table></figure><h5 id="flume应用参数监控"><a href="#flume应用参数监控" class="headerlink" title="flume应用参数监控"></a>flume应用参数监控</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">启动时加上JSON repoting参数,这样就可以通过http://localhost:34545/metrics访问</div><div class="line">bin/flume-ng agent --conf conf --conf-file conf/flume-conf-test.properties --name agent -Dflume.root.logger=INFO,console -Dflume.monitoring.type=http -Dflume.monitoring.port=34545 &amp;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[root@localhost apache-flume-1.8.0-bin]<span class="comment"># curl http://localhost:34545/metrics 2&gt;/dev/null|sed -e  's/\([,]\)\s*/\1\n/g' -e 's/[&#123;&#125;]/\n/g' -e 's/[",]//g'</span></div><div class="line"></div><div class="line">SOURCE.source1:</div><div class="line">EventReceivedCount:4871</div><div class="line">AppendBatchAcceptedCount:52</div><div class="line">Type:SOURCE</div><div class="line">EventAcceptedCount:4871</div><div class="line">AppendReceivedCount:0</div><div class="line">StartTime:1511251310062</div><div class="line">OpenConnectionCount:0</div><div class="line">AppendAcceptedCount:0</div><div class="line">AppendBatchReceivedCount:52</div><div class="line">StopTime:0</div><div class="line"></div><div class="line">SINK.sink1:</div><div class="line">ConnectionCreatedCount:0</div><div class="line">BatchCompleteCount:0</div><div class="line">BatchEmptyCount:43</div><div class="line">EventDrainAttemptCount:0</div><div class="line">StartTime:1511251311047</div><div class="line">BatchUnderflowCount:1</div><div class="line">ConnectionFailedCount:0</div><div class="line">ConnectionClosedCount:0</div><div class="line">Type:SINK</div><div class="line">RollbackCount:0</div><div class="line">EventDrainSuccessCount:4871</div><div class="line">KafkaEventSendTimer:24748</div><div class="line">StopTime:0</div><div class="line"></div><div class="line">CHANNEL.channel1:</div><div class="line">ChannelCapacity:1000</div><div class="line">ChannelFillPercentage:0.0</div><div class="line">Type:CHANNEL</div><div class="line">ChannelSize:0</div><div class="line">EventTakeSuccessCount:4871</div><div class="line">EventTakeAttemptCount:4915</div><div class="line">StartTime:1511251309391</div><div class="line">EventPutAttemptCount:4871</div><div class="line">EventPutSuccessCount:4871</div><div class="line">StopTime:0</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/opt/jdk1.8.0_101/bin/jstat</div></pre></td></tr></table></figure><h5 id="配置监控flume的脚本文件"><a href="#配置监控flume的脚本文件" class="headerlink" title="配置监控flume的脚本文件"></a>配置监控flume的脚本文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">vim /etc/zabbix/monitor_flume.sh</div><div class="line">event=EventDrainSuccessCount</div><div class="line"><span class="comment">#curl  http://localhost:34545/metrics 2&gt;/dev/null|sed -e 's/\([,]\)\s*/\1\n/g' -e  's/[&#123;&#125;]/\n/g' -e 's/[",]//g' |grep $1|awk -F: '&#123;print $2&#125;'</span></div><div class="line"><span class="keyword">function</span> EventDrainSuccessCount  &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep <span class="variable">$event</span>|awk -F: <span class="string">'&#123;print $2&#125;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> StartTime  &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep StartTim |awk -F: <span class="string">'&#123;print $2&#125;'</span> |sed -n <span class="string">"2p"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Total &#123;</div><div class="line">curl  http://localhost:34545/metrics 2&gt;/dev/null|sed <span class="_">-e</span> <span class="string">'s/\([,]\)\s*/\1\n/g'</span> <span class="_">-e</span>  <span class="string">'s/[&#123;&#125;]/\n/g'</span> <span class="_">-e</span> <span class="string">'s/[",]//g'</span> |grep Total|awk -F: <span class="string">'&#123;print $2&#125;'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#Run the requested function</span></div><div class="line"><span class="variable">$1</span></div></pre></td></tr></table></figure><h5 id="在zabbix-agent配置文件进行部署"><a href="#在zabbix-agent配置文件进行部署" class="headerlink" title="在zabbix agent配置文件进行部署"></a>在zabbix agent配置文件进行部署</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim zabbix_flume_jdk.conf</div><div class="line">UserParameter=ygc.counts,sudo /opt/jdk1.8.0_101/bin/jstat -gcutil $(pgrep java|head -1)|tail -1|awk  <span class="string">'&#123;print $6&#125;'</span></div><div class="line">UserParameter=fgc.counts,sudo /opt/jdk1.8.0_101/bin/jstat  -gcutil $(pgrep java|head -1)|tail -1|awk  <span class="string">'&#123;print $8&#125;'</span></div><div class="line">UserParameter=jvm.memory.usage,sudo /opt/jdk1.8.0_101/bin/jmap -histo $(pgrep java|sed -n <span class="string">'$p'</span>)|grep Total | sed -n <span class="string">'$p'</span> |awk  <span class="string">'&#123;print $3&#125;'</span></div><div class="line">UserParameter=jvm.instances.usage,sudo /opt/jdk1.8.0_101/bin/jmap -histo $(pgrep java|sed -n <span class="string">'$p'</span>)|grep Total | sed -n <span class="string">'$p'</span> |awk  <span class="string">'&#123;print $2&#125;'</span></div><div class="line">UserParameter=flume.monitor[*],sudo /bin/bash /etc/zabbix/monitor_flume.sh <span class="variable">$1</span></div></pre></td></tr></table></figure><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ZABBIX-monitoring-Flume.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ZABBIX-monitoring-Flume1.png" alt=""></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ZABBIX-monitoring-Flume&quot;&gt;&lt;a href=&quot;#ZABBIX-monitoring-Flume&quot; class=&quot;headerlink&quot; title=&quot;ZABBIX monitoring Flume&quot;&gt;&lt;/a&gt;ZABBIX monitoring Flume&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Flume本身提供了http, ganglia的监控服务，而我们目前主要使用zabbix做监控。因此，我们为Flume添加了zabbix监控模块，和sa的监控服务无缝融合。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;另一方面，净化Flume的metrics。只将我们需要的metrics发送给zabbix，避免 zabbix server造成压力。目前我们最为关心的是Flume能否及时把应用端发送过来的日志写到Hdfs上， 对应关注的metrics为：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Source : 接收的event数和处理的event数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Channel : Channel中拥堵的event数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sink : 已经处理的event数&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="monitoring" scheme="http://blog.yancy.cc/categories/monitoring/"/>
    
    
      <category term="Zabbix monitoring" scheme="http://blog.yancy.cc/tags/Zabbix-monitoring/"/>
    
  </entry>
  
  <entry>
    <title>KafKa不懂就学就问就解答笔记</title>
    <link href="http://blog.yancy.cc/2017/09/11/Bigdata-hadoop/Kafka/KafKa%E4%B8%8D%E6%87%82%E5%B0%B1%E5%AD%A6%E5%B0%B1%E9%97%AE%E5%B0%B1%E8%A7%A3%E7%AD%94%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.yancy.cc/2017/09/11/Bigdata-hadoop/Kafka/KafKa不懂就学就问就解答笔记/</id>
    <published>2017-09-11T03:22:00.000Z</published>
    <updated>2017-11-21T06:46:03.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka不懂就学笔记"><a href="#kafka不懂就学笔记" class="headerlink" title="kafka不懂就学笔记"></a>kafka不懂就学笔记</h2><h5 id="1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗"><a href="#1-部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗" class="headerlink" title="1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?"></a>1. 部署生产环境，打算部署三个broker实例，但zookeeper部署一个可以吗?</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">答案：可以是可以，但为了容错还是部署zookeeper集群比较好。broker和zookeeper的对应比例倒是没什么，都是独立集群。</div></pre></td></tr></table></figure><h5 id="2-kafka集群为什么需要zookeeper来配合？"><a href="#2-kafka集群为什么需要zookeeper来配合？" class="headerlink" title="2. kafka集群为什么需要zookeeper来配合？"></a>2. kafka集群为什么需要zookeeper来配合？</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">答案：zookeeper 是作为性能协调工具的角色存在。存储着你Kafka服务的一些些元数据（partitions、offset等等）。zookeeper集群的作用在于保证Zookeeper服务的高可用。因此你可以根据你的需要来选择是否构建zookeeper集群。</div></pre></td></tr></table></figure><h5 id="3-查看kafka-topic-消费记录报错WARN-Session-0x0-for-server-null-unexpected-error-closing-socket-connection-and-attempting-reconnect-org-apache-zookeeper-ClientCnxn"><a href="#3-查看kafka-topic-消费记录报错WARN-Session-0x0-for-server-null-unexpected-error-closing-socket-connection-and-attempting-reconnect-org-apache-zookeeper-ClientCnxn" class="headerlink" title="3. 查看kafka topic 消费记录报错WARN Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)"></a>3. 查看kafka topic 消费记录报错WARN Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)</h5><p>java.net.ConnectException: Connection timed out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">问题：</div><div class="line">1.是kafka连不上zookeeper了。请检查 zk 集群是否正常能Telnet，kafka集群是否正常。</div><div class="line">2.检查server.properties 中zookeeper.connect是否配置正确，如果都没有问题，重新启动服务。</div></pre></td></tr></table></figure><h5 id="4-kafka-支持压缩传输吗？"><a href="#4-kafka-支持压缩传输吗？" class="headerlink" title="4. kafka 支持压缩传输吗？"></a>4. kafka 支持压缩传输吗？</h5><h5 id="5-Kafka-如何在开启数据压缩的情况下-consumer维护自己的offset"><a href="#5-Kafka-如何在开启数据压缩的情况下-consumer维护自己的offset" class="headerlink" title="5. Kafka 如何在开启数据压缩的情况下, consumer维护自己的offset?"></a>5. Kafka 如何在开启数据压缩的情况下, consumer维护自己的offset?</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">问题：</div><div class="line">kafka这边数据传输消费跨aws机房较慢。会有网络瓶颈,我们kafka在国外的一dalasi机房，消费端在dalasi。</div><div class="line"></div><div class="line">官网解答：</div><div class="line">Offset management on the consumer</div><div class="line"></div><div class="line">The data received by a consumer <span class="keyword">for</span> a topic might contain both compressed as well as uncompressed messages. The consumer iterator transparently decompresses compressed data and only returns an uncompressed message. The offset maintenance <span class="keyword">in</span> the consumer gets a little tricky. In the zookeeper consumer, the consumed offset is updated each time a message is returned. This consumed offset should be a valid fetch offset <span class="keyword">for</span> correct failure recovery. Since data is stored <span class="keyword">in</span> compressed format on the broker, valid fetch offsets are the compressed message boundaries. Hence, <span class="keyword">for</span> compressed data, the consumed offset will be advanced one compressed message at a time. This has the side effect of possible duplicates <span class="keyword">in</span> the event of a consumer failure. For uncompressed data, consumed offset will be advanced one message at a time.</div><div class="line"></div><div class="line">这段话不是很理解: producer将100条message压缩成1条发给broker后, broker是如何存储的，并且consumer是如何取出这压缩后的数据, 并维护offset的?</div><div class="line"></div><div class="line"><span class="comment">### 消息压缩（message compression）</span></div><div class="line"></div><div class="line">考虑到网络带宽的瓶颈，Kafka提供了消息组压缩特性。Kafka通过递归消息集来支持高效压缩。高效压缩需要多个消息同时压缩，而不是对每个消息单独压缩。一批消息压缩在一起发送给broker。压缩消息集降低了网络的负载，但是解压缩也带来了一些额外的开销。消息集的解压缩是由broker处理消息offset时完成的。</div><div class="line"></div><div class="line">每个消息可通过一个不可比较的、递增的逻辑offset访问，这个逻辑offset在每个分区内是唯一的。接收到压缩数据后，lead broker将消息集解压缩，为每个消息分配offset。offset分配完成后，leader再次将消息集压缩并写入磁盘。</div><div class="line"></div><div class="line">在Kafka中，数据的压缩由producer完成，可使用GZIP或Snappy压缩协议。同时需要在producer端配置相关的参数：</div><div class="line"></div><div class="line">compression.codec：指定压缩格式，默认为none，可选的值还有gzip和snappy。</div><div class="line">compressed.topics：设置对指定的topic开启压缩，默认为null。当compression.codec不为none时，对指定的topic开启压缩；如果compressed.topics为null则对所有topic开启压缩。</div><div class="line">消息集ByteBufferMessageSet可能既包含压缩数据也包含非压缩数据，为了区分开来，消息头中添加了压缩属性字节。在该字节中，最低位的两位表示压缩格式，如果都是0表示非压缩数据。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kafka不懂就学笔记&quot;&gt;&lt;a href=&quot;#kafka不懂就学笔记&quot; class=&quot;headerlink&quot; title=&quot;kafka不懂就学笔记&quot;&gt;&lt;/a&gt;kafka不懂就学笔记&lt;/h2&gt;&lt;h5 id=&quot;1-部署生产环境，打算部署三个broker实例，但zook
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存</title>
    <link href="http://blog.yancy.cc/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper%E9%9B%86%E7%BE%A4%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E5%92%8C%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%20/"/>
    <id>http://blog.yancy.cc/2017/08/27/Bigdata-hadoop/zookeeper/Bigdata-Zookeeper集群日志配置详解和清理自定义启动内存 /</id>
    <published>2017-08-27T06:46:00.000Z</published>
    <updated>2017-09-26T09:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Zookeeper集群日志配置详解和清理自定义启动内存"><a href="#Zookeeper集群日志配置详解和清理自定义启动内存" class="headerlink" title="Zookeeper集群日志配置详解和清理自定义启动内存"></a>Zookeeper集群日志配置详解和清理自定义启动内存</h4><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>搭建zookeeper和kafka集群运行大数据处理数据消费，公司dubbo使用zookeeper做服务端的服务发现管理及配置中心，在使用时都出现过由于zk的日志大小过大塞满磁盘的情况 ，遇到了Zookeeper日志问题输出路径的问题, 发现zookeeper设置log4j.properties不能解决日志路径问题, 发现解决方案如下。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zookeeper_cartoon.jpg" alt=""></figure></p><h3 id="zookeeper日志说明"><a href="#zookeeper日志说明" class="headerlink" title="zookeeper日志说明"></a>zookeeper日志说明</h3><p>ZooKeeper使用<code>SLF4J(the Simple Logging Facade for Java)</code>作为日志的抽象层，默认使用<code>Log4J</code>来做实际的日志工作。使用2层日志抽象看起来真是够呛，这里简要的说明如何来配置<code>Log4J</code>。尽管Log4J非常灵活且强大，但它也有一些复杂，可以用一整本书来描述它，这里只是简要的介绍一下基本的用法。</p><a id="more"></a><p>Log4J的配置文件名为<code>log4j.properties</code>，从classpath中查找。如果没有找到log4j.properties文件，会输出如下警告信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">log</span>4j:WARN No appenders could be found <span class="keyword">for</span> logger (org.apache.zookeeper.serv ...  </div><div class="line"><span class="built_in">log</span>4j:WARN Please initialize the <span class="built_in">log</span>4j system properly.</div></pre></td></tr></table></figure><p>它说的是所有后续的日志消息会被丢弃，通常<code>log4j.properties</code>文件会放在<code>conf</code>文件夹，并放在<code>classpath</code>下。<br>来看看<code>ZooKeeper</code>使用的<code>log4j.properties</code>的主要部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[jollybi@kafka2 conf]$ cat <span class="built_in">log</span>4j.properties | grep -Pv <span class="string">"^$|^#"</span></div><div class="line">zookeeper.root.logger=INFO, CONSOLE  <span class="comment">#（1）</span></div><div class="line">zookeeper.console.threshold=INFO</div><div class="line">zookeeper.log.dir=.</div><div class="line">zookeeper.log.file=zookeeper.log</div><div class="line">zookeeper.log.threshold=DEBUG</div><div class="line">zookeeper.tracelog.dir=.                                                                     </div><div class="line">zookeeper.tracelog.file=zookeeper_trace.log</div><div class="line"><span class="built_in">log</span>4j.rootLogger=<span class="variable">$&#123;zookeeper.root.logger&#125;</span> <span class="comment">#（2）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender  <span class="comment">#（3）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.Threshold=<span class="variable">$&#123;zookeeper.console.threshold&#125;</span> <span class="comment">#（4）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout <span class="comment">#（5）</span></div><div class="line"><span class="built_in">log</span>4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender <span class="comment">#（6）</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.Threshold=<span class="variable">$&#123;zookeeper.log.threshold&#125;</span> <span class="comment">#（7）</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.File=<span class="variable">$&#123;zookeeper.log.dir&#125;</span>/<span class="variable">$&#123;zookeeper.log.file&#125;</span></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.MaxFileSize=10MB</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE=org.apache.log4j.FileAppender</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.Threshold=TRACE</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.File=<span class="variable">$&#123;zookeeper.tracelog.dir&#125;</span>/<span class="variable">$&#123;zookeeper.tracelog.file&#125;</span></div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout</div><div class="line"><span class="built_in">log</span>4j.appender.TRACEFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L][%x] - %m%n</div></pre></td></tr></table></figure><ul><li><p>(1) <code>zookeeper.root.logger=INFO, CONSOLE</code><br>第一组设置以<code>zookeeper</code>开头，它们实际上是<code>Java system property</code>，可以被<code>-D</code>形式的命令行参数覆盖。<br>第一行配置了日志级别，默认的设置是说在INFO级别以下的日志会被丢弃，并且日志会使用<code>CONSOLE appender</code>输出。你可以指定多个<code>appender</code>，例如如果你想使用<code>CONSOLE appender</code>和<code>ROLLINGFILE appender</code>输出日志，那么可以配置<code>zookeeper.logger</code>为<code>INFO,CONSOLE,ROLLINGFILE</code>。</p></li><li><p>(2) <code>rootLogger</code>处理所有日志的<code>logger</code>，因为我们没有定义其他<code>logger</code>。</p></li><li><p>(3) <code>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</code>这一行把CONSOLE appender和实际上处理日志输出的类绑定在一起，这里是ConsoleAppender类。</p></li><li><p>(4) <code>appender</code>也可以过滤日志。这一行将过滤任何在INFO级别之下的日志，因为这是在<code>zookeeper.root.logger设置的threshold</code>。</p></li><li><p>(5) <code>appender</code>使用一个布局(layout)类在输出前对日志进行格式化。我们使用pattern layout来记录日志的级别，日期，线程信息和调用位置信息以及消息本身。</p></li><li><p>(6) RollingFileAppender实现了rolling日志文件的功能，而不是持续的写到一个单独的文件或者控制台。如果rootLogger没有关联ROLLINGFILE，则此appender会被忽略。</p></li><li><p>(7) <code>ROLLINGFILE</code>的threshold设置成<code>DEBUG</code>。因为<code>rootLogger</code>过滤了所有在<code>INFO</code>级别之下的日志，没有DEBUG日志会输出到<code>ROLLINGFILE</code>。如果你想要看到<code>DEBUG</code>日志，你必须把<code>zookeeper.root.logger</code>从<code>INFO改成DEBUG</code>。</p></li></ul><p>打日志会影响到进程的性能，尤其是在DEBUG级别下。同时日志会提供有价值的信息为诊断错误提供线索。一个平衡性能开销的有效方式是把appender的threshold设成DEBUG，并把rootLogger设成WARN级别，这在一般的情况都适用，一般只需要关注WARNING和它之上的日志。当你需要诊断问题时可以使用JMX动态设置为INFO或DEBUG级别，这样可以更方便定位问题。</p><h3 id="快照事物日志-修改日志输出目录"><a href="#快照事物日志-修改日志输出目录" class="headerlink" title="快照事物日志,修改日志输出目录"></a>快照事物日志,修改日志输出目录</h3><p>之前出现<code>zookeeper</code>在bin目录下出现了<code>zookeeper.out</code>的日志文件，经分析发现此文件是由于<code>nohup</code>命令打印的控制台日志。</p><p>但是，我们在<code>zoo.cfg</code>配置文件中，对日志文件进行了配置（截取部分）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dataDir=/data/tools/zookeeper-3.4.5/tmp</div><div class="line">dataLogDir=/data/tools/zookeeper-3.4.5/tmp/logs</div></pre></td></tr></table></figure><p>其中，<code>dataDir和dataLogDir</code>是针对数据信息及数据信息日志的位置配置。但是在zookeeper内部集成了<code>log4j.properties</code>（对应配置文件在conf路径下）。</p><h3 id="参考log4j配置说明"><a href="#参考log4j配置说明" class="headerlink" title="参考log4j配置说明"></a>参考log4j配置说明</h3><p>打开<code>log4j.properties</code>文件，我们会发现有这样的配置，它在说明关于<code>zookeeper</code>本身的一些默认设置，但是可以被系统配置文件所覆盖。那么，在<code>log4j</code>中，<code>root是log4j</code>记录的原始起点，而这部分参数又可以被系统修改，那么系统配置在什么地方呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Define some default values that can be overridden by system properties</span></div><div class="line">zookeeper.root.logger=INFO, CONSOLE</div><div class="line">zookeeper.console.threshold=INFO</div><div class="line">zookeeper.log.dir=.</div><div class="line">zookeeper.log.file=zookeeper.log</div><div class="line">zookeeper.log.threshold=DEBUG</div><div class="line">zookeeper.tracelog.dir=.</div><div class="line">zookeeper.tracelog.file=zookeeper_trace.log</div></pre></td></tr></table></figure><p>zk日志.out及log4j日志路径配置 ：首先修改<code>bin/zkEnv.sh</code>，配置<code>ZOO_LOG_DIR</code>的环境变量，<code>ZOO_LOG_DIR</code>是zookeeper日志输出目录，<code>ZOO_LOG4J_PROP</code>是log4j日志输出的配置：</p><ul><li>默认配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG_DIR=<span class="string">"."</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG4J_PROP=<span class="string">"INFO,CONSOLE"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><ul><li>生产环境修改：</li></ul><p>在zk目录下面创建logs目录 给予bi组操作权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /data/tools/zookeeper-3.4.5/logs/</div><div class="line">sudo chown -R jollybi:jollybi /data/tools/zookeeper-3.4.5/logs/</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG_DIR=<span class="string">"<span class="variable">$ZOOBINDIR</span>/../logs"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> = <span class="string">"x"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    ZOO_LOG4J_PROP=<span class="string">"INFO,ROLLINGFILE"</span>  //ROLLINGFILE —— 日志轮转，避免单一文件过大</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h3 id="Zk设置定期自动清理日志"><a href="#Zk设置定期自动清理日志" class="headerlink" title="Zk设置定期自动清理日志."></a>Zk设置定期自动清理日志.</h3><p>从<code>3.4.0</code>开始，zookeeper提供了自动清理<code>snapshot</code>和事务日志的功能，通过配置 <code>autopurge.snapRetainCount</code> 和 <code>autopurge.purgeInterval</code> 这两个参数能够实现定时清理了。这两个参数都是在zoo.cfg中配置的：</p><ul><li>在zoo.cfg中配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">autopurge.purgeInterval: 24*2     </div><div class="line"><span class="comment">##这个参数指定了清理频率，单位是小时。默认是0，表示不开启自己清理功能。</span></div><div class="line">autopurge.snapRetainCount:  2</div><div class="line"><span class="comment">##这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。</span></div></pre></td></tr></table></figure><h3 id="配置zookeeper-out的位置及log4j日志输出"><a href="#配置zookeeper-out的位置及log4j日志输出" class="headerlink" title="配置zookeeper.out的位置及log4j日志输出"></a>配置zookeeper.out的位置及log4j日志输出</h3><h6 id="1-zookeeper-out由nohup的输出，也就是zookeeper的stdout和stdeer输出。"><a href="#1-zookeeper-out由nohup的输出，也就是zookeeper的stdout和stdeer输出。" class="headerlink" title="1. zookeeper.out由nohup的输出，也就是zookeeper的stdout和stdeer输出。"></a>1. <code>zookeeper.out</code>由nohup的输出，也就是<code>zookeeper</code>的<code>stdout和stdeer</code>输出。</h6><p>在zkServer.sh中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ ! -w <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span> ] ; <span class="keyword">then</span>  </div><div class="line">mkdir -p <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span>  </div><div class="line"><span class="keyword">fi</span>  </div><div class="line">  </div><div class="line">_ZOO_DAEMON_OUT=<span class="string">"<span class="variable">$ZOO_LOG_DIR</span>/zookeeper.out"</span>  <span class="comment">#日志输出文件路径</span></div><div class="line"></div><div class="line"><span class="comment">#nohup日志输出</span></div><div class="line">nohup <span class="variable">$JAVA</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \  </div><div class="line">-cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> &gt; <span class="string">"<span class="variable">$_ZOO_DAEMON_OUT</span>"</span> 2&gt;&amp;1 &lt; /dev/null &amp;</div></pre></td></tr></table></figure><h6 id="2-log4j日志输出配置-conf-log4j-properties中："><a href="#2-log4j日志输出配置-conf-log4j-properties中：" class="headerlink" title="2.log4j日志输出配置 conf/log4j.properties中："></a>2.log4j日志输出配置 conf/log4j.properties中：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add ROLLINGFILE to rootLogger to get log file output  </span></div><div class="line"><span class="comment">#    Log DEBUG level and above messages to a log file  </span></div><div class="line"></div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender  //日志轮转，DaliyRollingFileAppender —— 按天轮转</div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.Threshold=<span class="variable">$&#123;zookeeper.log.threshold&#125;</span>  </div><div class="line"><span class="built_in">log</span>4j.appender.ROLLINGFILE.File=<span class="variable">$&#123;zookeeper.log.dir&#125;</span>/<span class="variable">$&#123;zookeeper.log.file&#125;</span></div></pre></td></tr></table></figure><p>轮转前提需要将(1)里bin/zkEnv.sh中的轮转配置好</p><p>4.zk事务日志查看</p><p>zookeeper的事务日志通过zoo.cfg文件中的dataLogDir配置项配置：</p><pre><code># the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/tmp/zookeeper    </code></pre><p>查看事务日志方法：<br>(需要下载slf4j-api-1.6.1.jar包) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -classpath .:slf4j-api-1.6.1.jar:zookeeper-3.4.5.jar org.apache.zookeeper.server.LogFormatter /tmp/zookeeper/version-2/xxx.xxx</div></pre></td></tr></table></figure><h3 id="怎么自定义zookeeper的启动内存"><a href="#怎么自定义zookeeper的启动内存" class="headerlink" title="怎么自定义zookeeper的启动内存"></a>怎么自定义zookeeper的启动内存</h3><p>运行zookeeper时，使用jmap -heap <pid> 命令查看内存情况如下:</pid></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zookeeper_01.png" alt=""></figure></p><p>解决：分配内存文件路径：<code>zookeeper/bin/zkEnv.sh</code></p><p>该文件已经明确说明有独立JVM内存的设置文件，路径是<code>zookeeper/conf/java.env</code><br>安装的时候这个路径下没有有<code>java.env</code>文件，需要自己新建一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim java.env</span></div><div class="line"></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk</div><div class="line"><span class="comment"># heap size MUST be modified according to cluster environment</span></div><div class="line"><span class="built_in">export</span> JVMFLAGS=<span class="string">"-Xms4g -Xmx4g <span class="variable">$JVMFLAGS</span>"</span></div><div class="line"></div><div class="line">对于内存的分配，还是根据项目和机器情况而定。如果内存够用，适当的大点可以提升zk性能。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Zookeeper集群日志配置详解和清理自定义启动内存&quot;&gt;&lt;a href=&quot;#Zookeeper集群日志配置详解和清理自定义启动内存&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper集群日志配置详解和清理自定义启动内存&quot;&gt;&lt;/a&gt;Zookeeper集群日志配置详解和清理自定义启动内存&lt;/h4&gt;&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;搭建zookeeper和kafka集群运行大数据处理数据消费，公司dubbo使用zookeeper做服务端的服务发现管理及配置中心，在使用时都出现过由于zk的日志大小过大塞满磁盘的情况 ，遇到了Zookeeper日志问题输出路径的问题, 发现zookeeper设置log4j.properties不能解决日志路径问题, 发现解决方案如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/zookeeper_cartoon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;zookeeper日志说明&quot;&gt;&lt;a href=&quot;#zookeeper日志说明&quot; class=&quot;headerlink&quot; title=&quot;zookeeper日志说明&quot;&gt;&lt;/a&gt;zookeeper日志说明&lt;/h3&gt;&lt;p&gt;ZooKeeper使用&lt;code&gt;SLF4J(the Simple Logging Facade for Java)&lt;/code&gt;作为日志的抽象层，默认使用&lt;code&gt;Log4J&lt;/code&gt;来做实际的日志工作。使用2层日志抽象看起来真是够呛，这里简要的说明如何来配置&lt;code&gt;Log4J&lt;/code&gt;。尽管Log4J非常灵活且强大，但它也有一些复杂，可以用一整本书来描述它，这里只是简要的介绍一下基本的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata" scheme="http://blog.yancy.cc/categories/Bigdata/"/>
    
    
      <category term="ZooKeeper" scheme="http://blog.yancy.cc/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Monitor Kafka with Prometheus +Grafana</title>
    <link href="http://blog.yancy.cc/2017/08/04/Bigdata-hadoop/Kafka/Monitor%20Kafka%20with%20Prometheus%20+Grafana/"/>
    <id>http://blog.yancy.cc/2017/08/04/Bigdata-hadoop/Kafka/Monitor Kafka with Prometheus +Grafana/</id>
    <published>2017-08-04T03:22:00.000Z</published>
    <updated>2017-10-20T06:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Monitoring-Kafka-with-Prometheus"><a href="#Monitoring-Kafka-with-Prometheus" class="headerlink" title="Monitoring Kafka with Prometheus"></a>Monitoring Kafka with Prometheus</h3><p>We’ve previously looked at how to monitor Cassandra with <a href="https://www.robustperception.io/monitoring-cassandra-with-prometheus/" target="_blank" rel="external">Prometheus</a>. Let’s see the process for getting metrics from another popular Java application, <a href="https://kafka.apache.org/" target="_blank" rel="external">Kafka.</a></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-overview.png" alt=""></figure></p><a id="more"></a><p>we download Kafka, the JMX exporter and the config file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">wget http://ftp.heanet.ie/mirrors/www.apache.org/dist/kafka/0.10.1.0/kafka_2.11-0.10.1.0.tgz</div><div class="line">tar -xzf kafka _ *。tgz</div><div class="line"><span class="built_in">cd</span> kafka_ *</div><div class="line"></div><div class="line">wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.6/jmx_prometheus_javaagent-0.6.jar</div><div class="line">wget https://raw.githubusercontent.com/prometheus/jmx_exporter/master/example_configs/kafka-0-8-2.yml</div><div class="line"></div><div class="line">Download the good files and put them under the Kafka directory:</div><div class="line">[hadoop@hadoop6 kafka_2.10-0.9.0.1]$ ll</div><div class="line">drwxr-xr-x 3 hadoop hadoop    4096 9月  27 13:34 bin</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 9月  27 21:18 config</div><div class="line">-rw-rw-r-- 1 hadoop hadoop 1225418 2月   5 2016 jmx_prometheus_javaagent-0.6.jar</div><div class="line">-rw-rw-r-- 1 hadoop hadoop    2824 9月  26 17:48 kafka-0-8-2.yml</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 9月  27 13:31 libs</div><div class="line">-rw-r--r-- 1 hadoop hadoop   11358 2月  12 2016 LICENSE</div><div class="line">drwxrwxr-x 2 hadoop hadoop  266240 9月  27 21:19 logs</div><div class="line">-rw-r--r-- 1 hadoop hadoop     162 2月  12 2016 NOTICE</div><div class="line">drwxrwxr-x 5 hadoop hadoop    4096 9月  27 15:56 prometheus-1.2.1.linux-amd64</div><div class="line">drwxr-xr-x 2 hadoop hadoop    4096 2月  12 2016 site-docs</div></pre></td></tr></table></figure><p>We start a Zookeeper (a Kafka dependency) and Kafka with the JMX exporter running as a Java agent:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">First step:</div><div class="line">Configure the zookeeper zoo.zoo.cfg port: 2181</div><div class="line">Start zookeeper:</div><div class="line">./zookeeper-3.4.6/bin/zkServer.sh start</div><div class="line"></div><div class="line">Second steps:</div><div class="line">Configuration modification: kafka_2.10-0.9.0.1/config/zookeeper.properties</div><div class="line">Port modification: 2182 <span class="keyword">do</span> not conflict with the zookeeper service port</div><div class="line"></div><div class="line"></div><div class="line">dataDir=/data2/zookeeper-3.4.6/zookeeper-data</div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line">clientPort=2181</div><div class="line"><span class="comment"># disable the per-ip limit on the number of connections since this is a non-production config</span></div><div class="line">maxClientCnxns=0</div><div class="line"></div><div class="line">./bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</div><div class="line"></div><div class="line">KAFKA_OPTS=<span class="string">"<span class="variable">$KAFKA_OPTS</span> -javaagent:<span class="variable">$PWD</span>/jmx_prometheus_javaagent-0.6.jar=7071:<span class="variable">$PWD</span>/kafka-0-8-2.yml"</span> \</div><div class="line">./bin/kafka-server-start.sh config/server.properties &amp;</div></pre></td></tr></table></figure><h4 id="If-you-visit-http-localhost-7071-metrics-you’ll-see-the-metrics"><a href="#If-you-visit-http-localhost-7071-metrics-you’ll-see-the-metrics" class="headerlink" title="If you visit http://localhost:7071/metrics you’ll see the metrics."></a>If you visit <a href="http://localhost:7071/metrics" target="_blank" rel="external">http://localhost:7071/metrics</a> you’ll see the metrics.</h4><p>Let’s setup a quick Prometheus server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/prometheus/prometheus/releases/download/v1.2.1/prometheus-1.2.1.linux-amd64.tar.gz</div><div class="line">tar -xzf prometheus-*.tar.gz</div><div class="line"><span class="built_in">cd</span> prometheus-*</div><div class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt; prometheus.yml</div><div class="line">global:</div><div class="line"> scrape_interval: 10s</div><div class="line"> evaluation_interval: 10s</div><div class="line">scrape_configs:</div><div class="line"> - job_name: <span class="string">'kafka'</span></div><div class="line">   static_configs:</div><div class="line">    - targets:</div><div class="line">      - localhost:7071</div><div class="line">EOF</div><div class="line">./prometheus</div></pre></td></tr></table></figure><p>Following run access: <a href="http://localhost:9090/graph" target="_blank" rel="external">http://localhost:9090/graph</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[hadoop@hadoop8 prometheus-1.2.1.linux-amd64]$ ./prometheus</div><div class="line">INFO[0000] Starting prometheus (version=1.2.1, branch=master, revision=dd66f2e94b2b662804b9aa1b6a50587b990ba8b7)  <span class="built_in">source</span>=main.go:75</div><div class="line">INFO[0000] Build context (go=go1.7.1, user=root@fd9b0daff6bd, date=20161010-15:58:23)  <span class="built_in">source</span>=main.go:76</div><div class="line">INFO[0000] Loading configuration file prometheus.yml     <span class="built_in">source</span>=main.go:247</div><div class="line">INFO[0000] Loading series map and head chunks...         <span class="built_in">source</span>=storage.go:354</div><div class="line">INFO[0000] 49 series loaded.                             <span class="built_in">source</span>=storage.go:359</div><div class="line">WARN[0000] No AlertManagers configured, not dispatching any alerts  <span class="built_in">source</span>=notifier.go:176</div><div class="line">INFO[0000] Listening on :9090                            <span class="built_in">source</span>=web.go:240</div><div class="line">INFO[0000] Starting target manager...                    <span class="built_in">source</span>=targetmanager.go:76</div></pre></td></tr></table></figure><p>The Prometheus platform monitors all data from the Kafka index:<br>This function is very powerful, late will explain what each representative means:</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-monitor02.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-monitor03.png" alt=""></figure></p><p>Install <a href="http://docs.grafana.org/installation/rpm/#install-stable" target="_blank" rel="external">open source Grafana monitoring</a>, combine <a href="https://prometheus.io/docs/visualization/grafana/" target="_blank" rel="external">prometheus.io</a> to obtain Prometheus platform data.</p><h3 id="Installing-Grafana"><a href="#Installing-Grafana" class="headerlink" title="Installing Grafana"></a>Installing Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Download and unpack Grafana from binary tar (adjust version as appropriate).</span></div><div class="line">curl -L -O https://grafanarel.s3.amazonaws.com/builds/grafana-2.5.0.linux-x64.tar.gz</div><div class="line">tar zxf grafana-2.5.0.linux-x64.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># Start Grafana.</span></div><div class="line"><span class="built_in">cd</span> grafana-2.5.0/</div><div class="line">./bin/grafana-server web</div></pre></td></tr></table></figure><h3 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h3><p>By default, Grafana will be listening on <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>. The default login is “admin” / “admin”.</p><h4 id="Creating-a-Prometheus-data-source"><a href="#Creating-a-Prometheus-data-source" class="headerlink" title="Creating a Prometheus data source"></a>Creating a Prometheus data source</h4><p>To create a Prometheus data source:</p><ol><li>Click on the Grafana logo to open the sidebar menu.</li><li>Click on “Data Sources” in the sidebar.</li><li>Click on “Add New”.</li><li>Select “Prometheus” as the type.</li><li>Set the appropriate Prometheus server URL (for example, <a href="http://localhost:9090/" target="_blank" rel="external">http://localhost:9090/</a>)</li><li>Adjust other data source settings as desired (for example, turning the proxy access off).</li><li>Click “Add” to save the new data source.</li><li>The following shows an example data source configuration:</li></ol><p>Reference address: <a href="https://prometheus.io/docs/visualization/grafana/" target="_blank" rel="external">GRAFANA SUPPORT FOR PROMETHEUS</a></p><p><figure class="figure"><img src="https://prometheus.io/assets/grafana_configuring_datasource-cb0e78b7cfa.png" alt=""></figure></p><p>Finally load the <a href="https://grafana.com/dashboards/721" target="_blank" rel="external">Kafka Overview</a> dashboard from grafana.net into your Grafana to get the above console!</p><p>If you want to run Kafka inside docker, there’s <a href="https://www.robustperception.io/monitoring-kafka-in-a-docker-container-using-prometheus/" target="_blank" rel="external">another blog post</a> covering that.</p><p>Reference address: <a href="https://www.robustperception.io/monitoring-kafka-with-prometheus/" target="_blank" rel="external">monitoring-kafka-with-prometheus</a></p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Monitoring-Kafka-with-Prometheus&quot;&gt;&lt;a href=&quot;#Monitoring-Kafka-with-Prometheus&quot; class=&quot;headerlink&quot; title=&quot;Monitoring Kafka with Prometheus&quot;&gt;&lt;/a&gt;Monitoring Kafka with Prometheus&lt;/h3&gt;&lt;p&gt;We’ve previously looked at how to monitor Cassandra with &lt;a href=&quot;https://www.robustperception.io/monitoring-cassandra-with-prometheus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prometheus&lt;/a&gt;. Let’s see the process for getting metrics from another popular Java application, &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kafka.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/kafka-overview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
      <category term="Prometheus" scheme="http://blog.yancy.cc/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="http://blog.yancy.cc/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Kafka-node模块实现调用js发送数据</title>
    <link href="http://blog.yancy.cc/2017/08/01/Bigdata-hadoop/Kafka/Kafka-node%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8js%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>http://blog.yancy.cc/2017/08/01/Bigdata-hadoop/Kafka/Kafka-node模块实现调用js发送数据/</id>
    <published>2017-08-01T06:46:00.000Z</published>
    <updated>2017-11-21T02:04:41.471Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/streams-interactive-queries-02.png" alt=""></figure></p><p>mongodb写到kafka 指定topic消费。为了保证数据稳定可靠性。<br>配合大数据在countly 使用开源<code>Kafka-node</code>是一个Node.js客户端 写js程序让countly三台集群分别数据到kafka 做新的topic主题备份。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install kafka-node</div></pre></td></tr></table></figure><p>进入kafka-node目录: vim kafka_test.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">var kafka = require(<span class="string">'kafka-node'</span>),</div><div class="line">HighLevelProducer = kafka.HighLevelProducer,</div><div class="line">    //Producer = kafka.Producer,</div><div class="line">    client = new kafka.Client(<span class="string">'169.44.62.139:2281,169.44.59.138:2281,169.44.62.137:2281'</span>),</div><div class="line">    //producer = new Producer(client);</div><div class="line">producer = new HighLevelProducer(client);</div><div class="line"></div><div class="line">console.log(<span class="string">'连接kafka中'</span>);</div><div class="line"></div><div class="line">var argv = &#123;</div><div class="line">    topic: <span class="string">"test1"</span></div><div class="line">&#125;;</div><div class="line">var topic = argv.topic || <span class="string">'test1'</span>;</div><div class="line">var p = argv.p || 0;</div><div class="line">var a = argv.a || 0;</div><div class="line">var producer = new HighLevelProducer(client, &#123;</div><div class="line">    requireAcks: 1,</div><div class="line">    partitionerType: 3</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(producer);</div><div class="line"></div><div class="line">producer.on(<span class="string">'ready'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    var args = &#123;</div><div class="line">        appid: <span class="string">'222-wx238c28839a133d0e'</span>,</div><div class="line">        createTime: <span class="string">'222-ddd'</span>,</div><div class="line">        toUserName: <span class="string">'222-wx238c28839a133d0e'</span>,</div><div class="line">        fromUserName: <span class="string">'222-wx238c28839a133d0e'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    producer.send([&#123;</div><div class="line">        topic: topic,</div><div class="line">        partition: p,</div><div class="line">        messages: [JSON.stringify(args)],</div><div class="line">        attributes: a</div><div class="line">    &#125;], <span class="keyword">function</span>(err, result) &#123;</div><div class="line">        console.log(err || result);</div><div class="line">        process.exit();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    console.log(args);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="官网地址：https-www-npmjs-com-package-kafka-node-install-kafka"><a href="#官网地址：https-www-npmjs-com-package-kafka-node-install-kafka" class="headerlink" title="官网地址：https://www.npmjs.com/package/kafka-node#install-kafka"></a>官网地址：<a href="https://www.npmjs.com/package/kafka-node#install-kafka" target="_blank" rel="external">https://www.npmjs.com/package/kafka-node#install-kafka</a></h4><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/streams-interactive-queries-02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;mongodb写到kafka 指定topic消费。为了保证数据稳定可靠性。&lt;br&gt;配合大数据在countly 使用开源&lt;code&gt;Kafka-node&lt;/code&gt;是一个Node.js客户端 写js程序让countly三台集群分别数据到kafka 做新的topic主题备份。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://blog.yancy.cc/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-Cloudera Manager5及CDH5安装指导</title>
    <link href="http://blog.yancy.cc/2017/07/29/Bigdata-hadoop/countly/Cloudera%20Manager5%E5%8F%8ACDH5%E5%AE%89%E8%A3%85%E6%8C%87%E5%AF%BC/"/>
    <id>http://blog.yancy.cc/2017/07/29/Bigdata-hadoop/countly/Cloudera Manager5及CDH5安装指导/</id>
    <published>2017-07-29T06:46:00.000Z</published>
    <updated>2017-09-27T17:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/Bigdata-Cloudera-Manager.png" alt=""></figure></p><h3 id="问题导读："><a href="#问题导读：" class="headerlink" title="问题导读："></a>问题导读：</h3><p>1.什么是cloudera CM 、CDH?<br>2.CDH、CM有哪些版本？<br>3.CDH、CM有哪些安装方式？<br>4.CDH如何开发？</p><a id="more"></a><h3 id="什么是CDH"><a href="#什么是CDH" class="headerlink" title="什么是CDH"></a>什么是CDH</h3><p>hadoop是一个开源项目，所以很多公司在这个基础进行商业化，Cloudera对hadoop做了相应的改变。<br>Cloudera公司的发行版，我们将该版本称为CDH。</p><p>很多新手问的最多的问题是，哪个是收费的，那个是免费的。<br>Cloudera Express版本是免费的<br>Cloudera Enterprise是需要购买注册码的</p><p>更多内容：<br>Cloudera Hadoop什么是CDH及CDH版本介绍 :<a href="http://www.aboutyun.com/thread-6788-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-6788-1-1.html</a> </p><p>CDH（Cloudera）与hadoop（apache）对比 : <a href="http://www.aboutyun.com/thread-9225-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-9225-1-1.html</a></p><p>大数据架构师基础：hadoop家族，Cloudera产品系列等各种技术 : <a href="http://www.aboutyun.com/thread-6842-1-1.html" target="_blank" rel="external">http://www.aboutyun.com/thread-6842-1-1.html</a> </p><h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera1.png" alt=""></figure></p><p><strong>主页：</strong><br><a href="https://www.cloudera.com/downloads/manager/5-12-0.html" target="_blank" rel="external">https://www.cloudera.com/downloads/manager/5-12-0.html</a></p><h3 id="CM-Cloudera-Manager-有三种安装方式："><a href="#CM-Cloudera-Manager-有三种安装方式：" class="headerlink" title="CM(Cloudera Manager)有三种安装方式："></a>CM(Cloudera Manager)有三种安装方式：</h3><p><strong>1.第一种使用cloudera-manager-installer.bin安装</strong></p><p>这种安装方式，只要从官网下载<code>cloudera-manager-installer.bin</code> 然后执行这个<code>bin</code>文件，剩下的就是等待下载和安装。但是这个时间不是一般的长，最好吃个饭，睡个觉，最后看到还在安装过程中。此帖安装步骤及遇到问题记录很详细，可参考<br><a href="http://www.aboutyun.com/thread-9303-1-1.html" target="_blank" rel="external">Cloudera Manager5及CDH5在线（cloudera-manager-installer.bin）安装详细文档</a><br><a href="http://www.aboutyun.com/thread-9075-1-1.html" target="_blank" rel="external">Cloudera Manager5及CDH5安装指导（终极在线安装）</a></p><h3 id="问题导读：-1"><a href="#问题导读：-1" class="headerlink" title="问题导读："></a>问题导读：</h3><p>1.Cloudera Manager5安装需要哪些环境要求？<br>2.哪些Linux系统上，可以安装Cloudera Manager5？<br>3.在安装cdh的过程中，该如何选择版本？</p><p><strong>安装环境要求</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">集群中的四台主机必须满足以下要求：</div><div class="line">主机必须至少有16 GB的RAM</div><div class="line">对于RAM，我们或许没有太多的概念，下面可以参考</div><div class="line">RAM容量是运行中的程序所占用的空间，他运行需要的空间、</div><div class="line">ROM容量是你的系统可以存放，占用的空间，你的所有系统文件，程序都在这里存放。</div><div class="line"></div><div class="line">必须使用root用户，或则使用sudo无密码访问</div><div class="line">（也就是说当你使用其它用户，使用sudo的时候，不能输入密码）</div><div class="line"></div><div class="line">如果使用root用户，必须使用相同的密码</div><div class="line">主机必须能上网，允许安装向导访问cdm.jollychic.com</div><div class="line">可以从下面选择一个系统</div><div class="line"></div><div class="line">RHEL-兼容系统</div><div class="line">Red Hat Enterprise Linux and CentOS 5, 64-bit</div><div class="line">Red Hat Enterprise Linux and CentOS 6, 64-bit</div><div class="line">Red Hat Enterprise Linux and CentOS 7 <span class="keyword">in</span> SE Linux Mode</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">SLES - SUSE Linux Enterprise Server 11, 64-bit. Service Pack 2或则更高版本. 更新存储库必须是激活的和 SUSE Linux Enterprise 软件开发包11 SP1 .</div><div class="line">Debian - Debian 7.0 and 7.1, 64-bit</div><div class="line">Ubuntu - Ubuntu 12.04, 64-bit</div><div class="line"></div><div class="line">如果要求不能上面满足，安装会不成功。关于Cloudera Manager安装选项和安装要求的详细信息可以查看Cloudera Manager安装向导（英文版）</div><div class="line">补充和强调一些内容</div><div class="line">1.关闭防火墙</div><div class="line">2.配置host，如下形式</div><div class="line">3.swapoff <span class="_">-a</span> 关闭swap分区</div><div class="line">添加开机启动生效：</div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</div></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">系统： CentOS Linux release 7.3.1611 (Core)  </div><div class="line">2台Namenode</div><div class="line">10台DataNode</div><div class="line">1台cdm 安装Cloudera Manager</div><div class="line">1台gateway</div></pre></td></tr></table></figure><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><ul><li>准备工作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">配置hosts</div><div class="line"></div><div class="line">14台服务器需要配置hostname及hosts如下</div><div class="line">（这里一定要配置正确否则，会面会出通信问题）</div><div class="line"></div><div class="line">vim /etc/hosts</div><div class="line">127.0.0.1 localhost.localdomain localhost</div><div class="line">10.155.90.132  cdm  cdm.jollychic.com</div><div class="line">10.155.90.134  gateway gateway.jollychic.com</div><div class="line">10.155.90.165  namenode1  namenode1.jollychic.com</div><div class="line">10.155.90.146  namenode2  namenode2.jollychic.com</div><div class="line">10.155.90.177  datanode1  datanode1.jollychic.com</div><div class="line">10.155.90.184  datanode2  datanode2.jollychic.com</div><div class="line">10.155.90.166  datanode3  datanode3.jollychic.com</div><div class="line">10.155.90.188  datanode4  datanode4.jollychic.com</div><div class="line">10.155.90.156  datanode5  datanode5.jollychic.com</div><div class="line">10.155.90.172  datanode6  datanode6.jollychic.com</div><div class="line">10.155.90.182  datanode7  datanode7.jollychic.com</div><div class="line">10.155.90.142  datanode8  datanode8.jollychic.com</div><div class="line">10.155.90.151  datanode9  datanode9.jollychic.com</div><div class="line">10.155.90.159  datanode10  datanode10.jollychic.com</div><div class="line"></div><div class="line">关闭SELinux</div><div class="line">[root@cdm ~]<span class="comment"># setenforce 0</span></div><div class="line">[root@cdm ~]<span class="comment"># getenforce</span></div><div class="line">Disabled</div></pre></td></tr></table></figure><ul><li>下载安装：</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">单击下载 Cloudera Express 或则 Download Cloudera Enterprise. 查看 Cloudera Express <span class="keyword">and </span>Cloudera Enterprise Features.</div><div class="line">选择注册和单击<span class="keyword">Submit </span>或则直接单击下载页链接（ download page），下载 cloudera-manager-installer.<span class="keyword">bin文件</span></div><div class="line"></div><div class="line"><span class="symbol">Pre</span>-requisites: <span class="keyword">multiple, </span>Internet-connected Linux machines, with SSH access, <span class="keyword">and </span>significant free <span class="meta">space</span> in /var <span class="keyword">and </span>/<span class="meta">opt</span>.</div><div class="line"></div><div class="line"><span class="number">1</span>. 下载cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">$ wget http://archive.cloudera.com/cm5/installer/latest/cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line"></div><div class="line"><span class="number">2</span>.改变 cloudera-manager-installer.<span class="keyword">bin </span>的执行权限</div><div class="line"></div><div class="line">$ chmod u+x cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">复制代码</div><div class="line"></div><div class="line"><span class="number">3</span>.执行 cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line"></div><div class="line">$ sudo ./cloudera-manager-installer.<span class="keyword">bin</span></div><div class="line">复制代码</div><div class="line"></div><div class="line"><span class="number">4</span>.按照cloudera-manager的README 来安装</div><div class="line"><span class="number">5</span>.阅读Cloudera Manager Express License，然后按照提示选择YES来确定接受授权（license）</div><div class="line"><span class="number">6</span>.读取 Oracle 二进制 <span class="meta">Code</span> 授权许可协议，然后安装 </div><div class="line"><span class="number">7</span>.当安装完成，Cloudera Manager 管理控制台会提供一个完成的url包括默认端口<span class="number">7180</span></div><div class="line"></div><div class="line">我这种方法是在线安装方式，就说直接用.<span class="keyword">bin让系统自动下载需要的jdk和cm管理包。 </span></div><div class="line">如果网络差建议用离线安装方式。</div></pre></td></tr></table></figure><p>先在本地搭建一个<a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_yumrepo_local_create.html" target="_blank" rel="external">Creating a Local Yum Repository:</a><br>下载独立的包路径：<a href="http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5/RPMS/x86_64/" target="_blank" rel="external">cm need package</a></p><p>安装完成以后服务也启动。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera2.png" alt=""></figure></p><p>这里显示安装成功，访问地址，如果离线安装不到这一步不能操作，会提示报错指示。先手动下载好包rpm安装上即可。</p><h4 id="安装目录详情："><a href="#安装目录详情：" class="headerlink" title="安装目录详情："></a>安装目录详情：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">默认安装目录：/opt/cloudera</div><div class="line">日志目录：/var/<span class="built_in">log</span>/cloudera-scm-server</div><div class="line">启动服务：[root@yancy cloudera-scm-server]<span class="comment"># /etc/init.d/cloudera-scm-server status</span></div><div class="line">cloudera-scm-server (pid  2723) 正在运行...</div></pre></td></tr></table></figure><h4 id="查看启动进程端口："><a href="#查看启动进程端口：" class="headerlink" title="查看启动进程端口："></a>查看启动进程端口：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cdm opt]<span class="comment"># netstat -ntulp | grep java</span></div><div class="line">tcp        0      0 0.0.0.0:7180            0.0.0.0:*               LISTEN      25780/java</div><div class="line">tcp        0      0 0.0.0.0:7182            0.0.0.0:*               LISTEN      25780/java   </div><div class="line"></div><div class="line">访问地址：http://cdm.jollychic.com:7180 </div><div class="line">登录Cloudera Manager Admin 控制</div><div class="line">Username: admin </div><div class="line">Password: admin.</div></pre></td></tr></table></figure><h3 id="使用Cloudera-Manager-向导安装和配置软件"><a href="#使用Cloudera-Manager-向导安装和配置软件" class="headerlink" title="使用Cloudera Manager 向导安装和配置软件"></a>使用Cloudera Manager 向导安装和配置软件</h3><h4 id="cloudera首页："><a href="#cloudera首页：" class="headerlink" title="cloudera首页："></a>cloudera首页：</h4><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera3.png" alt=""></figure></p><h5 id="1-添加服务器集群："><a href="#1-添加服务器集群：" class="headerlink" title="1. 添加服务器集群："></a>1. 添加服务器集群：</h5><p>在集群主机上安装和配置Cloudera Manager ，CDH，和管理服务软件包括以下三个主要步骤<br>选择 Cloudera Manager 版本 和指定主机</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera5.png" alt=""></figure></p><h5 id="2-选择免费版，add继续"><a href="#2-选择免费版，add继续" class="headerlink" title="2. 选择免费版，add继续"></a>2. 选择免费版，add继续</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera6.png" alt=""></figure></p><h5 id="3-显示的是安装Cloudera-Manager后面可以安装的服务的软件包"><a href="#3-显示的是安装Cloudera-Manager后面可以安装的服务的软件包" class="headerlink" title="3. 显示的是安装Cloudera Manager后面可以安装的服务的软件包"></a>3. 显示的是安装Cloudera Manager后面可以安装的服务的软件包</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera7.png" alt=""></figure></p><h5 id="4-这里需要说明的是指定主机安装有多种方式："><a href="#4-这里需要说明的是指定主机安装有多种方式：" class="headerlink" title="4. 这里需要说明的是指定主机安装有多种方式："></a>4. 这里需要说明的是指定主机安装有多种方式：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>直接列出ip或则host，多台以逗号、分号、制表符、空格或放置在单独的行。</div><div class="line"><span class="number">2.</span>指定ip的地址范围例如：<span class="number">10.1</span><span class="number">.1</span>.[<span class="number">1</span><span class="number">-4</span>] 或则 host[<span class="number">1</span><span class="number">-3</span>].hadoop.com<span class="number">.3</span>.记得指定的主机需要关闭防火墙，（如果遇到不能安装，最好使用安装cloudera manager虚拟机进行复制）</div><div class="line">选择需要安装的Hadoop datanode服务器：这里我们线上访问端口不是<span class="number">22</span>是<span class="number">58958</span></div></pre></td></tr></table></figure><p>显示如下图说明机器通信没问题。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera8.png" alt=""></figure></p><h5 id="5-安装CDH"><a href="#5-安装CDH" class="headerlink" title="5. 安装CDH"></a>5. 安装CDH</h5><p>选择安装方式<br>当我们选择安装的host之后，我们需要选择CDH的安装方式（方法），如下图所示</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera9.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera10.png" alt=""></figure></p><h5 id="6-这里点击安装Java工具包"><a href="#6-这里点击安装Java工具包" class="headerlink" title="6. 这里点击安装Java工具包"></a>6. 这里点击安装Java工具包</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera11.png" alt=""></figure></p><h5 id="7-这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。"><a href="#7-这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。" class="headerlink" title="7. 这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。"></a>7. 这里把需要安装的Hadoop服务器root密码设置一样，或者使用其他用户也可以，只要有sudo权限都可以。</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera12.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera13.png" alt=""></figure></p><h5 id="8-安装这里如果提示出现报错：查看好文-Cloudera-Manager5-在线bin安装遇到-无法检测到-Agent-发出的检测信号-总结"><a href="#8-安装这里如果提示出现报错：查看好文-Cloudera-Manager5-在线bin安装遇到-无法检测到-Agent-发出的检测信号-总结" class="headerlink" title="8.安装这里如果提示出现报错：查看好文 Cloudera Manager5 在线bin安装遇到 无法检测到 Agent 发出的检测信号 总结"></a>8.安装这里如果提示出现报错：查看好文 <a href="http://www.aboutyun.com/thread-9293-1-1.html" target="_blank" rel="external">Cloudera Manager5 在线bin安装遇到 无法检测到 Agent 发出的检测信号 总结</a></h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera14.png" alt=""></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">这里只需要卸载：</div><div class="line">yum remove cloudera-manager-agent </div><div class="line"></div><div class="line">如果想重新安装可以卸载所有：</div><div class="line">yum remove cloudera-manager-repository cloudera-manager-agent cloudera-manager-daemons cloudera-manager-server-db cloudera-manager-server -y</div></pre></td></tr></table></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera15.png" alt=""></figure></p><h5 id="9-集群安装"><a href="#9-集群安装" class="headerlink" title="9.集群安装"></a>9.集群安装</h5><p><strong>图1</strong></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera16.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera17.png" alt=""></figure><br><strong>这是一个很漫长的过程，不幸的是在下载完毕，执行分发的时候，这个过程被打断，安装被终止。导致回不到图2，这个该如何解决？</strong><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera18.png" alt=""></figure></p><p>难道真的要重装吗？花费了大半天功夫，又不得不重来。<br>这里面的问题是找不到cloudera manager5所管理的节点了？</p><p>记得about云有这篇文章<a href="http://www.aboutyun.com/thread-8992-1-1.html" target="_blank" rel="external">卸载 Cloudera Manager 5.1.x.和 相关软件</a>【官网翻译：高可用】<br>但是这篇文章是卸载Cloudera Manager以及CDH的，由于cloudera-scm-server和cloudera-scm-agent查看都是运行正常的，如何查看状态，可以参考：</p><p><a href="http://www.aboutyun.com/thread-9096-1-1.html" target="_blank" rel="external">Cloudera Manager Server5及Cloudera Manager Agents5命令整理（about云）</a>，所以cloudera manager不需要卸载，卸载的是CDH的相关内容。<br>于是执行下面命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">update</span> remove avro-tools crunch flume-ng hadoop-hdfs-fuse hadoop-hdfs-nfs3 hadoop-httpfs hbase-solr hive-hbase hive-webhcat hue-beeswax hue-hbase hue-impala hue-pig hue-plugins hue-rdbms hue-<span class="keyword">search</span> hue-spark hue-sqoop hue-zookeeper impala impala-<span class="keyword">shell</span> kite llama mahout oozie pig pig-udf-datafu <span class="keyword">search</span> sentry solr-mapreduce spark-python sqoop sqoop2 whirr</div><div class="line">复制代码</div><div class="line">sudo apt-get clean</div><div class="line">复制代码</div><div class="line">sudo <span class="keyword">rm</span> -Rf /<span class="keyword">var</span>/lib/flume-ng /<span class="keyword">var</span>/lib/hadoop* /<span class="keyword">var</span>/lib/hue /<span class="keyword">var</span>/lib/navigator /<span class="keyword">var</span>/lib/oozie /<span class="keyword">var</span>/lib/solr /<span class="keyword">var</span>/lib/sqoop* /<span class="keyword">var</span>/lib/zookeeper</div><div class="line">复制代码</div><div class="line">sudo <span class="keyword">rm</span> -Rf /dfs /mapred /yarn</div><div class="line">复制代码</div><div class="line">通过上面终于找到所管理的三个节点。然后从新登录，选择三个主机，然后继续继续，最后终于进入了这个界面。但是细心的同学会发现这里已经更换为中文版本。因为这是通过宿主主机访问的。而前面是在虚拟机里使用firefox访问的。</div></pre></td></tr></table></figure><h4 id="成功到这一步：集群安装"><a href="#成功到这一步：集群安装" class="headerlink" title="成功到这一步：集群安装"></a>成功到这一步：集群安装</h4><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera19.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera20.png" alt=""></figure></p><h5 id="10-选择集群设置"><a href="#10-选择集群设置" class="headerlink" title="10.选择集群设置"></a>10.选择集群设置</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera21.png" alt=""></figure></p><h5 id="10-1-集群设置：自定义角色分配"><a href="#10-1-集群设置：自定义角色分配" class="headerlink" title="10.1 集群设置：自定义角色分配"></a>10.1 集群设置：自定义角色分配</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera22.png" alt=""></figure><br>设置好角色分配查看主机：</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera23.png" alt=""></figure></p><h5 id="11-数据库设置"><a href="#11-数据库设置" class="headerlink" title="11. 数据库设置"></a>11. 数据库设置</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera24.png" alt=""></figure></p><p>✨✨ <strong>这里使用默认设置，填写MySQL服务器IP，给予MySQL 用户名和密码all权限，不然会提示权限不足。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Create the Oozie Database and Oozie MySQL User</div><div class="line">For example, using the MySQL mysql <span class="built_in">command</span>-line tool:</div><div class="line"></div><div class="line">$ mysql -u root -p</div><div class="line">Enter password:</div><div class="line"></div><div class="line">mysql&gt; create database oozie default character <span class="built_in">set</span> utf8;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;  grant all privileges on oozie.* to <span class="string">'oozie'</span>@<span class="string">'localhost'</span> identified by <span class="string">'oozie'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;  grant all privileges on oozie.* to <span class="string">'oozie'</span>@<span class="string">'%'</span> identified by <span class="string">'oozie'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="built_in">exit</span></div><div class="line">Bye</div></pre></td></tr></table></figure><p>选择然后单击测试连接即可。</p><p><strong>测试 Activity Monitor 的数据库连接</strong><br><strong>JDBC driver cannot be found. Unable to find the JDBC database jar on host : wlj-cdm.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">如果出现需要MySQL驱动,下载对应版本驱动，copy到相应目录/usr/share/java/ 统一去掉版本号.</div><div class="line">参考Installing the MySQL JDBC Driver官网文档：https://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_mysql.html</div><div class="line"></div><div class="line"><span class="comment">#### Installing the MySQL JDBC Driver </span></div><div class="line"></div><div class="line"></div><div class="line">Download the MySQL JDBC driver from http://www.mysql.com/downloads/connector/j/5.1.html.</div><div class="line">Extract the JDBC driver JAR file from the downloaded file. For example:</div><div class="line"></div><div class="line"><span class="comment">### $ wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.44.tar.gz</span></div><div class="line"><span class="comment">### $ tar zxvf mysql-connector-java-5.1.31.tar.gz</span></div><div class="line">Copy the JDBC driver, renamed, to the relevant host. For example:</div><div class="line"><span class="comment">### $ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar</span></div><div class="line">If the target directory does not yet exist on this host, you can create it before copying the JAR file. For example:</div><div class="line"></div><div class="line"><span class="comment">### $ sudo mkdir -p /usr/share/java/</span></div><div class="line"><span class="comment">### $ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar</span></div></pre></td></tr></table></figure><h5 id="12-审核更改-这里选择默认路径"><a href="#12-审核更改-这里选择默认路径" class="headerlink" title="12. 审核更改(这里选择默认路径)"></a>12. 审核更改(这里选择默认路径)</h5><p>等待安装：<br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera25.png" alt=""></figure></p><h5 id="13-安装成功"><a href="#13-安装成功" class="headerlink" title="13. 安装成功"></a>13. 安装成功</h5><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera25.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera26.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera27.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera28.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/bidata-cloudera29.png" alt=""></figure></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/Bigdata-Cloudera-Manager.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题导读：&quot;&gt;&lt;a href=&quot;#问题导读：&quot; class=&quot;headerlink&quot; title=&quot;问题导读：&quot;&gt;&lt;/a&gt;问题导读：&lt;/h3&gt;&lt;p&gt;1.什么是cloudera CM 、CDH?&lt;br&gt;2.CDH、CM有哪些版本？&lt;br&gt;3.CDH、CM有哪些安装方式？&lt;br&gt;4.CDH如何开发？&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/tags/Bigdata-Hadoop/"/>
    
      <category term="Countly" scheme="http://blog.yancy.cc/tags/Countly/"/>
    
  </entry>
  
  <entry>
    <title>Kafka性能优化–JVM参数配置优化</title>
    <link href="http://blog.yancy.cc/2017/07/04/Bigdata-hadoop/Kafka/kafka%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%93JVM%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.yancy.cc/2017/07/04/Bigdata-hadoop/Kafka/kafka性能优化–JVM参数配置优化/</id>
    <published>2017-07-04T03:22:00.000Z</published>
    <updated>2017-11-02T15:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="figure"><img src="https://cdn2.hubspot.net/hubfs/540072/Kafka_Connect_graphic.png" alt="img-w650"><figcaption class="figure__caption">img-w650</figcaption></figure></p><h3 id="Kafka集群稳定"><a href="#Kafka集群稳定" class="headerlink" title="Kafka集群稳定"></a>Kafka集群稳定</h3><p>GC调优<br>　　调GC是门手艺活，幸亏Java 7引进了G1 垃圾回收，使得GC调优变的没那么难。G1主要有两个配置选项来调优：MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent，具体参数设置可以参考Google，这里不赘述。</p><p>　　Kafka broker能够有效的利用堆内存和对象回收，所以这些值可以调小点。对于 64Gb内存，Kafka运行堆内存5Gb，MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent 分别设置为 20毫秒和 35。Kafka的启动脚本使用的不是 G1回收，需要在环境变量中加入。</p><a id="more"></a><h3 id="Kafka-Broker个数决定因素"><a href="#Kafka-Broker个数决定因素" class="headerlink" title="Kafka Broker个数决定因素"></a>Kafka Broker个数决定因素</h3><p>　　磁盘容量：首先考虑的是所需保存的消息所占用的总磁盘容量和每个broker所能提供的磁盘空间。如果Kafka集群需要保留 10 TB数据，单个broker能存储 2 TB，那么我们需要的最小Kafka集群大小5个broker。此外，如果启用副本参数，则对应的存储空间需至少增加一倍（取决于副本参数）。这意味着对应的Kafka集群至少需要 10 个broker。</p><p>　　请求量：另外一个要考虑的是Kafka集群处理请求的能力。这主要取决于对Kafka client请求的网络处理能力，特别是，有多个consumer或者网路流量不稳定。如果，高峰时刻，单个broker的网络流量达到80%，这时是撑不住两个consumer的，除非有两个broker。再者，如果启用了副本参数，则需要考虑副本这个额外的consumer。也可以扩展多个broker来减少磁盘的吞吐量和系统内存。</p><h3 id="主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。"><a href="#主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。" class="headerlink" title="主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。"></a>主要是启动脚本和log4j基本参数的设置和优化，这些参数藏的比较深。</h3><h3 id="1、JVM参数配置优化"><a href="#1、JVM参数配置优化" class="headerlink" title="1、JVM参数配置优化"></a>1、JVM参数配置优化</h3><p>如果使用的CMS GC算法，建议JVM Heap不要太大，在4GB以内就可以。JVM太大，导致Major GC或者Full GC产生的“stop the world”时间过长，导致broker和zk之间的session超时，比如重新选举controller节点和提升follow replica为leader replica。<br>JVM也不能过小，否则会导致频繁地触发gc操作，也影响Kafka的吞吐量。另外，需要避免CMS GC过程中的发生promotion failure和concurrent failure问题。CMSInitiatingOccupancyFraction=70可以预防concurrent failure问题，提前出发Major GC。<br>Kafka JVM参数可以直接修改启动脚本<code>bin/kafka-server-start.sh</code><br>中的变量值。下面是一些基本参数，也可以根据实际的gc状况和调试GC需要增加一些相关的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx8G -Xms8G -Xmn4G -XX:PermSize=64m -XX:MaxPermSize=128m  -XX:SurvivorRatio=6  -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly"</span></div></pre></td></tr></table></figure><p>需要关注gc日志中的YGC时间以及CMS GC里面的CMS-initial-mark和CMS-remark两个阶段的时间，这些GC过程是“stop the world”方式完成的。</p><blockquote><p>jdk1.8 优化的话会提示MaxPermSize=128m,PermSize=64m 字面意思是MaxPermSize不需要我们配置了,jdk1.8 版本功能其实已不需要这个优化参数：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[jollybi@kafka3 kafka_2.10-0.8.2.1]$ /data/tools/kafka_2.10-0.8.2.1/bin/kafka-server-start.sh /data/tools/kafka_2.10-0.8.2.1/config/server.properties &amp;</div><div class="line">[1] 10312</div><div class="line">[jollybi@kafka3 kafka_2.10-0.8.2.1]$ Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=64m; support was removed <span class="keyword">in</span> 8.0</div><div class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed <span class="keyword">in</span> 8.0</div><div class="line"></div><div class="line">优化参数：</div><div class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx4G -Xms4G -Xmn2G  -XX:SurvivorRatio=6  -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly"</span></div><div class="line"><span class="built_in">export</span> JMX_PORT=<span class="string">"9999"</span>  <span class="comment">### Kafka Manager监控监听jmx端口,如果没有可不设置。</span></div></pre></td></tr></table></figure><h3 id="2、打开JMX端口"><a href="#2、打开JMX端口" class="headerlink" title="2、打开JMX端口"></a>2、打开JMX端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主要是为了通过JMX端口监控Kafka Broker信息。可以在bin/kafka-server-start.sh中打开JMX端口变量。</div><div class="line"><span class="built_in">export</span> JMX_PORT=9999</div></pre></td></tr></table></figure><h3 id="3、调整log4j的日志级别"><a href="#3、调整log4j的日志级别" class="headerlink" title="3、调整log4j的日志级别"></a>3、调整log4j的日志级别</h3><p>如果集群中topic和partition数量较大时，因为log4j的日志级别太低，导致进程持续很长的时间在打印日志。日志量巨大，导致很多额外的性能开销。特别是contoller日志级别为trace级别，这点比较坑。<br>Tips 通过JMX端口设置log4j日志级别，不用重启broker节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">设置日志级别：</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController <span class="built_in">set</span>LogLevel=kafka.controller,INFO</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController <span class="built_in">set</span>LogLevel=state.change.logger,INFO</div><div class="line"> </div><div class="line">检查日志级别：</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController getLogLevel=kafka.controller</div><div class="line">java -jar cmdline-jmxclient-0.10.3.jar - localhost:9999 kafka:<span class="built_in">type</span>=kafka.Log4jController getLogLevel=state.change.logger</div></pre></td></tr></table></figure><h3 id="4、性能优化技巧"><a href="#4、性能优化技巧" class="headerlink" title="4、性能优化技巧"></a>4、性能优化技巧</h3><p>4.1、配置合适的partitons数量。</p><p>这似乎是kafka新手必问得问题。首先，我们必须理解，partiton是kafka的并行单元。从producer和broker的视角看，向不同的partition写入是完全并行的；而对于consumer，并发数完全取决于partition的数量，即，如果consumer数量大于partition数量，则必有consumer闲置。所以，我们可以认为kafka的吞吐与partition时线性关系。partition的数量要根据吞吐来推断，假定p代表生产者写入单个partition的最大吞吐，c代表消费者从单个partition消费的最大吞吐，我们的目标吞吐是t，那么partition的数量应该是t/p和t/c中较大的那一个。实际情况中，p的影响因素有批处理的规模，压缩算法，确认机制和副本数等，然而，多次benchmark的结果表明，单个partition的最大写入吞吐在10MB/sec左右；c的影响因素是逻辑算法，需要在不同场景下实测得出。</p><p>这个结论似乎太书生气和不实用。我们通常建议partition的数量一定要大于等于消费者的数量来实现最大并发。官方曾测试过1万个partition的情况，所以不需要太担心partition过多的问题。下面的知识会有助于读者在生产环境做出最佳的选择：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a、一个partition就是一个存储kafka-log的目录。</div><div class="line">b、一个partition只能寄宿在一个broker上。</div><div class="line">c、单个partition是可以实现消息的顺序写入的。</div><div class="line">d、单个partition只能被单个消费者进程消费，与该消费者所属于的消费组无关。这样做，有助于实现顺序消费。</div><div class="line">e、单个消费者进程可同时消费多个partition，即partition限制了消费端的并发能力。</div><div class="line">f、partition越多则file和memory消耗越大，要在服务器承受服务器设置。</div><div class="line">g、每个partition信息都存在所有的zk节点中。</div><div class="line">h、partition越多则失败选举耗时越长。</div><div class="line">k、offset是对每个partition而言的，partition越多，查询offset就越耗时。</div><div class="line">i、partition的数量是可以动态增加的（只能加不能减）。</div></pre></td></tr></table></figure><p>我们建议的做法是，如果是3个broker的集群，有5个消费者，那么建议partition的数量是15，也就是broker和consumer数量的最小公倍数。当然，也可以是一个大于消费者的broker数量的倍数，比如6或者9，还请读者自行根据实际环境裁定。</p><h3 id="Communicative-learning"><a href="#Communicative-learning" class="headerlink" title="Communicative learning:"></a>Communicative learning:</h3><p>🐧  Linux shell_ senior operation and maintenance faction: QQ group <code>459096184</code> circle (system operation and maintenance - application operation and maintenance - automation operation and maintenance - virtualization technology research, welcome to join)<br>🐧  BigData-Exchange School:QQ group <code>521621407</code> circles (big data Yun Wei) (Hadoop developer) (big data research enthusiasts) welcome to join</p><p>Bidata have internal WeChat exchange group, learn from each other, join QQ group has links.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn2.hubspot.net/hubfs/540072/Kafka_Connect_graphic.png&quot; alt=&quot;img-w650&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Kafka集群稳定&quot;&gt;&lt;a href=&quot;#Kafka集群稳定&quot; class=&quot;headerlink&quot; title=&quot;Kafka集群稳定&quot;&gt;&lt;/a&gt;Kafka集群稳定&lt;/h3&gt;&lt;p&gt;GC调优&lt;br&gt;　　调GC是门手艺活，幸亏Java 7引进了G1 垃圾回收，使得GC调优变的没那么难。G1主要有两个配置选项来调优：MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent，具体参数设置可以参考Google，这里不赘述。&lt;/p&gt;
&lt;p&gt;　　Kafka broker能够有效的利用堆内存和对象回收，所以这些值可以调小点。对于 64Gb内存，Kafka运行堆内存5Gb，MaxGCPauseMillis 和 InitiatingHeapOccupancyPercent 分别设置为 20毫秒和 35。Kafka的启动脚本使用的不是 G1回收，需要在环境变量中加入。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-如何手动更新Kafka中某个Topic的偏移量</title>
    <link href="http://blog.yancy.cc/2017/06/29/Bigdata-hadoop/Kafka/%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0Kafka%E4%B8%AD%E6%9F%90%E4%B8%AATopic%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://blog.yancy.cc/2017/06/29/Bigdata-hadoop/Kafka/如何手动更新Kafka中某个Topic的偏移量/</id>
    <published>2017-06-29T06:46:00.000Z</published>
    <updated>2017-10-30T10:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何手动更新Kafka中某个Topic的偏移量"><a href="#如何手动更新Kafka中某个Topic的偏移量" class="headerlink" title="如何手动更新Kafka中某个Topic的偏移量"></a>如何手动更新Kafka中某个Topic的偏移量</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-streams-poc-old-solution.jpg" alt=""></figure></p><p>我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为<code>/consumers/[groupId]/offsets/[topic]/[partitionId]</code>，比如iteblog主题分区10的偏移量获取如下：<br>在有些场景下，这个工具不满足我们的需求，我们需要的是能够手动设置分区的偏移量为任何有意义的值，而不仅仅是earliest或者latest。那咋办？</p><a id="more"></a><p>我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为<code>/consumers/[groupId]/offsets/[topic]/[partitionId]</code>，比如<code>mongotail_lz4</code>主题分区10的偏移量获取如下：　　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[zk: 127.0.0.1:2281(CONNECTED) 2]  get /consumers/ibm_event/offsets/mongotail_lz4/10</div><div class="line">293894</div><div class="line">cZxid = 0x6000011f3</div><div class="line">ctime = Wed Jul 26 17:57:27 CST 2017</div><div class="line">mZxid = 0x6000018c9</div><div class="line">mtime = Wed Jul 26 18:18:27 CST 2017</div><div class="line">pZxid = 0x6000011f3</div><div class="line">cversion = 0</div><div class="line">dataVersion = 20</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 6</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure><p>所以，我们可以通过set命令来设置某个分区的偏移量，如下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[zk: 127.0.0.1:2281(CONNECT get /consumers/ibm_event/offsets/mongotail_lz4/10 0 </div><div class="line">0</div><div class="line">cZxid = 0x6000011f3</div><div class="line">ctime = Wed Jul 26 17:57:27 CST 2017</div><div class="line">mZxid = 0x60000204c</div><div class="line">mtime = Wed Jul 26 18:37:21 CST 2017</div><div class="line">pZxid = 0x6000011f3</div><div class="line">cversion = 0</div><div class="line">dataVersion = 21</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 1</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure><p>12个分区分别更新过去。</p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何手动更新Kafka中某个Topic的偏移量&quot;&gt;&lt;a href=&quot;#如何手动更新Kafka中某个Topic的偏移量&quot; class=&quot;headerlink&quot; title=&quot;如何手动更新Kafka中某个Topic的偏移量&quot;&gt;&lt;/a&gt;如何手动更新Kafka中某个Topic的偏移量&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/kafka-streams-poc-old-solution.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们都知道，Kafka topic的偏移量一般都是存储在Zookeeper中，具体的路径为&lt;code&gt;/consumers/[groupId]/offsets/[topic]/[partitionId]&lt;/code&gt;，比如iteblog主题分区10的偏移量获取如下：&lt;br&gt;在有些场景下，这个工具不满足我们的需求，我们需要的是能够手动设置分区的偏移量为任何有意义的值，而不仅仅是earliest或者latest。那咋办？&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://blog.yancy.cc/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警</title>
    <link href="http://blog.yancy.cc/2017/06/05/Monitoring/Zabbix-Monitoring%20Kafka%20Consumer%20%7C%20kafka%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E5%91%8A%E8%AD%A6/"/>
    <id>http://blog.yancy.cc/2017/06/05/Monitoring/Zabbix-Monitoring Kafka Consumer | kafka的监控和告警/</id>
    <published>2017-06-05T09:56:03.000Z</published>
    <updated>2017-09-23T17:03:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/Zabbix-Monitoring-Kafka.png" alt=""></figure></p><h3 id="Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警"><a href="#Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警" class="headerlink" title="Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警"></a>Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警</h3><p>前面一篇讲了我们监控kafka集群Brokers服务状态监控。生产环境监控，可以在Zabbix中对Kafka进行监控，一种是监控JMX端口，另外一种是直接写脚本，使用bin/kafka-run-class.sh里提供的相关方法类。</p><p>根据我们的业务场景，最为主要的的是监控消费者Lag的情况。所有我直接写脚本了。<br>我们对某一个Topic的30个分区，每个分区，当前Consumer的Lag情况。<br>当然还可以生成汇总图，在此不做多展示。在Zabbix中配置对应的Triggers，当Lag超过阀值，实现报警。</p><a id="more"></a><p>这里我用命令在kafka当中一台服务器获取了其中一个Topic group的Lag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[jollybi@countly2 kafka_2.10]$ </div><div class="line">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper 75.126.39.4:2281,75.126.5.2:2281,75.126.5.1:2281 --group group_zybi --topic mongotail_lz4  </div><div class="line">消费组           话题id                        分区ID 当前已消费的条数   总条数         未消费的            </div><div class="line">Group           Topic                          Pid Offset          <span class="built_in">log</span>Size         Lag             Owner</div><div class="line">group_zybi      mongotail_lz4                  0   1092163900      2253744158      1161580258      none</div><div class="line">group_zybi      mongotail_lz4                  1   1092281117      2253795899      1161514782      none</div><div class="line">group_zybi      mongotail_lz4                  2   1092834883      2253771036      1160936153      none</div><div class="line">group_zybi      mongotail_lz4                  3   1092822121      2253772916      1160950795      none</div><div class="line">group_zybi      mongotail_lz4                  4   1092040532      2253775432      1161734900      none</div><div class="line">group_zybi      mongotail_lz4                  5   1095163824      2253744329      1158580505      none</div><div class="line">group_zybi      mongotail_lz4                  6   1097623779      2253781500      1156157721      none</div><div class="line">group_zybi      mongotail_lz4                  7   1097459357      2253782032      1156322675      none</div><div class="line">group_zybi      mongotail_lz4                  8   1099080546      2253741287      1154660741      none</div><div class="line">group_zybi      mongotail_lz4                  9   1099028190      2253785053      1154756863      none</div><div class="line">group_zybi      mongotail_lz4                  10  1099535928      2253795680      1154259752      none</div><div class="line">group_zybi      mongotail_lz4                  11  1099701993      2253742880      1154040887      none</div></pre></td></tr></table></figure><p>其实命令大体的逻辑就是通过Consumer获取到当前的offset，就能有lag信息了，如何写成脚本获取我们想要的消费和未消费与总消息条数呢。</p><p>脚本贴出来了，很简单理解，把自己获取到topic的消费条数过滤。我公司有两个主题topic分别对不同组获取lag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">[root@countly2 zabbix]<span class="comment"># vim monitor_kafka.sh</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/home/jollybi/tools/java-7-sun</div><div class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></div><div class="line">topic=mongotail_lz4_imp</div><div class="line">group=group_imp</div><div class="line"></div><div class="line"><span class="comment">#topic2</span></div><div class="line"></div><div class="line">topic2=mongotail_lz4</div><div class="line">group2=group_event</div><div class="line">group3=group_event_spm</div><div class="line"></div><div class="line"><span class="comment">#启动目录</span></div><div class="line">kafkaserver=/home/jollybi/tools/kafka_2.10-0.8.2.1/bin/kafka-run-class.sh</div><div class="line">zk=75.126.39.4:2281,75.126.5.2:2281,75.126.5.8:2281</div><div class="line"></div><div class="line"><span class="keyword">function</span> imp_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> imp_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> imp_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group</span>  --topic <span class="variable">$topic</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_spm_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group2</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_lag &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$6</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_logsize &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$5</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> event_offset &#123;</div><div class="line"><span class="built_in">echo</span> <span class="string">"`<span class="variable">$kafkaserver</span> kafka.tools.ConsumerOffsetChecker --zookeeper <span class="variable">$zk</span> --group <span class="variable">$group3</span>  --topic <span class="variable">$topic2</span>  | sed -n 2p | awk '&#123;print <span class="variable">$4</span>&#125;'`"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># Run the requested function</span></div><div class="line"><span class="variable">$1</span></div></pre></td></tr></table></figure><p>⏰ <strong>这里脚本我更新过了，这个脚本实现是当个分片的消费情况。 不是总的消费和未消费的取到的值。</strong><br>🎋 需要原脚本的留言喔，下面步骤都是一样的效果。</p><h4 id="脚本放到kafka服务器-etc-zabbix-下面，并配合zabbix监控。"><a href="#脚本放到kafka服务器-etc-zabbix-下面，并配合zabbix监控。" class="headerlink" title="脚本放到kafka服务器/etc/zabbix/下面，并配合zabbix监控。"></a>脚本放到kafka服务器/etc/zabbix/下面，并配合zabbix监控。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@countly2 zabbix]<span class="comment"># ll</span></div><div class="line">total 8</div><div class="line">-rwxrwxr-x 1 jollybi jollybi 1932 Jun  7 10:40 monitor_kafka.sh</div><div class="line">-rw-r--r-- 1 root    root     218 Jun  7 14:19 zabbix_agentd.conf</div><div class="line">drwxr-xr-x 2 root    root      45 Sep 20  2016 zabbix_agentd.d</div></pre></td></tr></table></figure><h4 id="然后zabbix-agentd-conf扩展配置"><a href="#然后zabbix-agentd-conf扩展配置" class="headerlink" title="然后zabbix_agentd.conf扩展配置"></a>然后zabbix_agentd.conf扩展配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserParameter=kafka.[*],/etc/zabbix/monitor_kafka.sh <span class="variable">$1</span></div></pre></td></tr></table></figure><blockquote><p>也可以这么写：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UserParameter=kafka.imp_lag,/etc/zabbix/monitor_kafka.sh imp_lag</div><div class="line">UserParameter=kafka.imp_offset,/etc/zabbix/monitor_kafka.sh imp_offset</div><div class="line">UserParameter=kafka.imp_logsize,/etc/zabbix/monitor_kafka.sh imp_logsize</div><div class="line">UserParameter=kafka.event_spm_lag,/etc/zabbix/monitor_kafka.sh event_spm_lag</div><div class="line">UserParameter=kafka.event_spm_logsize,/etc/zabbix/monitor_kafka.sh event_spm_logsize</div><div class="line">UserParameter=kafka.event_spm_offset,/etc/zabbix/monitor_kafka.sh event_spm_offset </div><div class="line">UserParameter=kafka.event_lag,/etc/zabbix/monitor_kafka.sh event_lag</div><div class="line">UserParameter=kafka.event_offset,/etc/zabbix/monitor_kafka.sh event_offset</div><div class="line">UserParameter=kafka.event_logsize,/etc/zabbix/monitor_kafka.sh event_logsize</div></pre></td></tr></table></figure><p>这里写键值就不需要加[]</p><p>然后配置完成重启zabbix-agent服务。</p><h4 id="zabbix设置Key"><a href="#zabbix设置Key" class="headerlink" title="zabbix设置Key"></a>zabbix设置Key</h4><p>zabbix-组态-模板-创建模板。</p><p>创建：KafkaConsumers模板<br>然后点击KafkaConsumers模板，创建相应的项目:kafka.event_lag 未消费的条数 </p><p>设置zabbix代理。默认的代理方式。</p><p>zabbix,key 键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka.[event_lag]</div></pre></td></tr></table></figure><p>数据类型默认浮点就可以了。 后面应用集选择下KafkaConsumers 即可。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.01.png" alt=""></figure><br>陆陆续续配置完所有项目。</p><h3 id="然后配置图形。"><a href="#然后配置图形。" class="headerlink" title="然后配置图形。"></a>然后配置图形。</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.02.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.04.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.05.png" alt=""></figure></p><h3 id="查看最新数据图："><a href="#查看最新数据图：" class="headerlink" title="查看最新数据图："></a>查看最新数据图：</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.06.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.07.png" alt=""></figure></p><p>出现问题第一时间发送报警消息。<br>报警的Trigger触发规则也是对lag的值做报警，具体阀值设置为多少，还是看大家各自业务需求了。</p><h3 id="这里我对未消费告警定时60分钟触发一次。"><a href="#这里我对未消费告警定时60分钟触发一次。" class="headerlink" title="这里我对未消费告警定时60分钟触发一次。"></a>这里我对未消费告警定时60分钟触发一次。</h3><p>⚠️注释：设置group_event_lag最近消息条数的60分钟时间之内一直超过200万消费则报警</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.08.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.09.png" alt=""></figure></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Consumer.10.png" alt=""></figure></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/Zabbix-Monitoring-Kafka.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警&quot;&gt;&lt;a href=&quot;#Zabbix-Monitoring-Kafka集群-Consumer-kafka的监控和告警&quot; class=&quot;headerlink&quot; title=&quot;Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警&quot;&gt;&lt;/a&gt;Zabbix-Monitoring Kafka集群 Consumer | kafka的监控和告警&lt;/h3&gt;&lt;p&gt;前面一篇讲了我们监控kafka集群Brokers服务状态监控。生产环境监控，可以在Zabbix中对Kafka进行监控，一种是监控JMX端口，另外一种是直接写脚本，使用bin/kafka-run-class.sh里提供的相关方法类。&lt;/p&gt;
&lt;p&gt;根据我们的业务场景，最为主要的的是监控消费者Lag的情况。所有我直接写脚本了。&lt;br&gt;我们对某一个Topic的30个分区，每个分区，当前Consumer的Lag情况。&lt;br&gt;当然还可以生成汇总图，在此不做多展示。在Zabbix中配置对应的Triggers，当Lag超过阀值，实现报警。&lt;/p&gt;
    
    </summary>
    
      <category term="Kafka" scheme="http://blog.yancy.cc/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
      <category term="Zabbix" scheme="http://blog.yancy.cc/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix监控Kafka集群 Brokers服务</title>
    <link href="http://blog.yancy.cc/2017/06/01/Monitoring/Zabbix%E7%9B%91%E6%8E%A7Kafka%E9%9B%86%E7%BE%A4%20Brokers%E6%9C%8D%E5%8A%A1/"/>
    <id>http://blog.yancy.cc/2017/06/01/Monitoring/Zabbix监控Kafka集群 Brokers服务/</id>
    <published>2017-06-01T09:56:03.000Z</published>
    <updated>2017-10-15T13:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zabbix监控Kafka集群-Brokers服务"><a href="#Zabbix监控Kafka集群-Brokers服务" class="headerlink" title="Zabbix监控Kafka集群 Brokers服务"></a>Zabbix监控Kafka集群 Brokers服务</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-datadog.png" alt=""></figure></p><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>Monitoring Kafka with Datadog</p><p>This post is the final part of a 3-part series on how to monitor Kafka. Part 1 explores the key metrics available from Kafka, and Part 2 is about collecting those metrics on an ad hoc basis.</p><p>To implement ongoing, meaningful monitoring, you will need a dedicated system that allows you to store, visualize, and correlate your Kafka metrics with the rest of your infrastructure.</p><p>Kafka deployments often rely on additional software packages not included in the Kafka codebase itself, in particular Apache ZooKeeper. A comprehensive monitoring implementation includes all the layers of your deployment, including host-level metrics when appropriate, and not just the metrics emitted by Kafka itself.</p><a id="more"></a><p>我在处理Hadoop及相关服务监控、报警这里主要讲kafka集群服务。这里我也看了几篇kafka相关文章，好文贴出来：</p><ul><li><a href="http://www.infoq.com/cn/articles/kafka-analysis-part-1" target="_blank" rel="external">infoq kafka 入门了解</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-kafka/index.html" target="_blank" rel="external">kafka 工作原理介绍</a></li></ul><p>在我们公司主要Kafka 的几个特性非常满足我们的需求：可扩展性、数据分区、低延迟、处理大量不同消费者的能力。</p><p>而这里我想帮忙BI团队实现Kafka全面监控。分两点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 监控Kafka Brokers服务</div><div class="line">2. 监控Kafka Lag堆积数</div></pre></td></tr></table></figure><p>对于Kafka的监控，已经有现成的开源软件了，在我们公司内部也使用了一段时间，有两种方案。我们公司用第三种方案。<br>一般都会选择两个开源的工具：KafkaOffsetMonitor和kafka-web-console，这两款我都有用过.</p><ul><li>Kafka三款监控工具比较</li></ul><p>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、Kafka Web Conslole</div><div class="line">2、Kafka Manager</div><div class="line">3、KafkaOffsetMonitor</div></pre></td></tr></table></figure><p><a href="https://github.com/quantifind/KafkaOffsetMonitor" target="_blank" rel="external">KafkaOffsetMonitor</a>：最大的好处就是配置简单，只需要配个zookeeper的地址就能用了，坑爹的地方就是不能自动刷新，手动刷新时耗时较长，而且有时候都刷不出来，另外就是图像用了一段时间就完全显示不了了，不知道大家是不是这样。</p><p><a href="https://github.com/claudemamo/kafka-web-console" target="_blank" rel="external">kafka-web-console</a>：相比与前者，数据是落地的，因此刷新较快，而且支持在前端自定义zookeeper的地址，还能列出实时的topic里的具体内容。但是搭建比较复杂，而且github上的默认数据库是H2的，像我们一般用mysql的，还得自己转化。另外在用的过程中，我遇到一个问题，在连接kafka的leader失败的时候，会一直重试，其结果就是导致我kafka的那台机子连接数过高，都到2w了，不知道是不是它的一个bug。</p><p>具体介绍以及安装在我另外篇博文。这里不详细讲解开源软件，这里用zabbix监控Kafka Brokers服务。</p><h4 id="kafka-monitoring-Brokers服务"><a href="#kafka-monitoring-Brokers服务" class="headerlink" title="kafka-monitoring Brokers服务"></a>kafka-monitoring Brokers服务</h4><p>操作系统环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Centos 7.1 </div><div class="line">64G内存</div><div class="line">2T磁盘空间，指定kafka写入数据目录。</div></pre></td></tr></table></figure><p>说明下:</p><p>监控Brokers是利用Zabbix JMX监控获取数据。</p><p>☝️第一步：不用解释前提你在zabbix-server端已经安装过abbix-java-gataway 如果没有安装可以看下面，安装过可以略过第一步。</p><p>1.0 安装配置zabbix-java-gataway</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix-java-gataway</div><div class="line">vi /etc/zabbix/zabbix_java_gateway.conf</div><div class="line">START_POLLERS=10 </div><div class="line">Uncoment并设置为StartJavaPollers = 5 更改JavaGateway的 IP = IP_address_java_gateway</div><div class="line">``` </div><div class="line">1.1 重新启动zabbix-server</div><div class="line"></div><div class="line">```bash</div><div class="line">/etc/init.d/zabbix-java-gataway restart</div><div class="line">chkconfig --level 345 zabbix-java-gataway on</div><div class="line">/etc/init.d/zabbix-java-gataway start</div></pre></td></tr></table></figure><p>☝️第二步：Kafka配置</p><p>这里我们服务器给大数据那边安装在指定用户目录下面：/home/jollybi/tools/kafka_2.10-0.8.2.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">su - jollybi 进入相应用户</div><div class="line">vim /home/jollybi/tools/kafka_2.10-0.8.2.1/kafka-run-class.sh</div><div class="line"></div><div class="line">从</div><div class="line"></div><div class="line"><span class="comment"># JMX settings</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$KAFKA_JMX_OPTS</span>"</span> ]; <span class="keyword">then</span></div><div class="line">KAFKA_JMX_OPTS=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -   Dcom.sun.management.jmxremote.ssl=false "</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">至</div><div class="line"></div><div class="line"><span class="comment"># JMX settings</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$KAFKA_JMX_OPTS</span>"</span> ]; <span class="keyword">then</span></div><div class="line">KAFKA_JMX_OPTS=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=12345 -    Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false "</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/home/jollybi/tools/kafka_2.10-0.8.2.1/bin/kafka-server-stop.sh</div><div class="line">/home/jollybi/tools/kafka_2.10-0.8.2.1/bin/kafka-server-start.sh</div></pre></td></tr></table></figure><p>☝️第三步：导入模板登录到您的zabbix网页.</p><p>导入模板登录到您的zabbix网页</p><p>单击配置 - &gt;模板 - &gt;导入</p><p>下载模板 <a href="https://github.com/yangcvo/Zabbix-Monitoring-Kafka" target="_blank" rel="external">zbx_kafka_templates.xml</a> 并上传到zabbix然后将此模板添加到Kafka并在zabbix上配置JMX接口</p><p>输入Kafka IP地址和JMX端口如果看到jmx图标，您配置了JMX监控好！</p><ul><li>查看数据：</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Brokers_01.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Brokers_02.png" alt=""></figure></p><ul><li>查看效果图：</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kafka-Brokers_03.png" alt=""></figure></p><p>参考官网监控指标的含义;</p><p><a href="http://docs.confluent.io/current/kafka/monitoring.html" target="_blank" rel="external">Servilo Metrics broker Metrics</a><br><a href="http://docs.confluent.io/current/kafka/monitoring.html" target="_blank" rel="external">Producer Metrics Global Request Metrics</a><br><a href="http://docs.confluent.io/current/kafka/monitoring.html" target="_blank" rel="external">Global Connection Metrics</a></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Zabbix监控Kafka集群-Brokers服务&quot;&gt;&lt;a href=&quot;#Zabbix监控Kafka集群-Brokers服务&quot; class=&quot;headerlink&quot; title=&quot;Zabbix监控Kafka集群 Brokers服务&quot;&gt;&lt;/a&gt;Zabbix监控Kafka集群 Brokers服务&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/kafka-datadog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;Monitoring Kafka with Datadog&lt;/p&gt;
&lt;p&gt;This post is the final part of a 3-part series on how to monitor Kafka. Part 1 explores the key metrics available from Kafka, and Part 2 is about collecting those metrics on an ad hoc basis.&lt;/p&gt;
&lt;p&gt;To implement ongoing, meaningful monitoring, you will need a dedicated system that allows you to store, visualize, and correlate your Kafka metrics with the rest of your infrastructure.&lt;/p&gt;
&lt;p&gt;Kafka deployments often rely on additional software packages not included in the Kafka codebase itself, in particular Apache ZooKeeper. A comprehensive monitoring implementation includes all the layers of your deployment, including host-level metrics when appropriate, and not just the metrics emitted by Kafka itself.&lt;/p&gt;
    
    </summary>
    
      <category term="Kafka" scheme="http://blog.yancy.cc/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
      <category term="Zabbix" scheme="http://blog.yancy.cc/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-开源的Kafka集群管理器(Kafka Manager)</title>
    <link href="http://blog.yancy.cc/2017/05/28/Bigdata-hadoop/Kafka/%E5%BC%80%E6%BA%90%E7%9A%84Kafka%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%99%A8(Kafka%20Manager)/"/>
    <id>http://blog.yancy.cc/2017/05/28/Bigdata-hadoop/Kafka/开源的Kafka集群管理器(Kafka Manager)/</id>
    <published>2017-05-28T06:46:00.000Z</published>
    <updated>2017-11-21T02:04:28.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka-Manager"><a href="#Kafka-Manager" class="headerlink" title="Kafka Manager"></a>Kafka Manager</h2><p>A tool for managing <a href="http://kafka.apache.org/" target="_blank" rel="external">Apache Kafka.</a></p><h4 id="It-supports-the-following"><a href="#It-supports-the-following" class="headerlink" title="It supports the following:"></a>It supports the following:</h4><ul><li>管理多个群集</li><li>容易检查集群状态（主题，消费者，偏移量，经纪人，副本分发，分区分配）</li><li>运行首选副本选举</li><li>使用选项生成分区分配，以选择要使用的代理</li><li>运行分区的重新分配（基于生成的分配）</li><li>创建可选主题配置的主题（0.8.1.1具有不同于0.8.2+的配置）</li><li>删除主题（仅支持0.8.2+，并记住在代理配 置中设置delete.topic.enable = true）</li><li>主题列表现在表示标记为删除的主题（仅支持0.8.2+）</li><li>批量生成多个主题的分区分配，并选择要使用的代理</li><li>批量运行多个主题的分区重新分配</li><li>将分区添加到现有主题</li><li>更新现有主题的配置</li><li>可选地，启用JMX轮询代理级和主题级度量。</li><li>可选地筛选出在zookeeper中没有ids / owner /＆offset /目录的消费者。</li></ul><a id="more"></a><p>参考开源地址：<a href="https://github.com/yahoo/kafka-manager" target="_blank" rel="external">https://github.com/yahoo/kafka-manager</a></p><h4 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h4><p>Kafka 0.8.1.1 or 0.8.2.<em> or 0.9.0.</em> or 0.10.0.*<br>Java 8+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo wget --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie”   http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</span></div><div class="line"></div><div class="line">sudo vim /etc/profile</div><div class="line">export JAVA_HOME=/home/jollybi/tools/jdk1.8.0_144</div><div class="line">export LASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$TOMCAT_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/yahoo/kafka-manager.git</div><div class="line">./sbt clean dist</div><div class="line"></div><div class="line">[info]   Compilation completed <span class="keyword">in</span> 13.366 s</div><div class="line">model contains 672 documentable templates</div><div class="line">[info] Main Scala API documentation successful.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8-javadoc.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info] Packaging /home/jollybi/kafka-manager/target/scala-2.11/kafka-manager_2.11-1.3.3.8-sans-externalized.jar ...</div><div class="line">[info] Done packaging.</div><div class="line">[info]</div><div class="line">[info] Your package is ready <span class="keyword">in</span> /home/jollybi/kafka-manager/target/universal/kafka-manager-1.3.3.8.zip</div><div class="line">[info]</div><div class="line">[success] Total time: 142 s, completed Jul 27, 2017 3:48:35 PM</div><div class="line">完成</div></pre></td></tr></table></figure><h4 id="Starting-the-service"><a href="#Starting-the-service" class="headerlink" title="Starting the service"></a>Starting the service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">解压缩生成的zip文件后，将工作目录更改为可以运行的服务：</div><div class="line"></div><div class="line">unzip /home/jollybi/kafka-manager/target/universal/kafka-manager-1.3.3.8.zip</div><div class="line"></div><div class="line"></div><div class="line">修改zk地址和管理员账号和密码：</div><div class="line"></div><div class="line">vim kafka-manager-1.3.3.8/conf/application.conf</div><div class="line"></div><div class="line"><span class="comment">#kafka-manager.zkhosts="kafka-manager-zookeeper:2181"</span></div><div class="line"><span class="comment">#zk集群可以这么配置：</span></div><div class="line">kafka-manager.zkhosts=<span class="string">"kafka1.jollychic.com:2281,kafka2.jollychic.com:2281,kafka3.jollychic.com:2281"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#根据个人公司这里可以开启true 设置账号和密码</span></div><div class="line">basicAuthentication.enabled=<span class="literal">true</span></div><div class="line">basicAuthentication.username=<span class="string">"admin"</span></div><div class="line">basicAuthentication.password=<span class="string">"admin"</span></div><div class="line"></div><div class="line"></div><div class="line">默认情况下，它将选择端口9000.这是可以覆盖的，配置文件的位置也是如此。例如：</div><div class="line"></div><div class="line">$ ./bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080</div><div class="line"></div><div class="line">后台生效：</div><div class="line"></div><div class="line">$ ./bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &amp;</div><div class="line"></div><div class="line">再次，如果java不在您的路径中，或者您需要针对不同版本的Java运行，请按如下所示添加-java-home选项：</div><div class="line"></div><div class="line">$ bin/kafka-manager -java-home /usr/<span class="built_in">local</span>/oracle-java-8</div></pre></td></tr></table></figure><h4 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">If you<span class="string">'d like to create a Debian or RPM package instead, you can run one of:</span></div><div class="line"></div><div class="line">sbt debian:packageBin</div><div class="line"></div><div class="line">sbt rpm:packageBin</div></pre></td></tr></table></figure><h4 id="查看端口："><a href="#查看端口：" class="headerlink" title="查看端口："></a>查看端口：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[jollybi@kafka1 conf]$ netstat -ntulp | grep 8080</div><div class="line">(Not all processes could be identified, non-owned process info</div><div class="line"> will not be shown, you would have to be root to see it all.)</div><div class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      70517/java</div></pre></td></tr></table></figure><p>四、安装配置中的两个小坑</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、安装配置上面已经有说明介绍步骤。</div><div class="line"><span class="number">2</span>、kafka的服务器必须添加hostname对应的host域名解析，并重启kafka</div><div class="line">这个是java本身处理的一个机制问题，通过代码修改和绑定host都可以解决，如果不处理，报出来的错误如下：</div><div class="line"><span class="meta">at</span> org.apache.kafka.clients.consumer.KafkaConsumer.pollOnce(KafkaConsumer.java:<span class="number">974</span>) ~[org.apache.kafka.kafka-clients-<span class="number">0.10</span><span class="meta">.0</span><span class="meta">.1</span>.jar:na]</div><div class="line">[error] k.m.j.KafkaJMX$ - Failed to connect to service:jmx:rmi:///jndi/rmi://<span class="number">10.143</span><span class="meta">.40</span><span class="meta">.239</span>:<span class="number">9999</span>/jmxrmi</div><div class="line"><span class="symbol">java.rmi.ConnectException:</span> Connection refused to host: <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span><span class="comment">; nested exception is:</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line">从一个运维人员的角度出发，改host解析是最得心应手的，登录kafka的服务器，打开/etc/hosts文件，将主机名对应的解析记录修改为本机对外通信的<span class="built_in">ip</span>地址，另外将<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>和::<span class="number">1</span>对应的主机名删掉，修改如下，修改后必须重启kafka才能生效。</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> localhost.localdomain localhost</div><div class="line"><span class="number">169.44</span><span class="meta">.62</span><span class="meta">.19</span> kafka1.jollychic.com kafka1</div><div class="line"><span class="number">169.44</span><span class="meta">.59</span><span class="meta">.18</span> kafka2.jollychic.com kafka2</div><div class="line"><span class="number">169.44</span><span class="meta">.62</span><span class="meta">.17</span> kafka3.jollychic.com kafka3</div><div class="line"><span class="number">169.55</span><span class="meta">.32</span><span class="meta">.22</span> kafka4.jollychic.com kafka4</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.13</span> zk1.jollychic.com</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.15</span> zk2.jollychic.com</div><div class="line"><span class="number">10.155</span><span class="meta">.90</span><span class="meta">.18</span> zk3.jollychic.com</div></pre></td></tr></table></figure><h3 id="网站访问kafka-Manger"><a href="#网站访问kafka-Manger" class="headerlink" title="网站访问kafka Manger"></a>网站访问kafka Manger</h3><p>这里我设置了登录账号和密码： admin admin</p><p><figure class="figure"><img src="media/15014722977191.jpg" alt=""></figure></p><p>创建kafka名字;<br>选择kafka版本号;<br>JMX这个不需要;<br>下面选择默认点击确认即可.</p><p><figure class="figure"><img src="media/15014724051756.jpg" alt=""></figure></p><blockquote><p>(2)kafka 启用 JMX端口</p></blockquote><p><figure class="figure"><img src="media/15020729297106.jpg" alt=""></figure></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">以如下命令重新启动kafka</div><div class="line"></div><div class="line">JMX_PORT=<span class="number">9999</span> bin/kafka-<span class="built_in">server</span>-start.sh config/<span class="built_in">server</span>.properties</div><div class="line">或者修改kafka-<span class="built_in">server</span>-start.sh 文件，追加JMX_PORT=<span class="string">"9999"</span></div><div class="line"></div><div class="line"> <span class="keyword">if</span> [ <span class="string">"x$KAFKA_HEAP_OPTS"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></div><div class="line">    export KAFKA_HEAP_OPTS=<span class="string">"-Xmx1G -Xms1G"</span></div><div class="line">    export JMX_PORT=<span class="string">"9999"</span></div><div class="line">fi</div><div class="line">然后重新启动kafka</div><div class="line">bin/kafka-<span class="built_in">server</span>-start.sh config/<span class="built_in">server</span>.properties</div><div class="line"></div><div class="line">但是Metrics中数据都是零</div><div class="line">查看 kafka manager 报错，无法连接jxm</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">解决方法 修改每个kafka broker的 kafka_2.11-0.10.1.0/bin/kafka-run-class.sh文件</div><div class="line">​</div><div class="line"><span class="comment"># JMX settings</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$KAFKA_JMX_OPTS</span>"</span> ]; <span class="keyword">then</span></div><div class="line">  KAFKA_JMX_OPTS=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=75.126.5.162"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line">-Djava.rmi.server.hostname 的值为当前kafka服务器ip</div><div class="line"></div><div class="line">这里说明下集群kafka都需要修改</div></pre></td></tr></table></figure><p><figure class="figure"><img src="media/15020745879851.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014725443386.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014725288425.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014725659340.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014725864134.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014726361909.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014727525618.jpg" alt=""></figure></p><p><figure class="figure"><img src="media/15014727932029.jpg" alt=""></figure></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kafka-Manager&quot;&gt;&lt;a href=&quot;#Kafka-Manager&quot; class=&quot;headerlink&quot; title=&quot;Kafka Manager&quot;&gt;&lt;/a&gt;Kafka Manager&lt;/h2&gt;&lt;p&gt;A tool for managing &lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Kafka.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;It-supports-the-following&quot;&gt;&lt;a href=&quot;#It-supports-the-following&quot; class=&quot;headerlink&quot; title=&quot;It supports the following:&quot;&gt;&lt;/a&gt;It supports the following:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;管理多个群集&lt;/li&gt;
&lt;li&gt;容易检查集群状态（主题，消费者，偏移量，经纪人，副本分发，分区分配）&lt;/li&gt;
&lt;li&gt;运行首选副本选举&lt;/li&gt;
&lt;li&gt;使用选项生成分区分配，以选择要使用的代理&lt;/li&gt;
&lt;li&gt;运行分区的重新分配（基于生成的分配）&lt;/li&gt;
&lt;li&gt;创建可选主题配置的主题（0.8.1.1具有不同于0.8.2+的配置）&lt;/li&gt;
&lt;li&gt;删除主题（仅支持0.8.2+，并记住在代理配 置中设置delete.topic.enable = true）&lt;/li&gt;
&lt;li&gt;主题列表现在表示标记为删除的主题（仅支持0.8.2+）&lt;/li&gt;
&lt;li&gt;批量生成多个主题的分区分配，并选择要使用的代理&lt;/li&gt;
&lt;li&gt;批量运行多个主题的分区重新分配&lt;/li&gt;
&lt;li&gt;将分区添加到现有主题&lt;/li&gt;
&lt;li&gt;更新现有主题的配置&lt;/li&gt;
&lt;li&gt;可选地，启用JMX轮询代理级和主题级度量。&lt;/li&gt;
&lt;li&gt;可选地筛选出在zookeeper中没有ids / owner /＆offset /目录的消费者。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://blog.yancy.cc/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-ZooKeeper的配置详解优化</title>
    <link href="http://blog.yancy.cc/2017/05/27/Bigdata-hadoop/zookeeper/Bigdata-ZooKeeper%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.yancy.cc/2017/05/27/Bigdata-hadoop/zookeeper/Bigdata-ZooKeeper的配置详解优化/</id>
    <published>2017-05-27T06:46:00.000Z</published>
    <updated>2017-09-26T07:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>ZooKeeper</code>的功能特性通过 <code>ZooKeeper</code> 配置文件来进行控制管理（ <code>zoo.cfg</code> 配置文件）。 ZooKeeper 这样的设计其实是有它自身的原因的。通过前面对 <code>ZooKeeper</code> 的配置可以看出，对 <code>ZooKeeper</code>集群进行配置的时候，它的配置文档是完全相同的（对于集群伪分布模式来说，只有很少的部分是不同的）。这样的配置方使得在部署 <code>ZooKeeper</code> 服务的时候非常地方便。另外，如果服务器使用不同的配置文件，必须要确保不同配置文件中的服务器列表相匹配。</p><p>在设置 <code>ZooKeeper</code> 配置文档的时候，某些参数是可选的，但是某些参数是必须的。这些必须的参数就构成了<code>ZooKeeper</code> 配置文档的最低配置要求。</p><a id="more"></a><h5 id="最近发现在用zookeeper出现经常出现连接超时，出现连接中断，数据丢失等原因。后面看了官网配置自己整理优化几点："><a href="#最近发现在用zookeeper出现经常出现连接超时，出现连接中断，数据丢失等原因。后面看了官网配置自己整理优化几点：" class="headerlink" title="最近发现在用zookeeper出现经常出现连接超时，出现连接中断，数据丢失等原因。后面看了官网配置自己整理优化几点："></a>最近发现在用zookeeper出现经常出现连接超时，出现连接中断，数据丢失等原因。后面看了官网配置自己整理优化几点：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2.1错误日志：</div><div class="line"></div><div class="line">2016-04-11 15:00:58,981 [myid:] - WARN  [SyncThread:0:FileTxnLog@334] - fsync-ing the write ahead <span class="built_in">log</span> <span class="keyword">in</span> SyncThread:0 took 13973ms <span class="built_in">which</span> will adversely effect operation latency. See the ZooKeeper troubleshooting guide</div><div class="line"></div><div class="line">&gt;2.2，错误原因分析</div><div class="line">“FOLLOWER”在跟“LEADER”同步时，fsync操作时间过长，导致超时。</div><div class="line"></div><div class="line"></div><div class="line">第一步：分析服务器问题：</div><div class="line">我查看了服务器io和负载都不高。内存空间实际使用率不高。可是编辑文件出现了卡顿.</div><div class="line"></div><div class="line">可以发现：</div><div class="line">服务器并没有占用很多内存的进程；</div><div class="line">服务器也没有存在很多的进程；</div><div class="line">cat /var/<span class="built_in">log</span>/message查看系统日志并没有发现什么异常；</div><div class="line">另外ping服务器只有0.1ms多的延迟，因此不是网络问题。</div><div class="line">后面发现硬盘有故障重新更换了一块硬盘。或者更换服务器。</div><div class="line"></div><div class="line"></div><div class="line">&gt;2.3，错误解决</div><div class="line">增加“tickTime”或者“initLimit和syncLimit”的值，或者两者都增大。</div><div class="line"></div><div class="line"></div><div class="line">&gt;2.4，其他</div><div class="line">这个错误在上线“使用ZooKeeper获取地址方案”之前也存在，只不过过没有这么高频率，而上线了“ZooKeeper获取地址方案”之后，ZooKeeper Server之间的同步数据量增大，ZooKeeper Server的负载加重，因而最终导致高频率出现上述错误。</div></pre></td></tr></table></figure><h3 id="下面是在最低配置要求中必须配置的参数："><a href="#下面是在最低配置要求中必须配置的参数：" class="headerlink" title="下面是在最低配置要求中必须配置的参数："></a>下面是在最低配置要求中必须配置的参数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 最小配置</span></div><div class="line"></div><div class="line">最小配置意味着所有的配置文件中必须要包含这些配置选项。</div><div class="line"></div><div class="line"><span class="comment">#### clientPort</span></div><div class="line"></div><div class="line">服务器监听客户端连接的端口, 亦即客户端尝试连接到服务器上的指定端口。</div><div class="line"></div><div class="line"><span class="comment">##### dataDir</span></div><div class="line"></div><div class="line">ZooKeeper 存储内存数据库快照文件的路径, 并且如果没有指定其它路径的话, 数据库更新的事务日志也将存储到该路径下。</div><div class="line"></div><div class="line">注意: 事务日志会影响 ZooKeeper 服务器的整体性能, 所以建议将事务日志放置到由 dataLogDir 参数指定的路径下。</div><div class="line"></div><div class="line"><span class="comment">##### tickTime</span></div><div class="line"></div><div class="line">单个 tick 的时间长度, 它是 ZooKeeper 中使用的基本时间单元, 以毫秒为单位。它用来调节心跳和超时时间。例如, 最小会话超时时间是 2 个 tick。</div></pre></td></tr></table></figure><h3 id="生产环境配置例子："><a href="#生产环境配置例子：" class="headerlink" title="生产环境配置例子："></a>生产环境配置例子：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">1.tickTime：CS通信心跳数</div><div class="line"></div><div class="line">Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。</div><div class="line"></div><div class="line">tickTime=2000  </div><div class="line"></div><div class="line">2.initLimit：LF初始通信时限</div><div class="line">集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。</div><div class="line"></div><div class="line">initLimit=5  </div><div class="line"></div><div class="line">3.syncLimit：LF同步通信时限</div><div class="line">集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</div><div class="line"></div><div class="line">syncLimit=2  </div><div class="line"> </div><div class="line">4.dataDir：数据文件目录</div><div class="line">Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</div><div class="line"></div><div class="line">dataDir=/data/tools/zookeeper/data</div><div class="line"></div><div class="line">5.dataLogDir：日志文件目录</div><div class="line">Zookeeper保存日志文件的目录。</div><div class="line"></div><div class="line">dataLogDir=/data/tools/zookeeper/<span class="built_in">log</span>  </div><div class="line"></div><div class="line">6.clientPort：客户端连接端口</div><div class="line">客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</div><div class="line"></div><div class="line">clientPort=2333  </div><div class="line"></div><div class="line">7.服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）</div><div class="line">这个配置项的书写格式比较特殊，规则如下：</div><div class="line"></div><div class="line">server.N=YYY:A:B  </div><div class="line"></div><div class="line">其中N表示服务器编号，YYY表示服务器的IP地址，A为LF通信端口，表示该服务器与集群中的leader交换的信息的端口。B为选举端口，表示选举新leader时服务器间相互通信的端口（当leader挂掉时，其余服务器会相互通信，选择出新的leader）。一般来说，集群中每个服务器的A端口都是一样，每个服务器的B端口也是一样。但是当所采用的为伪集群时，IP地址都一样，只能时A端口和B端口不一样。</div><div class="line">下面是一个非伪集群的例子：</div><div class="line"></div><div class="line">server.0=233.34.9.144:2008:6008  </div><div class="line">server.1=233.34.9.145:2008:6008  </div><div class="line">server.2=233.34.9.146:2008:6008  </div><div class="line">server.3=233.34.9.147:2008:6008  </div><div class="line"></div><div class="line">下面是一个伪集群的例子：</div><div class="line"></div><div class="line">server.0=127.0.0.1:2008:6008  </div><div class="line">server.1=127.0.0.1:2007:6007  </div><div class="line">server.2=127.0.0.1:2006:6006  </div><div class="line">server.3=127.0.0.1:2005:6005</div></pre></td></tr></table></figure><h2 id="高级配置-官网翻译"><a href="#高级配置-官网翻译" class="headerlink" title="高级配置 (官网翻译)"></a>高级配置 (官网翻译)</h2><p>本节的配置选项是可选的。你可以使用它们进一步的优化 ZooKeeper 服务器的行为。有些可以使用 Java 系统属性来设置, 一般的格式是 “zookeeper.keyword”。如果有具体的系统属性, 会在配置选项下面标注出来。</p><h4 id="dataLogDir"><a href="#dataLogDir" class="headerlink" title="dataLogDir"></a><code>dataLogDir</code></h4><p>没有对应的 Java 系统属性。</p><p>该参数用于配置 ZooKeeper 服务器存储事务日志文件的路径, ZooKeeper 默认将事务日志文件和数据快照存储在同一个目录下, 应尽量将它们分开存储。</p><p>注意: 将事务日志文件存储到一个专门的日志设备上对于服务器的吞吐量和稳定的延迟有很大的影响。事务日志对磁盘性能要求比较高, 为了保证数据一致性, ZooKeeper 在响应客户端事务请求之前, 需要将请求的事务日志写到磁盘上, 所以事务日志的写入性能直接影响 ZooKeeper 服务器处理请求的吞吐。所以建议给事务日志的输出配置一个单独的磁盘或者挂载点。</p><h3 id="globalOutstandingLimit"><a href="#globalOutstandingLimit" class="headerlink" title="globalOutstandingLimit"></a><code>globalOutstandingLimit</code></h3><p>对应的 Java 系统属性: <code>zookeeper.globalOutstandingLimit。</code></p><p>客户端提交请求的速度可能比 ZooKeeper 处理的速度快得多, 特别是当客户端的数量非常多的时候。为了防止 ZooKeeper 因为排队的请求而耗尽内存, ZooKeeper 将会对客户端进行限流, 即限制系统中未处理的请求数量不超过 globalOutstandingLimit 设置的值。默认的限制是 1,000。</p><h5 id="preAllocSize"><a href="#preAllocSize" class="headerlink" title="preAllocSize"></a><code>preAllocSize</code></h5><p>对应的 Java 系统属性: <code>zookeeper.preAllocSize。</code></p><p>用于配置 ZooKeeper 事务日志文件预分配的磁盘空间大小。默认的块大小是 64M。改变块大小的其中一个原因是当数据快照文件生成比较频繁时可以适当减少块大小。比如 1000 次事务会新产生一个快照(参数为snapCount), 新产生快照后会用新的事务日志文件, 假设一个事务信息大小100b, 那么事务日志预分配的磁盘空间大小为100kb会比较好。</p><h4 id="snapCount"><a href="#snapCount" class="headerlink" title="snapCount"></a><code>snapCount</code></h4><p>对应的 Java 系统属性: <code>zookeeper.snapCount。</code></p><p>ZooKeeper 将事务记录到事务日志中。当 snapCount 个事务被写到一个日志文件后, 启动一个快照并创建一个新的事务日志文件。snapCount 的默认值是 100,000。</p><h4 id="traceFile"><a href="#traceFile" class="headerlink" title="traceFile"></a><code>traceFile</code></h4><p>对应的 Java 系统属性: <code>requestTraceFile。</code></p><p>如果定义了该选项, 那么请求将会记录到一个名为 traceFile.year.month.day 的跟踪文件中。使用该选项可以提供很有用的调试信息, 但是会影响性能。</p><p>注意: requestTraceFile 这个系统属性没有 zookeeper 前缀, 并且配置的变量名称和系统属性不一样。</p><h4 id="maxClientCnxns"><a href="#maxClientCnxns" class="headerlink" title="maxClientCnxns"></a><code>maxClientCnxns</code></h4><p>没有对应的 Java 系统属性</p><p>在 socket 级别限制单个客户端到 ZooKeeper 集群中单台服务器的并发连接数量, 可以通过 IP 地址来区分不同的客户端。它用来阻止某种类型的 DoS 攻击, 包括文件描述符资源耗尽。默认值是 60。将值设置为 0 将完全移除并发连接的限制。</p><h4 id="clientPortAddress"><a href="#clientPortAddress" class="headerlink" title="clientPortAddress"></a><code>clientPortAddress</code></h4><p>服务器监听客户端连接的地址 (ipv4, ipv6 或 主机名) , 亦即客户端尝试连接到服务器上的地址。该参数是可选的, 默认我们以这样一种方式绑定, 即对于服务器上任意 address/interface/nic, 任何连接到 clientPort 的请求将会被接受。</p><h4 id="minSessionTimeout"><a href="#minSessionTimeout" class="headerlink" title="minSessionTimeout"></a><code>minSessionTimeout</code></h4><p>没有对应的 Java 系统属性</p><p>服务器允许客户端会话的最小超时时间, 以毫秒为单位。默认值是 2 倍的 tickTime。</p><h4 id="maxSessionTimeout"><a href="#maxSessionTimeout" class="headerlink" title="maxSessionTimeout"></a><code>maxSessionTimeout</code></h4><p>没有对应的 Java 系统属性</p><p>服务器允许客户端会话的最大超时时间, 以毫秒为单位。默认值是 20 倍的 tickTime。</p><h4 id="fsync-warningthresholdms"><a href="#fsync-warningthresholdms" class="headerlink" title="fsync.warningthresholdms"></a><code>fsync.warningthresholdms</code></h4><p>对应的 Java 系统属性: <code>fsync.warningthresholdms。</code></p><p>用于配置 ZooKeeper 进行事务日志 (WAL) fsync 操作消耗时间的报警阈值, 一旦超过这个阈值将会打印输出报警日志。该参数的默认值是 1000, 以毫秒为单位。参数值只能作为系统属性来设置。</p><h4 id="autopurge-snapRetainCount"><a href="#autopurge-snapRetainCount" class="headerlink" title="autopurge.snapRetainCount"></a><code>autopurge.snapRetainCount</code></h4><p>没有对应的 Java 系统属性。</p><p>当启用自动清理功能后, ZooKeeper 将只保留 autopurge.snapRetainCount 个最近的数据快照(dataDir)和对应的事务日志文件(dataLogDir), 其余的将会删除掉。默认值是 3。最小值也是 3。</p><h4 id="autopurge-purgeInterval"><a href="#autopurge-purgeInterval" class="headerlink" title="autopurge.purgeInterval"></a><code>autopurge.purgeInterval</code></h4><p>没有对应的 Java 系统属性。</p><p>用于配置触发清理任务的时间间隔, 以小时为单位。要启用自动清理, 可以将其值设置为一个正整数 (大于 1) 。默认值是 0。</p><h4 id="syncEnabled"><a href="#syncEnabled" class="headerlink" title="syncEnabled"></a><code>syncEnabled</code></h4><p>对应的 Java 系统属性: <code>zookeeper.observer.syncEnabled。</code></p><p>和参与者一样, 观察者现在默认将事务日志以及数据快照写到磁盘上, 这将减少观察者在服务器重启时的恢复时间。将其值设置为 “false” 可以禁用该特性。默认值是 “true”。</p><p>集群配置选项</p><p>本节中的选项主要用于ZooKeeper集群。</p><h4 id="electionAlg"><a href="#electionAlg" class="headerlink" title="electionAlg"></a><code>electionAlg</code></h4><p>没有对应的 Java 系统属性。</p><p>用于选择使用的 leader 选举算法。”0” 对应于原始的基于 UDP 的版本, “1” 对应于快速 leader 选举基于UDP的无身份验证的版本, “2” 对应于快速 leader 选举有基于UDP的身份验证的版本, 而 “3” 对应于快速 leader 选举基于TCP的版本。目前默认值是算法 3。</p><p>注意: leader 选举 0, 1, 2 这三种实现已经废弃, 在接下来的版本中将会移除它们, 这样就只剩下 FastLeaderElection 算法。</p><h4 id="initLimit"><a href="#initLimit" class="headerlink" title="initLimit"></a><code>initLimit</code></h4><p>没有对应的 Java 系统属性。</p><p>默认值是 10, 即 tickTime 属性值的 10 倍。它用于配置允许 followers 连接并同步到 leader 的最大时间。如果 ZooKeeper 管理的数据量很大的话可以增加这个值。</p><h4 id="leaderServes"><a href="#leaderServes" class="headerlink" title="leaderServes"></a><code>leaderServes</code></h4><p>对应的 Java 系统属性: <code>zookeeper.leaderServes。</code></p><p>用于配置 Leader 是否接受客户端连接, 默认值是 “yes”, 即 leader 将会接受客户端连接。在 ZooKeeper 中, leader 服务器主要协调事务更新请求。对于事务更新请求吞吐很高而读取请求吞吐很低的情况可以配置 leader 不接受客户端连接, 这样就可以专注于协调工作。</p><p>注意: 当 ZooKeeper 集群中服务器的数量超过 3 个时, 建议开启 leader 选举。</p><h4 id="server-x-hostname-nnnnn-nnnnn"><a href="#server-x-hostname-nnnnn-nnnnn" class="headerlink" title="server.x=[hostname]:nnnnn:nnnnn"></a><code>server.x=[hostname]:nnnnn:nnnnn</code></h4><p>没有对应的 Java 系统属性。</p><p>组成 ZooKeeper 集群的服务器。当服务器启动时, 可以通过查找数据目录中的 myid 文件来决定它是哪一台服务器。myid 文件包含服务器编号, 并且它要匹配 “server.x” 中的 x。</p><p>客户端用来组成 ZooKeeper 集群的服务器列表必须和每个 ZooKeeper 服务器中配置的 ZooKeeper 服务器列表相匹配。</p><p>有两个端口号 nnnnn, 第一个是 followers 用来连接到 leader, 第二个是用于 leader 选举。如果想在单台机器上测试多个服务, 则可以为每个服务配置不同的端口。</p><h4 id="syncLimit"><a href="#syncLimit" class="headerlink" title="syncLimit"></a><code>syncLimit</code></h4><p>没有对应的 Java 系统属性。</p><p>默认值是 5, 即 tickTime 属性值的 5 倍。它用于配置leader 和 followers 间进行心跳检测的最大延迟时间。如果在设置的时间内 followers 无法与 leader 进行通信, 那么 followers 将会被丢弃。</p><h4 id="group-x-nnnnn-nnnnn"><a href="#group-x-nnnnn-nnnnn" class="headerlink" title="group.x=nnnnn[:nnnnn]"></a><code>group.x=nnnnn[:nnnnn]</code></h4><p>没有对应的 Java 系统属性。</p><p>Enables a hierarchical quorum construction.”x” 是一个组的标识, 等号右边的数字对应于服务器的标识. 赋值操作右边是冒号分隔的服务器标识。注意: 组必须是不相交的, 并且所有组联合后必须是 ZooKeeper 集群。</p><h4 id="weight-x-nnnnn"><a href="#weight-x-nnnnn" class="headerlink" title="weight.x=nnnnn"></a><code>weight.x=nnnnn</code></h4><p>没有对应的 Java 系统属性。</p><p>和 “group” 一起使用, 当形成集群时它给每个服务器赋权重值。这个值对应于投票时服务器的权重。ZooKeeper 中只有少数部分需要投票, 比如 leader 选举以及原子的广播协议。服务器权重的默认值是 1。如果配置文件中定义了组, 但是没有权重, 那么所有服务器的权重将会赋值为 1。</p><h5 id="cnxTimeout"><a href="#cnxTimeout" class="headerlink" title="cnxTimeout"></a><code>cnxTimeout</code></h5><p>对应的 Java 系统属性: <code>zookeeper.cnxTimeout。</code></p><p>用于配置 leader选举过程中，打开一次连接（选举的 server 互相通信建立连接）的超时时间。默认值是 5s。</p><h2 id="身份认证和授权选项"><a href="#身份认证和授权选项" class="headerlink" title="身份认证和授权选项"></a>身份认证和授权选项</h2><p>本节的选项允许通过身份认证和授权来控制服务执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">zookeeper.DigestAuthenticationProvider.superDigest</div><div class="line"></div><div class="line">对应的 Java 系统属性: zookeeper.DigestAuthenticationProvider.superDigest</div><div class="line"></div><div class="line">该功能默认是禁用的。</div><div class="line"></div><div class="line">能够使 ZooKeeper 集群管理员可以作为一个 <span class="string">"super"</span> 用户来访问 znode 层级结构。特别是对于一个已经认证为超级管理员的用户不需要 ACL 检查。</div><div class="line"></div><div class="line">org.apache.zookeeper.server.auth.DigestAuthenticationProvider 可以用来生成 superDigest, 调用它带有 <span class="string">"super:&lt;password&gt;"</span> 参数的方法。当启动集群中的每台服务器时, 将生成的 <span class="string">"super:&lt;data&gt;"</span> 作为系统属性提供。</div><div class="line"></div><div class="line">当 ZooKeeper 客户端向 ZooKeeper 服务器进行身份认证时, 会传递一个 <span class="string">"digest"</span> 和 <span class="string">"super:&lt;password&gt;"</span> 的认证数据. 注意摘要式身份验证将认证数据以普通文本的形式传递给服务器, 在网络中需要谨慎使用该认证方法, 要么只在本机上或通过一个加密的连接。</div><div class="line"></div><div class="line"><span class="comment">### 实验性选项/特性</span></div><div class="line"></div><div class="line">本节列举了一些目前还处于实验阶段的新特性。</div><div class="line"></div><div class="line"><span class="comment">### 服务器只读模式</span></div><div class="line"></div><div class="line">对应的 Java 系统属性: readonlymode.enabled。</div><div class="line"></div><div class="line">将其设置为 <span class="literal">true</span> 将会启用服务器只读模式支持, 默认是禁用的。ROM 允许请求了 ROM 支持的客户端会话连接到服务器, 即使当服务器可能已经从集群中分隔出去。在该模式中, ROM 客户端仍然可以从 ZK 服务中读取值, 但是不能进行写操作以及看见其它客户端所做的一些变更。更多详细信息可以参见 ZOOKEEPER-784 获取更多详细信息。</div><div class="line"></div><div class="line"><span class="comment">### 不安全的选项</span></div><div class="line"></div><div class="line">下面的选项会很有用, 但是使用的时候需要特别小心。</div><div class="line"></div><div class="line"><span class="comment">### forceSync</span></div><div class="line"></div><div class="line">对应的 Java 系统属性: zookeeper.forceSync。</div><div class="line"></div><div class="line">用于配置是否需要在事务日志提交的时候调用 FileChannel.force 来保证数据完全同步到磁盘。默认值是 <span class="string">"yes"</span>。如果该选项设置为 <span class="string">"no"</span>, ZooKeeper 将不会强制同步事务更新日志到磁盘。</div><div class="line"></div><div class="line"><span class="comment">### jute.maxbuffer:</span></div><div class="line"></div><div class="line">对应的 Java 系统属性: jute.maxbuffer。没有 zookeeper 前缀。</div><div class="line"></div><div class="line">用于指定一个 znode 中可以存储数据量的最大值, 默认值是 0xfffff, 或 1M 内。如果这个选项改变了, 那么该系统属性必须在所有的服务端和客户端进行设置, 否则会出现问题。ZooKeeper旨在存储大小为千字节数量的数据。</div><div class="line"></div><div class="line"><span class="comment">### skipACL</span></div><div class="line"></div><div class="line">对应的 Java 系统属性: zookeeper.skipACL。</div><div class="line"></div><div class="line">用于配置 ZooKeeper 服务器跳过 ACL 权限检查。这将一定程度的提高服务器吞吐量, 但是也向所有客户端完全开放数据访问。</div><div class="line"></div><div class="line"><span class="comment">### quorumListenOnAllIPs</span></div><div class="line"></div><div class="line">当设置为 <span class="literal">true</span> 时, ZooKeeper 服务器将会在所有可用的 IP 地址上监听来自其对等点的连接请求, 而不仅是配置文件的服务器列表中配置的地址。它会影响处理 ZAB 协议和 Fast Leader Election 协议的连接。默认值是 <span class="literal">false</span>。</div></pre></td></tr></table></figure><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ZooKeeper&lt;/code&gt;的功能特性通过 &lt;code&gt;ZooKeeper&lt;/code&gt; 配置文件来进行控制管理（ &lt;code&gt;zoo.cfg&lt;/code&gt; 配置文件）。 ZooKeeper 这样的设计其实是有它自身的原因的。通过前面对 &lt;code&gt;ZooKeeper&lt;/code&gt; 的配置可以看出，对 &lt;code&gt;ZooKeeper&lt;/code&gt;集群进行配置的时候，它的配置文档是完全相同的（对于集群伪分布模式来说，只有很少的部分是不同的）。这样的配置方使得在部署 &lt;code&gt;ZooKeeper&lt;/code&gt; 服务的时候非常地方便。另外，如果服务器使用不同的配置文件，必须要确保不同配置文件中的服务器列表相匹配。&lt;/p&gt;
&lt;p&gt;在设置 &lt;code&gt;ZooKeeper&lt;/code&gt; 配置文档的时候，某些参数是可选的，但是某些参数是必须的。这些必须的参数就构成了&lt;code&gt;ZooKeeper&lt;/code&gt; 配置文档的最低配置要求。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata" scheme="http://blog.yancy.cc/categories/Bigdata/"/>
    
    
      <category term="ZooKeeper" scheme="http://blog.yancy.cc/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-ZooKeeper集群快速搭建配置与扩容</title>
    <link href="http://blog.yancy.cc/2017/05/26/Bigdata-hadoop/zookeeper/Bigdata-ZooKeeper%E9%9B%86%E7%BE%A4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%89%A9%E5%AE%B9/"/>
    <id>http://blog.yancy.cc/2017/05/26/Bigdata-hadoop/zookeeper/Bigdata-ZooKeeper集群快速搭建配置与扩容/</id>
    <published>2017-05-26T06:46:00.000Z</published>
    <updated>2017-09-26T07:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ZooKeeper集群快速搭建"><a href="#ZooKeeper集群快速搭建" class="headerlink" title="ZooKeeper集群快速搭建"></a>ZooKeeper集群快速搭建</h3><p>之前搞过了hadoop和spark，hue，现在使用kafka集群结合zookeeper集群做数据消费处理，本文是<code>ZooKeeper</code>的快速搭建,旨在帮助大家以最快的速度完成一个<code>ZK</code>集群的搭建,以便开展其它工作。</p><a id="more"></a><h2 id="集群："><a href="#集群：" class="headerlink" title="集群："></a>集群：</h2><p>本文使用了3台机器部署ZooKeeper集群，IP和主机名对应关系如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IP             主机名</div><div class="line">169.44.62.11 zk1.jollychic.com </div><div class="line">169.44.59.12 zk2.jollychic.com</div><div class="line">169.44.62.13 zk3.jollychic.com</div></pre></td></tr></table></figure><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><p><code>Zookeeper</code>机器间不需要设置免密码登录，其它hadoop也可以不设置，只要不使用hadoop-daemons.sh来启动、停止进程，注意不是hadoop-daemon.sh，而是带“s”的那个，带“s”的会读取hadoop的salves文件，远程ssh启动DataNode和备NameNode等。</p><p>配置<code>/etc/hosts</code><br>将3台机器的IP和主机名映射关系，在3台机器上都配置一下，亦即在3台机器的<code>/etc/hosts</code>文件中，均增加以下内容（可以先配置好一台，然后通过scp等命令复制到其它机器上，注意主机名不能包含任何下划线）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost.localdomain localhost</div><div class="line">169.44.62.12 zk1.jollychic.com</div><div class="line">169.44.59.13 zk2.jollychic.com</div><div class="line">169.44.62.14 zk3.jollychic.com</div></pre></td></tr></table></figure><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1:"></a>Step1:</h3><p>配置JAVA环境。检验方法:执行 <code>java –version</code> 和 <code>javac –version</code> 命令。<br>下载并解压 <code>zookeeper</code>。<a href="http://mirror.bjtu.edu.cn/apache/zookeeper/zookeeper-3.4.3/" target="_blank" rel="external">链接一</a> ，<a href="http://www-eu.apache.org/dist/zookeeper/" target="_blank" rel="external">链接二</a> (更多版本:<a href="http://dwz.cn/37HGI" target="_blank" rel="external">http://dwz.cn/37HGI</a>)</p><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2:"></a>Step2:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.zookeeper的环境变量的配置：</div><div class="line">为了今后操作方便，我们需要对Zookeeper的环境变量进行配置，方法如下：</div><div class="line">在/etc/profile.d/zk.sh文件中加入如下的内容：</div><div class="line"></div><div class="line"><span class="comment">#set zookeeper environment</span></div><div class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/data/tools/zookeeper-3.4.5</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$ZOOKEEPER_HOME</span>/conf</div></pre></td></tr></table></figure><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3:"></a>Step3:</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">2.</span>下载以后解压到我自己新建的：</div><div class="line">[hadoop@namenode ~]$ tar -zxvf zookeeper<span class="number">-3.3</span><span class="number">.6</span>.tar.gz -C <span class="meta-keyword">/srv/</span>hadoop/</div><div class="line">[hadoop@namenode ]$ cd <span class="meta-keyword">/srv/</span>hadoop/zookeeper<span class="number">-3.3</span><span class="number">.6</span><span class="meta-keyword">/conf/</span></div><div class="line"></div><div class="line"><span class="meta">### 将zoo_sample.cfg拷贝一份命名为zoo.cfg,这里我拷贝一份命名为：zoo.cfg</span></div><div class="line">[hadoop@namenode conf]$ cp -r zoo_sample.cfg zoo.cfg</div><div class="line"></div><div class="line"><span class="meta">### 这里先创建/data和/logs 这两个目录。</span></div><div class="line"></div><div class="line">mkdir -p <span class="meta-keyword">/data/</span>tools/zookeeper<span class="number">-3.4</span><span class="number">.5</span><span class="meta-keyword">/zookeeper/</span>data</div><div class="line">mkdir -p <span class="meta-keyword">/data/</span>tools/zookeeper<span class="number">-3.4</span><span class="number">.5</span><span class="meta-keyword">/zookeeper/</span>logs</div></pre></td></tr></table></figure><p>注意上图的配置中master，slave1分别为主机名。</p><p>在上面的配置文件中<code>&quot;server.id=host:port:port&quot;</code>中的第一个port是从机器<code>（follower）</code>连接到主机器<code>（leader）</code>的端口号，第二个port是进行<code>leadership</code>选举的端口号。</p><p>修改配置：<code>zoo.cfg</code>修改有的默认存在，添加红色的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">tickTime=2000</div><div class="line">clientPort=2181</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">maxClientCnxns=0    <span class="comment">#这个是设置连接数0没有做限制</span></div><div class="line">dataDir=/data/tools/zookeeper-3.4.5/zookeeper/data</div><div class="line">dataLogDir=/data/tools/zookeeper-3.4.5/zookeeper/logs</div><div class="line"></div><div class="line">server.0=zk1.jollychic.com:2888:3888</div><div class="line">server.1=zk2.jollychic.com:2888:3888</div><div class="line">server.2=zk3.jollychic.com:2888:3888</div></pre></td></tr></table></figure><h3 id="创建maid"><a href="#创建maid" class="headerlink" title="创建maid:"></a>创建maid:</h3><p>这里所有节点都需要创建，接下来在<code>dataDir</code>所指定的目录下创建一个文件名为<code>myid</code>的文件，文件中的内容只有一行，为本主机对应的id值，也就是上图中<code>server.id</code>中的id。例如：在服务器1中的myid的内容应该写入1。<br>创建myid：在<code>zoo.cfg</code>配置文件中的dataDir的目录下面创建<code>myid</code>，每个节点myid要求不一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /data/tools/zookeeper-3.4.5/tmp/myid </div><div class="line">0</div></pre></td></tr></table></figure><h3 id="Step4"><a href="#Step4" class="headerlink" title="Step4:"></a>Step4:</h3><p>远程复制分发安装文件。<br>最好是把文件打包scp过去。<br>接下来将上面的安装文件拷贝到集群中的其他机器上对应的目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scp -P58958 -r zookeeper-3.4.5  jollybi@169.44.62.137:/data/tools/. </div><div class="line">scp -P58958 -r zookeeper-3.4.5  jollybi@169.44.59.138:/data/tools/. </div><div class="line">拷贝完成后修改对应的机器上的myid。例如修改其他两台机器中的myid如下：</div><div class="line"><span class="built_in">echo</span> 1 &gt; /data/tools/zookeeper-3.4.5/tmp/myid </div><div class="line"><span class="built_in">echo</span> 2 &gt; /data/tools/zookeeper-3.4.5/tmp/myid</div></pre></td></tr></table></figure><h3 id="Step5"><a href="#Step5" class="headerlink" title="Step5:"></a>Step5:</h3><p>启动 ZooKeeper集群<br>在ZooKeeper集群的每个结点上，执行启动ZooKeeper服务的脚本，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">在ZooKeeper集群的每个结点上，执行启动ZooKeeper服务的脚本，如下所示：</div><div class="line">[jollybi@zk1.jollychic.com ~]$   /data/tools/zookeeper-3.4.5/bin/zkServer.sh start </div><div class="line">[jollybi@zk1.jollychic.com ~]$   /data/tools/zookeeper-3.4.5/bin/zkServer.sh start </div><div class="line">[jollybi@zk1.jollychic.com ~]$   /data/tools/zookeeper-3.4.5/bin/zkServer.sh start </div><div class="line"></div><div class="line">[jollybi@zk1.jollychic.com ~]$ jps</div><div class="line">123189 QuorumPeerMain</div><div class="line">123309 Kafka</div><div class="line">1151 Jps</div></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/haozhuo/hadoop/zookeeper-3.4.5/bin/zkServer.sh start</div></pre></td></tr></table></figure><h3 id="Step6"><a href="#Step6" class="headerlink" title="Step6:"></a>Step6:</h3><p>检测是否成功启动:执行 <code>jps</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">24933 QuorumPeerMain</div></pre></td></tr></table></figure><p>其中，QuorumPeerMain是zookeeper进程，启动正常。</p><p><code>./zkServer.sh status</code> 查看当前运行状态。</p><p>namenode1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[jollybi@zk1.jollychic.com zookeeper-3.4.5]<span class="comment"># ./zkServer.sh status</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /srv/zookeeper-3.4.5/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line"></div><div class="line">[jollybi@zk1.jollychic.com zookeeper-3.4.5]<span class="comment"># ./bin/zkServer.sh status</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /srv/zookeeper-3.4.5/bin/../conf/zoo.cfg</div><div class="line">Mode: leader</div><div class="line"></div><div class="line">[jollybi@zk1.jollychic.com zookeeper-3.4.5]<span class="comment"># ./bin/zkServer.sh status</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /srv/zookeeper-3.4.5/bin/../conf/zoo.cfg</div><div class="line">Mode: leader</div></pre></td></tr></table></figure><h3 id="链接测试"><a href="#链接测试" class="headerlink" title="链接测试"></a>链接测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bin/zkCli.sh -server 127.0.0.1:2181</div><div class="line">bin/zkCli.sh -server 127.0.0.1:2181</div><div class="line">bin/zkCli.sh -server 127.0.0.1:2181</div></pre></td></tr></table></figure><h3 id="Step7"><a href="#Step7" class="headerlink" title="Step7:"></a>Step7:</h3><p>如果单台可以其他几台不行，看配置，如果没有问题。启动查看状态出现异常。</p><p>异常解决:<code>Error contacting service. It is probably not running.</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">而其他一个节点却是现实正常;</div><div class="line">先stop掉原zk</div><div class="line">./bin/zkServer.sh stop</div><div class="line">然后以start-foreground方式启动，会看到启动日志</div><div class="line">./bin/zkServer.sh start</div></pre></td></tr></table></figure><p>当出现问题的时候，记得查看日志zookeeper.out，在你配置的dataDir（在conf/zoo.cfg中查看）目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2015-12-29 11:09:38,034 [myid:1] - WARN  [WorkerSender[myid=1]:QuorumCnxManager@400] - Cannot open channel to 3 at election address Node2/10.0.0.102:38888</div><div class="line">java.net.ConnectException: 拒绝连接</div><div class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</div></pre></td></tr></table></figure><p>可以看到是连接到Node2的3888端口不通（我配置文件设置的节点端口，server.3=Node2:2888:3888），这样就找到问题了，所以当遇到问题的时候记得查看日志文件，这才是最有帮助的，而不是修改什么nc参数。</p><p>这里主要看下是否加入hosts</p><p>查看Node2节点发现，<code>38888端口</code>绑带到<code>127.0.0.1</code>上了，这让Master节点怎么连接呀，只需修改<code>/etc/hosts</code>文件即可，同理，修改Node1，然后重启zookeeper，发现问题解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost  zk1.jollychic.com</div><div class="line">::1        localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">169.44.62.12 zk1.jollychic.com</div><div class="line">169.44.59.13 zk2.jollychic.com</div><div class="line">169.44.62.14 zk3.jollychic.com</div></pre></td></tr></table></figure><p>这里我<code>127.0.0.1 localhost zk1.jollychic.com</code> 就可以了。</p><h3 id="Step8-如何扩容zookeeper？"><a href="#Step8-如何扩容zookeeper？" class="headerlink" title="Step8: 如何扩容zookeeper？"></a>Step8: 如何扩容zookeeper？</h3><p>只需要将已有的zookeeper打包复制到新的机器上，然后修改myid文件并设置好，然后启动zookeeper即可。</p><hr><h3 id="设置开机自动启动"><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h3><p>1.写个启动脚本放到<code>/etc/rc.d/init.d/zookeeper</code><br>这里<code>touch zookeeper &amp;&amp; chmod +x zookeeper &amp;&amp; vim zookeeper</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">!/bin/bash</div><div class="line"><span class="comment">#chkconfig:2345 20 90</span></div><div class="line"><span class="comment">#description:zookeeper</span></div><div class="line"><span class="comment">#processname:zookeeper</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/srv/jdk1.8.0_66</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">    start) su root /srv/zookeeper-3.3.6/bin/zkServer.sh start;;</div><div class="line">    stop) su root /srv/zookeeper-3.3.6/bin/zkServer.sh stop;;</div><div class="line">    status) su root /srv/zookeeper-3.3.6/bin/zkServer.sh status;;</div><div class="line">    restart) su root /srv/zookeeper-3.3.6/bin/zkServer.shrestart;;</div><div class="line">    *)  <span class="built_in">echo</span> <span class="string">"requirestart|stop|status|restart"</span>;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure><p>2.设置开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig zookeeper on</div></pre></td></tr></table></figure><p>3.验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig --add zookeeper</div><div class="line">chkconfig --list zookeeper</div></pre></td></tr></table></figure><p>这个时候我们就可以用service zookeeper start/stop来启动停止zookeeper服务了.<br>使用<code>chkconfig--add zookeeper</code>命令把<code>zookeeper</code>添加到开机启动里面<br>添加完成之后接这个使用<code>chkconfig--list</code>来看看我们添加的<code>zookeeper</code>是否在里面<br>如果上面的操作都正常的话；重启服务器测试就行。</p><div class="tip"><br><br>注意：zookeeper重启出现几种报错：<br><br>1. 启动服务报错找不到指定好的pid文件。<br>2. 关闭服务报错没有在/tmp/路径下面没有/srv/zookeeper-3.3.6/zookeeper/data/zookeeper_server.pid<br></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@zookeeper zookeeper-3.3.6]<span class="comment"># ./bin/zkServer.sh start</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /srv/zookeeper-3.3.6/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... ./bin/zkServer.sh: line 93: [: /tmp/zookeeper: binary operator expected</div><div class="line">./bin/zkServer.sh: line 103: /tmp/zookeeper</div><div class="line">/srv/zookeeper-3.3.6/zookeeper/data/zookeeper_server.pid: 没有那个文件或目录</div><div class="line">FAILED TO WRITE PID</div><div class="line">[root@zookeeper zookeeper-3.3.6]<span class="comment"># ./bin/zkServer.sh stop</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /srv/zookeeper-3.3.6/bin/../conf/zoo.cfg</div><div class="line">Stopping zookeeper ... no zookeeper to stop (could not find file /tmp/zookeeper</div><div class="line">/srv/zookeeper-3.3.6/zookeeper/data/zookeeper_server.pid)</div></pre></td></tr></table></figure><p>解决方法：网上很少有人讲这么详细，这里我就说下，就是你在修改zoo.cfg配置文件里面：</p><p>dataDir指定的路径是自定义的话等于的时候不要空格写。</p><p>如果重新另外写dataDir ,不要注释掉之前的，最好直接删除，重新指定这样就不会报错了，如果注释掉默认的<code>#dataDir = /tmp</code>这里需要空格。</p><h3 id="Step9-报错占用端口："><a href="#Step9-报错占用端口：" class="headerlink" title="Step9.报错占用端口："></a>Step9.报错占用端口：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/app/zookeeper/bin/../conf/zoo3.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure><p>查看状态：<br>用jps命令查看进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># jps</span></div><div class="line">24617 QuorumPeerMain （这个就是zookeeper进程）</div><div class="line"></div><div class="line">/opt/app/zookeeper/bin/zkServer.sh status zoo1.cfg</div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/app/zookeeper/bin/../conf/zoo1.cfg</div><div class="line">Error contacting service. It is probably not running.</div></pre></td></tr></table></figure><p>Ihaozhuo_b3314<br>说明有错误，查看日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd &lt;zookeeper_home&gt;</span></div><div class="line"><span class="comment"># less zookeeper.out</span></div><div class="line">java.net.BindException: 地址已在使用</div><div class="line">杀掉当前进程：</div><div class="line"><span class="comment"># kill -9 24617</span></div></pre></td></tr></table></figure><h4 id="报错-启动服务正常。"><a href="#报错-启动服务正常。" class="headerlink" title="报错: 启动服务正常。"></a>报错: 启动服务正常。</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@api1 zookeeper<span class="number">-3.3</span><span class="number">.6</span>]<span class="comment"># ./bin/zkServer.sh start</span></div><div class="line">JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/srv/zookeeper-3.3.6/bin/</span>../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure><p>可是查询进程不存在，可是看pid是有的，然后关闭服务就说没有这个进程。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using <span class="string">config:</span> <span class="regexp">/srv/</span>zookeeper<span class="number">-3.3</span><span class="number">.6</span><span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Stopping zookeeper ... ./zkServer.<span class="string">sh:</span> line <span class="number">133</span>: <span class="string">kill:</span> (<span class="number">31415</span>) - 没有那个进程</div></pre></td></tr></table></figure><h4 id="走kafka查看是否所有节点都启动："><a href="#走kafka查看是否所有节点都启动：" class="headerlink" title="走kafka查看是否所有节点都启动："></a>走kafka查看是否所有节点都启动：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@kafka_03 bin]<span class="comment"># sh zkCli.sh</span></div><div class="line">Connecting to localhost:2181</div><div class="line">2017-01-04 19:20:24,849 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT</div><div class="line">2017-01-04 19:20:24,853 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=kafka_03</div><div class="line">2017-01-04 19:20:24,853 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_66</div><div class="line">2017-01-04 19:20:24,856 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</div><div class="line">2017-01-04 19:20:24,856 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/srv/jdk1.8.0_66/jre</div><div class="line">2017-01-04 19:20:24,856 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/srv/zookeeper-3.4.6/bin/../build/classes:/srv/zookeeper-3.4.6/bin/../build/lib/*.jar:/srv/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/srv/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/srv/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/srv/zookeeper-3.4.6/bin/../lib/<span class="built_in">log</span>4j-1.2.16.jar:/srv/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/srv/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/srv/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/srv/zookeeper-3.4.6/bin/../conf:</div><div class="line">2017-01-04 19:20:24,856 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line"></div><div class="line">[zk: localhost:2181(CONNECTED) 0] ls /</div><div class="line">[controller_epoch, brokers, zookeeper, kafka, dubbo, admin, isr_change_notification, consumers, config, sthp]</div><div class="line">[zk: localhost:2181(CONNECTED) 5] ls /kafka/brokers/ids</div><div class="line">[0, 1, 2]</div><div class="line"></div><div class="line">显示0 1 2 三台集群机器。</div></pre></td></tr></table></figure><p>kafka 三台集群这里可以看到获取到ids。</p><h3 id="Step10-相关文档"><a href="#Step10-相关文档" class="headerlink" title="Step10: 相关文档"></a>Step10: 相关文档</h3><p>《HBase-0.98.0分布式安装指南》</p><p>《Hive 0.12.0安装指南》</p><p>《ZooKeeper-3.4.6分布式安装指南》</p><p>《Hadoop 2.3.0源码反向工程》</p><p>《在Linux上编译Hadoop-2.4.0》</p><p>《Accumulo-1.5.1安装指南》</p><p>《Drill 1.0.0安装指南》</p><p>《Shark 0.9.1安装指南》</p><p>更多，敬请关注技术博客：<a href="http://blog.yancy.cc">http://blog.yancy.cc</a></p><h3 id="Step11-结束语"><a href="#Step11-结束语" class="headerlink" title="Step11:  结束语"></a>Step11:  结束语</h3><p>至此，ZooKeeper分布式安装大告成功！更多细节，请浏览<a href="http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html" target="_blank" rel="external">官方文档</a></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ZooKeeper集群快速搭建&quot;&gt;&lt;a href=&quot;#ZooKeeper集群快速搭建&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper集群快速搭建&quot;&gt;&lt;/a&gt;ZooKeeper集群快速搭建&lt;/h3&gt;&lt;p&gt;之前搞过了hadoop和spark，hue，现在使用kafka集群结合zookeeper集群做数据消费处理，本文是&lt;code&gt;ZooKeeper&lt;/code&gt;的快速搭建,旨在帮助大家以最快的速度完成一个&lt;code&gt;ZK&lt;/code&gt;集群的搭建,以便开展其它工作。&lt;/p&gt;
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="ZooKeeper" scheme="http://blog.yancy.cc/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-开源的Kafka集群管理器(kafka-web-console)</title>
    <link href="http://blog.yancy.cc/2017/05/25/Bigdata-hadoop/Kafka/Bigdata-%E5%BC%80%E6%BA%90%E7%9A%84Kafka%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%99%A8(kafka-web-console)/"/>
    <id>http://blog.yancy.cc/2017/05/25/Bigdata-hadoop/Kafka/Bigdata-开源的Kafka集群管理器(kafka-web-console)/</id>
    <published>2017-05-25T06:46:00.000Z</published>
    <updated>2017-10-30T10:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>源码的地址在:<a href="https://github.com/claudemamo/kafka-web-console" target="_blank" rel="external">kafka-web-console</a></p><p><code>Kafka Web Console</code>也是用Scala语言编写的<code>Java web</code>程序用于监控<code>Apache Kafka</code>。这个系统的功能和<code>KafkaOffsetMonitor</code>很类似，但是我们从源码角度来看，这款系统实现比<code>KafkaOffsetMonitor</code>要复杂很多，而且编译配置比<code>KafkaOffsetMonitor</code>较麻烦。</p><a id="more"></a><p>　要想运行这套系统我们需要的先行条件为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Play Framework 2.2.x</div><div class="line">Apache Kafka 0.8.x</div><div class="line">Zookeeper 3.3.3 or 3.3.4</div></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>同样，我们从<code>https://github.com/claudemamo/kafka-web-console</code>上面将源码下载下来，然后用<code>sbt</code>进行编译，在编译前我们需要做如下的修改：</p><p>Kafka Web控制台需要一个关系数据库。默认情况下，服务器连接到嵌入式H2数据库，不需要数据库安装或配置。请咨询Play！的文档以指定控制台的数据库。支持以下数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/claudemamo/kafka-web-console.git</div></pre></td></tr></table></figure><ul><li>H2（默认）</li><li>PostgreSql</li><li>Oracle</li><li>DB2</li><li>MySQL</li><li>Apache Derby</li><li>Microsoft SQL Server</li></ul><p>为了方便，我们可以使用Mysql数据库，只要做如下修改即可，找到 <code>conf/application.conf</code>文件，并修改如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">将这个</div><div class="line">db.default.driver=org.h2.Driver</div><div class="line">db.default.url=<span class="string">"jdbc:h2:file:play"</span></div><div class="line"><span class="comment"># db.default.user=sa</span></div><div class="line"><span class="comment"># db.default.password=""</span></div><div class="line"> </div><div class="line"> </div><div class="line">修改成</div><div class="line">db.default.driver=com.mysql.jdbc.Driver</div><div class="line">db.default.url=<span class="string">"jdbc:mysql://localhost:3306/kafkamonitor"</span></div><div class="line">db.default.user=iteblog</div><div class="line">db.default.pass=wyp</div></pre></td></tr></table></figure><p>我们还需要修改build.sbt，加入对Mysql的依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"mysql"</span> % <span class="string">"mysql-connector-java"</span> % <span class="string">"5.1.31"</span></div></pre></td></tr></table></figure><p>　2、执行<code>conf/evolutions/default/bak</code>目录下面的<code>1.sql、2.sql和3.sql</code>三个文件。需要注意的是，这三个sql文件不能直接运行，有语法错误，需要做一些修改。<br>上面的注意事项弄完之后，我们就可以编译下载过来的源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sbt package</span></div></pre></td></tr></table></figure><p>编译的过程比较慢，有些依赖包下载速度非常地慢，请耐心等待。<br>　在编译的过程中，可能会出现有些依赖包无法下载，如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[warn] module not found: com.typesafe.play<span class="comment">#sbt-plugin;2.2.1</span></div><div class="line">[warn] ==== typesafe-ivy-releases: tried</div><div class="line">[warn] http://repo.typesafe.com/typesafe/ivy-releases/</div><div class="line">com.typesafe.play/sbt-plugin/scala_2.9.2/sbt_0.12/2.2.1/ivys/ivy.xml</div><div class="line">[warn] ==== sbt-plugin-releases: tried</div><div class="line">[warn] http://scalasbt.artifactoryonline.com/scalasbt/sbt-plugin-releases/</div><div class="line">com.typesafe.play/sbt-plugin/scala_2.9.2/sbt_0.12/2.2.1/ivys/ivy.xml</div><div class="line">[warn] ==== <span class="built_in">local</span>: tried</div><div class="line">[warn] /home/iteblog/.ivy2/<span class="built_in">local</span>/com.typesafe.play/</div><div class="line">sbt-plugin/scala_2.9.2/sbt_0.12/2.2.1/ivys/ivy.xml</div><div class="line">[warn] ==== Typesafe repository: tried</div><div class="line">[warn] http://repo.typesafe.com/typesafe/releases/com/</div><div class="line">typesafe/play/sbt-plugin_2.9.2_0.12/2.2.1/sbt-plugin-2.2.1.pom</div><div class="line">[warn] ==== public: tried</div><div class="line">[warn] http://repo1.maven.org/maven2/com/typesafe/play/</div><div class="line">sbt-plugin_2.9.2_0.12/2.2.1/sbt-plugin-2.2.1.pom</div><div class="line">[warn] ::::::::::::::::::::::::::::::::::::::::::::::</div><div class="line"> </div><div class="line">==== <span class="built_in">local</span>: tried</div><div class="line"> </div><div class="line">/home/iteblog/.ivy2/<span class="built_in">local</span>/org.scala-sbt/collections/0.13.0/jars/collections.jar</div><div class="line"> </div><div class="line">::::::::::::::::::::::::::::::::::::::::::::::</div><div class="line"> </div><div class="line">:: FAILED DOWNLOADS ::</div><div class="line"> </div><div class="line">:: ^ see resolution messages <span class="keyword">for</span> details ^ ::</div><div class="line"> </div><div class="line">::::::::::::::::::::::::::::::::::::::::::::::</div><div class="line"> </div><div class="line">:: org.scala-sbt<span class="comment">#collections;0.13.0!collections.jar</span></div><div class="line"> </div><div class="line">::::::::::::::::::::::::::::::::::::::::::::::</div></pre></td></tr></table></figure><p>我们可以手动地下载相关依赖，并放到类似<code>/home/iteblog/.ivy2/local/org.scala-sbt/collections/0.13.0/jars/</code>目录下面。然后再编译就可以了。</p><p>　　最后，我们可以通过下面命令启动<code>Kafka Web Console</code>监控系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sbt run</span></div></pre></td></tr></table></figure><p>并可以在<a href="http://localhost:9000" target="_blank" rel="external">http://localhost:9000</a> 查看下面是一张效果图</p><p><figure class="figure"><img src="https://www.iteblog.com/pic/topics.png" alt=""></figure></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;源码的地址在:&lt;a href=&quot;https://github.com/claudemamo/kafka-web-console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kafka-web-console&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kafka Web Console&lt;/code&gt;也是用Scala语言编写的&lt;code&gt;Java web&lt;/code&gt;程序用于监控&lt;code&gt;Apache Kafka&lt;/code&gt;。这个系统的功能和&lt;code&gt;KafkaOffsetMonitor&lt;/code&gt;很类似，但是我们从源码角度来看，这款系统实现比&lt;code&gt;KafkaOffsetMonitor&lt;/code&gt;要复杂很多，而且编译配置比&lt;code&gt;KafkaOffsetMonitor&lt;/code&gt;较麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://blog.yancy.cc/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="http://blog.yancy.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>ZABBIX 3.0 自动发现  (九)</title>
    <link href="http://blog.yancy.cc/2017/05/21/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/Zabbix/ZABBIX%203.0%20%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%20%20(%E4%B9%9D)/"/>
    <id>http://blog.yancy.cc/2017/05/21/性能监控/Zabbix/ZABBIX 3.0 自动发现  (九)/</id>
    <published>2017-05-21T10:42:58.000Z</published>
    <updated>2017-11-22T07:06:47.926Z</updated>
    
    <content type="html"><![CDATA[<p>####自动化分类</p><p><strong>所有的自动化都可以分为2种</strong> </p><blockquote><p>1.自动注册 </p></blockquote><ul><li>zabbix-agnet自动添加 </li></ul><blockquote><p>2.主动发现 </p></blockquote><ul><li>自动发现 Discover</li><li>zabbix api</li></ul><a id="more"></a><h4 id="Zabbix自动发现-Discovery-功能使用"><a href="#Zabbix自动发现-Discovery-功能使用" class="headerlink" title="Zabbix自动发现(Discovery)功能使用"></a>Zabbix自动发现(Discovery)功能使用</h4><p>随着监控主机不断增多，有的时候需要添加一批机器，特别是刚用zabbix的运维人员需要将公司的所有服务器添加到zabbix，如果使用传统办法去单个添加设备、分组、项目、图像…..结果应该是让人吐的结果。<br>鉴于这个问题我们可以好好利用下Zabbix的一个发现(Discovery)模块，进而来实现<code>自动刚发现主机、自动将主机添加到主机组、自动加载模板、自动创建项目（item）、自动创建图像</code>，下面我们来看看这个模块如何使用。</p><p>#####Hadoop集群自动发现：</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong.png" alt=""></figure></p><h5 id="一、自动注册设置-zabbix-agent配置"><a href="#一、自动注册设置-zabbix-agent配置" class="headerlink" title="一、自动注册设置 zabbix-agent配置"></a>一、自动注册设置 zabbix-agent配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@wlj-datanode10 zabbix]<span class="comment"># cat zabbix_agentd.conf</span></div><div class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</div><div class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agentd.log</div><div class="line">LogFileSize=0</div><div class="line">Server=10.155.74.153</div><div class="line"><span class="comment"># 主动模式下的zabbix服务端</span></div><div class="line">ServerActive=10.155.74.153</div><div class="line"><span class="comment"># 主机名(这个会自动加入到zabbix-server断的主机显示中)</span></div><div class="line">Hostname=wlj-datanode10.jollychic.com-169.44.23.133</div><div class="line">Timeout=10</div><div class="line">UnsafeUserParameters=1</div><div class="line">HostMetadata=bi  <span class="comment"># 作为server端的判断条件入口</span></div></pre></td></tr></table></figure><p>我们先不重启，因为重启就生效了。我们需要设置一个规则，如果已经设置好规则可以重启。</p><p>✨✨提示： zabbix-agent起来的时候回去找Server，这时候就会产生一个事件，然后我们可以基于这个事件来完成一个动作。 </p><ul><li>Configuration - Actions - Create action</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong1.png" alt=""></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name:bi-data</div><div class="line">Default subject : Auto registration: &#123;HOST.HOST&#125;</div><div class="line">Default message :</div><div class="line"></div><div class="line">Host name: &#123;HOST.HOST&#125;</div><div class="line">Host IP: &#123;HOST.IP&#125;</div><div class="line">Agent port: &#123;HOST.PORT&#125;</div></pre></td></tr></table></figure><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong2.png" alt=""></figure></p><p>选择新的触发条件选择下拉框中的服务类型</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong3.png" alt=""></figure></p><ul><li>选择发送告警对应的用户组-发送方式微信告警</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong4.png" alt=""></figure></p><ul><li>选择自动发现服务器添加相应的分组</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong6.png" alt=""></figure></p><ul><li>选择自动发现服务器添加相应监控模板</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong7.png" alt=""></figure></p><p>修改完之后我们在重启一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wlj-datanode3 ~]<span class="comment"># systemctl restart zabbix-agent.service</span></div></pre></td></tr></table></figure><p>自动发现可以去扫描IP地址范围（需要手动设置）进行发现的动作 </p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong8.png" alt=""></figure></p><h4 id="监控告警接收："><a href="#监控告警接收：" class="headerlink" title="监控告警接收："></a>监控告警接收：</h4><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/zabbix3.0-zidong9.png" alt=""></figure></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####自动化分类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的自动化都可以分为2种&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.自动注册 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;zabbix-agnet自动添加 &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2.主动发现 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;自动发现 Discover&lt;/li&gt;
&lt;li&gt;zabbix api&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="monitoring" scheme="http://blog.yancy.cc/categories/monitoring/"/>
    
    
      <category term="Zabbix monitoring" scheme="http://blog.yancy.cc/tags/Zabbix-monitoring/"/>
    
  </entry>
  
  <entry>
    <title>ElasticStack 5.x集群+Kibana-5.5.x+Logstash5.5+kafka2.10版本部署概述</title>
    <link href="http://blog.yancy.cc/2017/05/11/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%10%E5%B9%B3%E5%8F%B0/Elasticsearch/ElasticStack%205.x%E9%9B%86%E7%BE%A4+Kibana-5.5.x+Logstash5.5+kafka2.10%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.yancy.cc/2017/05/11/日志分析平台/Elasticsearch/ElasticStack 5.x集群+Kibana-5.5.x+Logstash5.5+kafka2.10版本部署概述/</id>
    <published>2017-05-11T09:56:03.000Z</published>
    <updated>2017-11-19T04:24:00.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticStack-5-x介绍"><a href="#ElasticStack-5-x介绍" class="headerlink" title="ElasticStack 5.x介绍"></a>ElasticStack 5.x介绍</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/elastic-elk-b.png" alt=""></figure><br><code>ELK=ElasticSearch 官方博客:分布式以及 Elastic</code></p><p>Elastic Stack是ELK日志系统的官方称呼，而ELK则是盛名在外的一款开源分布式日志系统，一般说来包括了Elasticsearch、Logstash和Kibana，涵盖了后端日志采集、日志搜索服务和前端数据展示等功能。<br>本文将会对Elastic Stack的安装部署流程进行一系列简单的介绍，并记录下了一些部署过程中遇到的坑及解决方法。</p><p>对于一个软件或互联网公司来说，对计算资源和应用进行监控和告警是非常基础的需求。对于大公司或成熟公司，一个高度定制化的监控系统应该已经存在了很长时间并且非常成熟了。而对于一个初创公司或小公司来说，如何利用现有开源工具快速搭建一套日志监控及分析平台是需要探索的事情。</p><a id="more"></a><h3 id="监控系统的用户："><a href="#监控系统的用户：" class="headerlink" title="监控系统的用户："></a>监控系统的用户：</h3><ul><li>运维，开发，产品</li></ul><p>监控系统应该可以解决如下的问题：</p><ul><li>监控server的各项基础指标，比如<code>memory,cpu,load,network</code>等</li><li>监控应用的状态。</li><li>搜集应用日志，并进行分析和统计。通过日志分析和统计可得到应用的访问统计，异常统计，业务统计。具有进行大规模日志数据的分析和处理能力。</li><li>可制定告警规则。各种监控数据进入系统后，可以根据条件触发告警，实时的将应用异常情况推送到运维、开发或业务人员的IM/SMS上。</li><li>可定制的看板。可以将各种实时统计或报表直观的显示出来。</li></ul><h3 id="可选方案："><a href="#可选方案：" class="headerlink" title="可选方案："></a>可选方案：</h3><p>日志宝，日志易，Logtail(阿里云) 这是我们后面换 <code>Graylog</code>这个是一批黑马 也分享出来。</p><p>优势：使用简单<br>劣势：需上传日志到外部，不灵活，不易扩展，需付费</p><p>flume-ng + kafka + spark streaming + hbase(es/mysql) + zepplin/自研web展示</p><p>优势：<code>灵活，易于扩展，数据分析和处理能力强</code><br>劣势：<code>开发难度高，周期长，维护成本高</code></p><h3 id="ELK优势和劣势："><a href="#ELK优势和劣势：" class="headerlink" title="ELK优势和劣势："></a>ELK优势和劣势：</h3><p>优势：<code>开源成熟解决方案，使用简单，扩展能力强</code><br>劣势：<code>日志分析和处理依靠logstash完成，处理能力较低，无法适应复杂的日志分析场景</code><br>结论：<code>初步选择ELK搭建起监控平台，其能够满足当前较为简单的监控和分析需求。未来如果不能适应，再考虑其他方案。</code></p><p>在本次实践中，我们所部署的ELK分布式日志系统，其架构大致如下：</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/elasticstack_011.png" alt=""></figure><br>首先在各日志产生机上部署收集器<code>Filebeat</code>，然后Filebeat将监控到的log文件变化数据传至Kafka集群，<code>Logstash</code>负责将数据从<code>kafka</code>中拉取下来，并进行字段解析，向<code>Elasticsearch</code>输出结构化后的日志，<code>Kibana负责将Elasticsearch</code>中的数据进行可视化。</p><p>【重点参考】：<a href="http://kibana.logstash.es/content/" target="_blank" rel="external">ELK中文书</a></p><h3 id="一、Elasticsearch集群1部署"><a href="#一、Elasticsearch集群1部署" class="headerlink" title="一、Elasticsearch集群1部署"></a>一、Elasticsearch集群1部署</h3><p>首先在<code>https://www.elastic.co</code>中找到ES的安装包。下文中所用的安装包均为Linux 64的<code>tar.gz</code>压缩包，解压即可用。官网安装方法:<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html" target="_blank" rel="external">Installation example with tar</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.tar.gz</div><div class="line">tar -xvf elasticsearch-5.5.2.tar.gz</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.5.2/bin</div><div class="line">useradd elasticsearch </div><div class="line">chown -R  /usr/<span class="built_in">local</span>/elasticsearch-5.5.2/</div><div class="line">su - elasticsearch -c <span class="string">"/usr/local/elasticsearch-5.5.2/bin/elasticsearch -d"</span></div><div class="line">这里我切换普通es用户启动，记得给予权限。</div></pre></td></tr></table></figure><p><code>Elasticsearch</code>至少需要<code>Java 8</code>。在撰写本文时，建议您使用<code>Oracle JDK</code>版本<code>1.8.0_131</code>。Java安装因平台而异，所以我们在这里不再赘述。Oracle的推荐安装文档可以在Oracle的网站上找到。在安装Elasticsearch之前，请先检查您的Java版本，然后再运行（如果需要，请相应地进行安装/升级）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></div></pre></td></tr></table></figure><ul><li>JVM参数设置</li></ul><p>ElasticSearch5.0.0需要设置服务器<code>max_map_count</code><br>ElasticSearch5.0.0要求最小为<code>262144</code> 默认内存是2G 这里我给6G内存.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vim config/jvm.options</div><div class="line">-Xms6g</div><div class="line">-Xmx6g</div><div class="line">-XX:+UseConcMarkSweepGC</div><div class="line">-XX:CMSInitiatingOccupancyFraction=75</div><div class="line">-XX:+UseCMSInitiatingOccupancyOnly</div><div class="line">-XX:+AlwaysPreTouch</div><div class="line">-server</div><div class="line">-Xss1m</div><div class="line">-Djava.awt.headless=<span class="literal">true</span></div><div class="line">-Dfile.encoding=UTF-8</div><div class="line">-Djna.nosys=<span class="literal">true</span></div><div class="line">-Djdk.io.permissionsUseCanonicalPath=<span class="literal">true</span></div><div class="line">-Dio.netty.noUnsafe=<span class="literal">true</span></div><div class="line">-Dio.netty.noKeySetOptimization=<span class="literal">true</span></div><div class="line">-Dio.netty.recycler.maxCapacityPerThread=0</div><div class="line">-D<span class="built_in">log</span>4j.shutdownHookEnabled=<span class="literal">false</span></div><div class="line">-D<span class="built_in">log</span>4j2.disable.jmx=<span class="literal">true</span></div><div class="line">-D<span class="built_in">log</span>4j.skipJansi=<span class="literal">true</span></div><div class="line">-XX:+HeapDumpOnOutOfMemoryError</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@logstash ~]<span class="comment"># curl http://localhost:9200?pretty</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"s-28M-e"</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"0U3blQviRcSG_pq8KFQ5EA"</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"5.5.2"</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"b2f0c09"</span>,</div><div class="line">    <span class="string">"build_date"</span> : <span class="string">"2017-08-14T12:33:14.154Z"</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="1-1-Elasticsearch的配置"><a href="#1-1-Elasticsearch的配置" class="headerlink" title="1.1 Elasticsearch的配置"></a>1.1 Elasticsearch的配置</h4><p>ES的配置文件在解压根目录下的config文件夹中，其中elasticsearch.yml是主配置文件。<br>以基本可用作为部署目标，在该文件中仅需要设置几个重要参数：</p><ol><li><code>cluster.name、node.name</code>这两者顾名思义，作为集群和节点的标识符。</li><li><code>Paths部分下的path.data和path.logs</code>，表示ES的数据存放位置，前者为数据存储位置，后者为ES的log存储位置。请尽量放到剩余空间足够的地方，此外在进行调优时有一种方法是将数据放置到SSD上。</li><li><code>bootstrap.memory_lock: true</code>，设为true以确保ES拥有足够的JVM内存。</li><li><code>network.host: localhost和http.port</code>，在此处设置ES对外服务的IP地址与端口<br>设置完以上几项参数后，即可在ES根目录下使用命令./bin/elasticsearch启动ES进程。也有相应的后台启动方式，具体不赘述。</li></ol><p><strong>主要配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[elasticsearch@logstash elasticsearch-5.5.2]$ cat config/elasticsearch.yml | grep -Pv <span class="string">"^$|^#"</span></div><div class="line">cluster.name: jolly-cluster</div><div class="line">node.master: <span class="literal">true</span></div><div class="line">node.data: <span class="literal">true</span></div><div class="line">node.name: es-jollychic-node1</div><div class="line">path.data: /data/elasticsearch/es-data</div><div class="line">path.logs: /data/elasticsearch/es-logs</div><div class="line">bootstrap.memory_lock: <span class="literal">true</span></div><div class="line">bootstrap.system_call_filter: <span class="literal">false</span></div><div class="line">network.host: 10.11.10.26,127.0.0.1</div><div class="line">http.port: 9200</div><div class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"10.11.10.26"</span>, <span class="string">"10.155.90.176"</span>]</div><div class="line">http.cors.enabled: <span class="literal">true</span></div><div class="line">http.cors.allow-origin: <span class="string">"*"</span></div></pre></td></tr></table></figure><p>es 配置完以后启动会出现报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[2017-08-19T22:06:01,722][INFO ][o.e.n.Node               ] [es-jollychic-node1] initializing ...</div><div class="line">[2017-08-19T22:06:01,789][INFO ][o.e.e.NodeEnvironment    ] [es-jollychic-node1] using [1] data paths, mounts [[/data (/dev/mapper/sdb--vg-sdb--lv)]], net usable_space [190.2gb], net total_space [196.7gb], spins? [possibly], types [ext4]</div><div class="line">[2017-08-19T22:06:01,789][INFO ][o.e.e.NodeEnvironment    ] [es-jollychic-node1] heap size [1.9gb], compressed ordinary object pointers [<span class="literal">true</span>]</div><div class="line">[2017-08-19T22:06:01,790][INFO ][o.e.n.Node               ] [es-jollychic-node1] node name [es-jollychic-node1], node ID [yjFGVTcIRg2YQectzevnOA]</div><div class="line">[2017-08-19T22:06:01,790][INFO ][o.e.n.Node               ] [es-jollychic-node1] version[5.5.2], pid[13530], build[b2f0c09/2017-08-14T12:33:14.154Z], OS[Linux/3.10.0-514.26.2.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_144/25.144-b01]</div><div class="line">[2017-08-19T22:06:01,790][INFO ][o.e.n.Node               ] [es-jollychic-node1] JVM arguments [-Xms2g, -Xmx2g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=<span class="literal">true</span>, -Dfile.encoding=UTF-8, -Djna.nosys=<span class="literal">true</span>, -Djdk.io.permissionsUseCanonicalPath=<span class="literal">true</span>, -Dio.netty.noUnsafe=<span class="literal">true</span>, -Dio.netty.noKeySetOptimization=<span class="literal">true</span>, -Dio.netty.recycler.maxCapacityPerThread=0, -D<span class="built_in">log</span>4j.shutdownHookEnabled=<span class="literal">false</span>, -D<span class="built_in">log</span>4j2.disable.jmx=<span class="literal">true</span>, -D<span class="built_in">log</span>4j.skipJansi=<span class="literal">true</span>, -XX:+HeapDumpOnOutOfMemoryError, -Des.path.home=/usr/<span class="built_in">local</span>/elasticsearch-5.5.2]</div><div class="line">[2017-08-19T22:06:02,583][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [aggs-matrix-stats]</div><div class="line">[2017-08-19T22:06:02,583][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [ingest-common]</div><div class="line">[2017-08-19T22:06:02,586][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [lang-expression]</div><div class="line">[2017-08-19T22:06:02,586][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [lang-groovy]</div><div class="line">[2017-08-19T22:06:02,586][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [lang-mustache]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [lang-painless]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [parent-join]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [percolator]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [reindex]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [transport-netty3]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] loaded module [transport-netty4]</div><div class="line">[2017-08-19T22:06:02,587][INFO ][o.e.p.PluginsService     ] [es-jollychic-node1] no plugins loaded</div><div class="line">[2017-08-19T22:06:04,212][INFO ][o.e.d.DiscoveryModule    ] [es-jollychic-node1] using discovery <span class="built_in">type</span> [zen]</div><div class="line">[2017-08-19T22:06:04,635][INFO ][o.e.n.Node               ] [es-jollychic-node1] initialized</div><div class="line">[2017-08-19T22:06:04,635][INFO ][o.e.n.Node               ] [es-jollychic-node1] starting ...</div><div class="line">[2017-08-19T22:06:04,812][INFO ][o.e.t.TransportService   ] [es-jollychic-node1] publish_address &#123;10.11.10.26:9300&#125;, bound_addresses &#123;10.11.10.26:9300&#125;</div><div class="line">[2017-08-19T22:06:04,821][INFO ][o.e.b.BootstrapChecks    ] [es-jollychic-node1] bound or publishing to a non-loopback or non-link-local address, enforcing bootstrap checks</div><div class="line">[2017-08-19T22:06:04,823][ERROR][o.e.b.Bootstrap          ] [es-jollychic-node1] node validation exception</div><div class="line">[1] bootstrap checks failed</div><div class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</div><div class="line">[2017-08-19T22:06:04,825][INFO ][o.e.n.Node               ] [es-jollychic-node1] stopping ...</div><div class="line">[2017-08-19T22:06:04,840][INFO ][o.e.n.Node               ] [es-jollychic-node1] stopped</div><div class="line">[2017-08-19T22:06:04,840][INFO ][o.e.n.Node               ] [es-jollychic-node1] closing ...</div><div class="line">[2017-08-19T22:06:04,851][INFO ][o.e.n.Node               ] [es-jollychic-node1] closed</div></pre></td></tr></table></figure><ul><li>如果修改完会报错，修改下Linux系统参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">max file descriptors [4096] <span class="keyword">for</span> elasticsearch process likely too low, increase to at least [65536]</div><div class="line">max number of threads [1024] <span class="keyword">for</span> user [lishang] likely too low, increase to at least [2048]</div><div class="line">解决：切换到root用户，编辑limits.conf 添加类似如下内容</div><div class="line">vi /etc/security/limits.conf </div><div class="line"></div><div class="line">添加如下内容:</div><div class="line"></div><div class="line">* soft nofile 65536</div><div class="line">* hard nofile 131072</div><div class="line">* soft nproc 2048</div><div class="line">* hard nproc 4096</div><div class="line"></div><div class="line">问题三：max number of threads [1024] <span class="keyword">for</span> user [lish] likely too low, increase to at least [2048]</div><div class="line"></div><div class="line">解决：切换到root用户，进入limits.d目录下修改配置文件。</div><div class="line">vi /etc/security/limits.d/90-nproc.conf </div><div class="line">修改如下内容：</div><div class="line"></div><div class="line">* soft nproc 1024</div><div class="line"><span class="comment">#修改为</span></div><div class="line">* soft nproc 2048</div><div class="line"></div><div class="line">问题四：max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</div><div class="line"></div><div class="line">解决：切换到root用户修改配置sysctl.conf</div><div class="line"></div><div class="line">vi /etc/sysctl.conf </div><div class="line">添加下面配置：</div><div class="line">vm.max_map_count=655360</div><div class="line">并执行命令：</div><div class="line">sysctl -p</div><div class="line">然后，重新启动elasticsearch，即可启动成功。</div></pre></td></tr></table></figure><h3 id="集群健康检查-Cluster-Health"><a href="#集群健康检查-Cluster-Health" class="headerlink" title="集群健康检查 Cluster Health"></a>集群健康检查 Cluster Health</h3><p>要检查群集的运行状况，我们将使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cat.html" target="_blank" rel="external">_catAPI</a>。您可以在<a href="https://www.elastic.co/guide/en/kibana/5.5/console-kibana.html" target="_blank" rel="external">Kibana</a>的控制台中运行以下命令，方法是 单击“查看控制台”或curl单击下面的“复制为CURL”链接并将其粘贴到终端中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>XGET <span class="string">"http://10.11.10.26:9200/_cat/health?v"</span></div><div class="line">epoch      timestamp cluster              status node.total node.data shards  pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</div><div class="line">1509960188 17:23:08  jolly-cluster         green          2         2   4081 3986    0    2     3889             0                  -                 100%</div></pre></td></tr></table></figure><p>我们可以看到，我们的集群名为“elasticsearch”是绿色的。</p><p>每当我们要求群集健康，我们要么<code>绿色，黄色，或红色</code>。</p><ul><li>绿色 - 一切都很好（集群功能齐全）</li><li>黄色 - 所有数据都可用，但一些副本尚未分配（群集完全可用）</li><li>红色 - 某些数据不管出于何种原因（群集部分功能）</li></ul><p>####### ✨✨注意：当一个群集为红色时，它将继续提供来自可用碎片的搜索请求，但是您可能需要尽快修复它，因为有未分配的碎片。</p><p>查看集群中的节点列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@logstash ~]<span class="comment">#  curl -XGET http://10.11.10.26:9200/_cat/nodes?v</span></div><div class="line">ip          heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</div><div class="line">10.11.10.26           51          96  18    5.02    5.60     3.58 mdi       *      es-jollychic-node1</div></pre></td></tr></table></figure><p><strong>创建索引：</strong><br>第一个命令使用PUT创建了一个叫做“customer”的索引。我们简单地将pretty附加到调用的尾部，使其以美观的形式打印出JSON响应 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT <span class="string">'http://10.11.10.26:9200/customer?pretty'</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@logstash ~]<span class="comment">#  curl -XGET http://10.11.10.26:9200/_cat/master?help</span></div><div class="line">id   |   | node id</div><div class="line">host | h | host name</div><div class="line">ip   |   | ip address</div><div class="line">node | n | node name</div></pre></td></tr></table></figure><p>查看所有连接的索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[elasticsearch@logstash ~]$ curl <span class="_">-s</span>XGET <span class="string">"http://<span class="variable">$(hostname)</span>:9200/_cat/indices?v"</span></div><div class="line">health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size</div><div class="line">yellow open   <span class="built_in">log</span>-wms31-web-product-2017.08.25          LIKJyNXrRcmQSt8aXRoyLg   5   1        614            0    361.6kb        361.6kb</div><div class="line">yellow open   <span class="built_in">log</span>-payment-center-product-2017.08.26     w-ucGJUoTDOdhEkfrq9g-g   5   1    1712756            0    808.4mb        808.4mb</div><div class="line">yellow open   .kibana                                   p9MnvKHRS6K_jCeBtB7CXA   1   1         18            1     77.8kb         77.8kb</div><div class="line">yellow open   <span class="built_in">log</span>-jcm-product-2017.08.25                Cs0XHa-xRQOHxt1-HYz1Xw   5   1   46303455            0      8.1gb          8.1gb</div><div class="line">yellow open   <span class="built_in">log</span>-spm_mq-product-2017.08.25             FXYNV08zQselbnVKK7k01g   5   1     465127            0    148.1mb        148.1mb</div><div class="line">yellow open   <span class="built_in">log</span>-erpsearchservice-product-2017.08.26   Z4ECtHCJS2uma_UTxJqDLw   5   1       2217            0     15.3mb         15.3mb</div><div class="line">yellow open   <span class="built_in">log</span>-wms31-web-product-2017.08.24          mYAhjM5UQFyIZAN8nFeYQQ   5   1     951572            0    237.5mb        237.5mb</div><div class="line">yellow open   <span class="built_in">log</span>-spm_mq-product-2017.08.26             -PJCMMVqRwWXux8V5SRbCA   5   1    1457469            0    503.1mb        503.1mb</div></pre></td></tr></table></figure><p>删除指定索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XDELETE <span class="string">"http://<span class="variable">$(hostname)</span>:9200/log-wms-product-2017.08.19"</span></div></pre></td></tr></table></figure><h6 id="注意✨✨-：-你可能已经注意到在上面的结果中，状态被标记为危险的黄色，而不是安全的绿色。实际上我们的安装步骤没有问题，之所以会显示黄色，实际上是因为从集群的角度看，这个集群目前只有一个节点，数据有丢失的风险。不过如果我们只是在一些安全性要求不太高的项目上使用，那么一个节点是可以接受的。"><a href="#注意✨✨-：-你可能已经注意到在上面的结果中，状态被标记为危险的黄色，而不是安全的绿色。实际上我们的安装步骤没有问题，之所以会显示黄色，实际上是因为从集群的角度看，这个集群目前只有一个节点，数据有丢失的风险。不过如果我们只是在一些安全性要求不太高的项目上使用，那么一个节点是可以接受的。" class="headerlink" title="注意✨✨ ： 你可能已经注意到在上面的结果中，状态被标记为危险的黄色，而不是安全的绿色。实际上我们的安装步骤没有问题，之所以会显示黄色，实际上是因为从集群的角度看，这个集群目前只有一个节点，数据有丢失的风险。不过如果我们只是在一些安全性要求不太高的项目上使用，那么一个节点是可以接受的。"></a>注意✨✨ ： 你可能已经注意到在上面的结果中，状态被标记为危险的黄色，而不是安全的绿色。实际上我们的安装步骤没有问题，之所以会显示黄色，实际上是因为从集群的角度看，这个集群目前只有一个节点，数据有丢失的风险。不过如果我们只是在一些安全性要求不太高的项目上使用，那么一个节点是可以接受的。</h6><h3 id="二、Elasticsearch集群node2部署"><a href="#二、Elasticsearch集群node2部署" class="headerlink" title="二、Elasticsearch集群node2部署"></a>二、Elasticsearch集群node2部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.tar.gz</div><div class="line">tar -xvf elasticsearch-5.5.2.tar.gz</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch-5.5.2/bin</div><div class="line">useradd elasticsearch </div><div class="line">chown -R  /usr/<span class="built_in">local</span>/elasticsearch-5.5.2/</div><div class="line">su - elasticsearch -c <span class="string">"/usr/local/elasticsearch-5.5.2/bin/elasticsearch -d"</span></div><div class="line">这里我切换普通es用户启动，记得给予权限。</div><div class="line">mkdir /data/es-jollychic </div><div class="line"></div><div class="line">vim config/jvm.options </div><div class="line">修改内存优化</div><div class="line">-Xms6g</div><div class="line">-Xmx6g</div><div class="line">-XX:+UseConcMarkSweepGC</div><div class="line">-XX:CMSInitiatingOccupancyFraction=75</div><div class="line">-XX:+UseCMSInitiatingOccupancyOnly</div><div class="line">-XX:+AlwaysPreTouch</div><div class="line"></div><div class="line"></div><div class="line">修改elasticsearch.yml配置</div><div class="line">[elasticsearch@logstash elasticsearch-5.5.2]$ cat config/elasticsearch.yml | grep -Pv <span class="string">"^$|^#"</span></div><div class="line">cluster.name: jolly-cluster</div><div class="line">node.master: <span class="literal">false</span></div><div class="line">node.data: <span class="literal">true</span></div><div class="line">node.name: es-jollychic-node2</div><div class="line">path.data: /data/elasticsearch/es-data</div><div class="line">network.host: 10.155.90.176,127.0.0.1</div><div class="line">bootstrap.memory_lock: <span class="literal">false</span></div><div class="line">bootstrap.system_call_filter: <span class="literal">false</span></div><div class="line">http.port: 9200</div><div class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"10.155.90.141"</span>, <span class="string">"10.155.90.176"</span>]</div><div class="line"></div><div class="line"></div><div class="line">查看启动进程服务:</div><div class="line">[root@logstash2 config]<span class="comment"># netstat -ntulp | grep java</span></div><div class="line">tcp        0      0 ::ffff:10.155.90.176:9200   :::*                        LISTEN      18118/java</div><div class="line">tcp        0      0 ::ffff:127.0.0.1:9200       :::*                        LISTEN      18118/java</div><div class="line">tcp        0      0 ::ffff:10.155.90.176:9300   :::*                        LISTEN      18118/java</div><div class="line">tcp        0      0 ::ffff:127.0.0.1:9300       :::*                        LISTEN      18118/java</div><div class="line"></div><div class="line">查看集群中的节点列表：</div><div class="line"></div><div class="line">我们也可以得到我们单节点的列表如下：</div><div class="line">[root@logstash ~]<span class="comment">#  curl -XGET http://10.11.10.26:9200/_cat/nodes?v</span></div><div class="line">ip          heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</div><div class="line">10.11.10.26           51          96  18    5.02    5.60     3.58 mdi       *      es-jollychic-node1</div><div class="line">10.155.90.176         51          99  16    4.71    2.74     1.37 di       -       es-jollychic-node2</div><div class="line"></div><div class="line">查看集群节点索引：</div><div class="line">[elasticsearch@logstash ~]$ curl <span class="_">-s</span>XGET <span class="string">"http://<span class="variable">$(hostname)</span>:9200/_cat/indices?v"</span></div><div class="line">health status index                                     uuid                   pri rep docs.count docs.deleted store.size pri.store.size</div><div class="line">green open   <span class="built_in">log</span>-wms31-web-product-2017.08.25          LIKJyNXrRcmQSt8aXRoyLg   5   1        614            0    361.6kb        361.6kb</div><div class="line">green open   <span class="built_in">log</span>-payment-center-product-2017.08.26     w-ucGJUoTDOdhEkfrq9g-g   5   1    1712756            0    808.4mb        808.4mb</div><div class="line">green open   .kibana                                   p9MnvKHRS6K_jCeBtB7CXA   1   1         18            1     77.8kb         77.8kb</div><div class="line">green open   <span class="built_in">log</span>-jcm-product-2017.08.25                Cs0XHa-xRQOHxt1-HYz1Xw   5   1   46303455            0      8.1gb          8.1gb</div><div class="line">green open   <span class="built_in">log</span>-spm_mq-product-2017.08.25             FXYNV08zQselbnVKK7k01g   5   1     465127            0    148.1mb        148.1mb</div><div class="line">green open   <span class="built_in">log</span>-erpsearchservice-product-2017.08.26   Z4ECtHCJS2uma_UTxJqDLw   5   1       2217            0     15.3mb         15.3mb</div><div class="line">green open   <span class="built_in">log</span>-wms31-web-product-2017.08.24          mYAhjM5UQFyIZAN8nFeYQQ   5   1     951572            0    237.5mb        237.5mb</div><div class="line">green open   <span class="built_in">log</span>-spm_mq-product-2017.08.26             -PJCMMVqRwWXux8V5SRbCA   5   1    1457469            0    503.1mb        503.1mb</div></pre></td></tr></table></figure><h4 id="1-1-Elasticsearch-5-x的Bootstrap-Checks"><a href="#1-1-Elasticsearch-5-x的Bootstrap-Checks" class="headerlink" title="1.1 Elasticsearch 5.x的Bootstrap Checks"></a>1.1 Elasticsearch 5.x的Bootstrap Checks</h4><p>Elasticsearch在升级到5.x版本后，启动时会强制执行<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html" target="_blank" rel="external">Bootstrap Checks</a>(官方文档)<br>其中经常性的问题是需要增大系统可使用的最大FileDescriptors数（参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html）" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html）</a><br>剩下的其他问题可以查询官方文档。</p><h4 id="1-2-Elasticsearch的X-pack插件"><a href="#1-2-Elasticsearch的X-pack插件" class="headerlink" title="1.2 Elasticsearch的X-pack插件"></a>1.2 Elasticsearch的X-pack插件</h4><p><code>X-pack</code>是官方提供的一系列集成插件，包括了<code>alert、monitor、secure</code>等功能，十分强大（但是并不免费）。<br>在ELK 5.0中安装大部分插件仅需要输入命令：<code>./bin/elasticsearch-plugin install &lt;plugin name&gt;</code>即可<br><code>X-pack</code>插件安装后会自动开启ELK的权限功能，需要注意的是如果启用了<code>X-pack</code>，则在向ES输入数据或发起API请求时，均需要附带相应的auth信息。<br>考虑到X-pack并非免费且价格昂贵，暂时不安装X-pack包。</p><h4 id="第一步：Elasticsearch安装-x-pack"><a href="#第一步：Elasticsearch安装-x-pack" class="headerlink" title="第一步：Elasticsearch安装 x-pack"></a>第一步：Elasticsearch安装 x-pack</h4><p>在 Elasticsearch 的根目录，运行 <code>bin/elasticsearch-plugin</code> 进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[elasticsearch@logstash elasticsearch-5.5.2]$ ./bin/elasticsearch-plugin install x-pack</div><div class="line">-&gt; Downloading x-pack from elastic</div><div class="line">[=================================================] 100%</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@     WARNING: plugin requires additional permissions     @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">* java.io.FilePermission \\.\pipe\* <span class="built_in">read</span>,write</div><div class="line">* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries</div><div class="line">* java.lang.RuntimePermission getClassLoader</div><div class="line">* java.lang.RuntimePermission <span class="built_in">set</span>ContextClassLoader</div><div class="line">* java.lang.RuntimePermission <span class="built_in">set</span>Factory</div><div class="line">* java.security.SecurityPermission createPolicy.JavaPolicy</div><div class="line">* java.security.SecurityPermission getPolicy</div><div class="line">* java.security.SecurityPermission putProviderProperty.BC</div><div class="line">* java.security.SecurityPermission <span class="built_in">set</span>Policy</div><div class="line">* java.util.PropertyPermission * <span class="built_in">read</span>,write</div><div class="line">* java.util.PropertyPermission sun.nio.ch.bugLevel write</div><div class="line">* javax.net.ssl.SSLPermission <span class="built_in">set</span>HostnameVerifier</div><div class="line">See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html</div><div class="line"><span class="keyword">for</span> descriptions of what these permissions allow and the associated risks.</div><div class="line"></div><div class="line">Continue with installation? [y/N]y</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@        WARNING: plugin forks a native controller        @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">This plugin launches a native controller that is not subject to the Java</div><div class="line">security manager nor to system call filters.</div><div class="line"></div><div class="line">Continue with installation? [y/N]y</div><div class="line">-&gt; Installed x-pack</div></pre></td></tr></table></figure><p>服务启动后，我们可以通过 elasticsearch 提供的 API 来确认一下基本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">shell&gt; curl http://localhost:9200/</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"..."</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"..."</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"..."</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"..."</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"..."</span>,</div><div class="line">    <span class="string">"build_date"</span> : <span class="string">"..."</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"..."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - elasticsearch -c <span class="string">"/usr/local/elasticsearch-5.5.2/bin/elasticsearch -d</span></div></pre></td></tr></table></figure><p>缺省情况下，elasticsearch 服务会监听<code>9200</code>端口，如果你想自定义监听地址和端口，那么可以设置 <code>elasticsearch.yml</code> 配置文件中的 <code>network.host</code> 和 <code>http.port</code> 选项。</p><p>elasticsearch服务推荐安装 x-pack 插件，它在安全监控等方面为 elasticsearch提供了完善的支持：访问地址：<a href="http://10.11.10.26:9200/?pretty" target="_blank" rel="external">http://10.11.10.26:9200/?pretty</a> 会发现在安装了 x-pack 之后访问受到限制：这里默认的用户名：elastic，密码：changeme</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[elasticsearch@logstash ~]$ curl -u elastic http://10.11.10.26:9200/</div><div class="line">Enter host password <span class="keyword">for</span> user <span class="string">'elastic'</span>:</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"es-jollychic-node1"</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"jolly-cluster"</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"hxR0DDN7TTa3tNnYtMIbbA"</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"5.5.2"</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"b2f0c09"</span>,</div><div class="line">    <span class="string">"build_date"</span> : <span class="string">"2017-08-14T12:33:14.154Z"</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不过使用缺省密码是不安全的，所以我们应该修改它,可以通过 curl 修改默认密码:<code>elastic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[elasticsearch@logstash ~]$ curl -XPUT -u elastic <span class="_">-d</span> <span class="string">'&#123;"password": "elastic"&#125;'</span> \</div><div class="line">&gt; <span class="string">'http://10.11.10.26:9200/_xpack/security/user/elastic/_password'</span></div><div class="line">Enter host password <span class="keyword">for</span> user <span class="string">'elastic'</span>:</div></pre></td></tr></table></figure><h4 id="启用和禁用"><a href="#启用和禁用" class="headerlink" title="启用和禁用"></a>启用和禁用</h4><p>启用和禁用X-Pack功能</p><p>默认情况下，所有X-Pack功能都被启用。您可以启用或禁用特定的X-Pack功能<code>elasticsearch.yml</code>，<code>kibana.yml</code>以及<code>logstash.yml</code> 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">设置                 描述</div><div class="line">xpack.graph.enabled 设置为<span class="literal">false</span>禁用X-Pack图形功能。</div><div class="line">xpack.ml.enabled    设置为<span class="literal">false</span>禁用X-Pack机器学习功能。</div><div class="line">xpack.monitoring.enabled设置为<span class="literal">false</span>禁用X-Pack监视功能。</div><div class="line">xpack.reporting.enabled设置为<span class="literal">false</span>禁用X-Pack报告功能。</div><div class="line">xpack.security.enabled  设置为<span class="literal">false</span>禁用X-Pack安全功能。</div><div class="line">xpack.watcher.enabled  设置<span class="literal">false</span>为禁用观察器。</div></pre></td></tr></table></figure><h4 id="第二步：Kibana-安装x-pack"><a href="#第二步：Kibana-安装x-pack" class="headerlink" title="第二步：Kibana 安装x-pack"></a>第二步：Kibana 安装x-pack</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@logstash ~]<span class="comment"># /usr/local/kibana-5.5.2/bin/kibana-plugin install x-pack</span></div><div class="line">Attempting to transfer from x-pack</div><div class="line">Attempting to transfer from https://artifacts.elastic.co/downloads/kibana-plugins/x-pack/x-pack-5.5.2.zip</div><div class="line">Transferring 119363535 bytes....................</div><div class="line">Transfer complete</div><div class="line">Retrieving metadata from plugin archive</div><div class="line">Extracting plugin archive</div><div class="line">Extraction complete</div><div class="line">Optimizing and caching browser bundles...</div><div class="line">Plugin installation complete</div><div class="line">You have new mail <span class="keyword">in</span> /var/spool/mail/root</div></pre></td></tr></table></figure><h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><p>修改kibana密码：修改之前需要在kibana.yml中配置elasticsearch的用户名和密码后才能需改密码，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># If your Elasticsearch is protected with basic authentication, these settings provide</span></div><div class="line"><span class="comment"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></div><div class="line"><span class="comment"># index at startup. Your Kibana users still need to authenticate with Elasticsearch, which</span></div><div class="line"><span class="comment"># is proxied through the Kibana server.</span></div><div class="line">elasticsearch.username: <span class="string">"elastic"</span></div><div class="line">elasticsearch.password: <span class="string">"your password"</span></div><div class="line"></div><div class="line"><span class="comment">## 查询所有用户</span></div><div class="line">[root@logstash config]<span class="comment"># curl -XGET -u elastic:elastic '10.11.10.26:9200/_xpack/security/user?pretty'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"elastic"</span> : &#123;</div><div class="line">    <span class="string">"username"</span> : <span class="string">"elastic"</span>,</div><div class="line">    <span class="string">"roles"</span> : [</div><div class="line">      <span class="string">"superuser"</span></div></pre></td></tr></table></figure><h4 id="Monitoring-免费版本只支持单-ES-集群"><a href="#Monitoring-免费版本只支持单-ES-集群" class="headerlink" title="Monitoring(免费版本只支持单 ES 集群)"></a>Monitoring<code>(免费版本只支持单 ES 集群)</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">集群级别：</div><div class="line">Uptime ： 集群运行时间；</div><div class="line">节点级别：</div><div class="line">Disk Available：可用磁盘；</div><div class="line">JVM Heap： JVM 使用情况；</div><div class="line">索引级别：</div><div class="line">Indices：索引数量，相当于数据库数；</div><div class="line">Documents：文档数量，相当于记录数；</div><div class="line">Disk Usage：磁盘使用情况；</div><div class="line">Primary Shards：分片数；</div><div class="line">Replica Shards：冗余分片数；</div><div class="line">Overview</div><div class="line"></div><div class="line">相较于集群健康视图，这里的指标更多：</div><div class="line"></div><div class="line">Serach Rate (/s)：近1小时的查询速率，QPS；</div><div class="line">Search Latency (ms)：近1小时的查询延迟；</div><div class="line">Index Rate (/s)：近1小时的索引速率，IPS；</div><div class="line">Index Latency (ms)：近1小时的索引延迟；</div><div class="line">Shard Activity：对于 Shard 的操作历史；</div><div class="line">Indices</div><div class="line"></div><div class="line">索引视角的监控视图，包含以下指标：</div><div class="line"></div><div class="line">Document Count：文档数；</div><div class="line">Data：数据量；</div><div class="line">Index Rate：索引速率；</div><div class="line">Search Rate：查询速率；</div><div class="line">Unassigned Shards：未分配的分片数；</div><div class="line">点击 Index Name 可以进入查看对于索引的详细基础监控：</div><div class="line">Index Memory (KB)：索引内存使用，分为 Lucene、Term、Points；</div><div class="line">Index Size (MB)：索引大小；</div><div class="line">Search Rate (/s)：查询速率；</div><div class="line">Indexing Rate (/s)：索引速率；</div><div class="line">Segment Count：段数；</div><div class="line">Document Count：文档数；</div><div class="line">Shard Legend：分片状态图谱，分为 Primary, Replica,Relocating,Initializing,Unassigned Primary,Unassigned Replica 多个状态。</div><div class="line">点击 Advanced 可以看到高级监控页面，请读者自己去感受下。</div><div class="line"></div><div class="line">Nodes</div><div class="line"></div><div class="line">节点监控，首先看到的是概述指标：</div><div class="line">CPU Usage: CPU 使用率；</div><div class="line">Load Average：CPU 平均负载；</div><div class="line">JVM Memory：JVM 使用情况；</div><div class="line">Disk Free Space：磁盘空闲空间；</div><div class="line">Shards：分片数；</div><div class="line">点击某个节点我们可以看到详细基础监控：</div><div class="line">JVM Heap (GB)：JVM 使用情况；</div><div class="line">Index Memory (KB)：索引占用内存；</div><div class="line">CPU Utilization (%)：CPU 使用率；</div><div class="line">System Load：系统负载；</div><div class="line">Latency (ms)：延迟，分为索引和查询；</div><div class="line">Segment Count：段数量；</div><div class="line">Shard Legend：分片状态图谱， Primary, Replica,Relocating,Initializing多个状态。</div></pre></td></tr></table></figure><p>logstash 数据传输出现问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Attempted to send a bulk request to Elasticsearch configured at <span class="string">'["http://10.11.10.26:9200"]'</span>, but an error occurred and it failed! Are you sure you can reach elasticsearch from this machine using the configuration provided? &#123;:error_message=&gt;<span class="string">"[401] &#123;\"error\":&#123;\"root_cause\":[&#123;\"type\":\"security_exception\",\"reason\":\"missing authentication token for REST request [/_bulk]\",\"header\":&#123;\"WWW-Authenticate\":\"Basic realm=\\\"security\\\" charset=\\\"UTF-8\\\"\"&#125;&#125;],\"type\":\"security_exception\",\"reason\":\"missing authentication token for REST request [/_bulk]\",\"header\":&#123;\"WWW-Authenticate\":\"Basic realm=\\\"security\\\" charset=\\\"UTF-8\\\"\"&#125;&#125;,\"status\":401&#125;"</span>, :error_class=&gt;<span class="string">"Elasticsearch::Transport::Tran</span></div></pre></td></tr></table></figure><p>另外需要注意 x-pack 的授权一个月后会过期，此时查看 kibana 会显示：</p><p>Login is disabled because your license has expired. Please extend your license or disable Security in Elasticsearch.</p><p>此时可以重新获取一个授权，比如免费版授权，但是功能有阉割。更新授权的时候，可能会发现更新不会被确认，这是因为需要加上 <code>acknowledge=true</code> 参数。使用免费授权的后遗症就是基本的安全性没有了，可以用 Nginx 代理做一个<code>HTTP Basic</code>认证来弥补.</p><p>访问效果：</p><p>登录需要输入认证密码统一：Username：elastic password：elastic</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kibana-01.png" alt=""></figure></p><p>JVM堆，索引内存（KB），CPU利用率（％），系统负载，延迟（ms）等等</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/kibana-02.png" alt=""></figure></p><h4 id="1-3-Elasticsearch的Head插件"><a href="#1-3-Elasticsearch的Head插件" class="headerlink" title="1.3 Elasticsearch的Head插件"></a>1.3 Elasticsearch的Head插件</h4><p><code>Head</code>插件作为<code>ELK 2.x</code>版本中较为通用的前端管理插件，在<code>ELK 5.x</code>版本中无法直接使用<code>./bin/elasticsearch-plugin install head</code>的方式安装，但是可以采取standalone的方式进行运行。</p><p>参考官方文档：<a href="https://github.com/mobz/elasticsearch-head#running-with-built-in-server" target="_blank" rel="external">elasticsearch-head</a></p><p>一篇较好的<a href="http://www.cnblogs.com/xing901022/p/6030296.html" target="_blank" rel="external">ES 5.x安装Head的博文：</a></p><p>【特别注意】：暂时没有找到x-pack和head相互兼容的方法，目前由于认证的问题，如果<code>启用了x-pack的secure</code>功能，会导致head插件无法连接ES集群。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</div><div class="line"><span class="built_in">cd</span> elasticsearch-head</div><div class="line">npm install</div><div class="line">npm run start</div><div class="line">open http://localhost:9100/</div></pre></td></tr></table></figure><ul><li>修改head目录下的Gruntfile.js配置，head默认监听127.0.0.1 新增：hostname: ‘0.0.0.0’</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim Gruntfile.js</span></div><div class="line">                connect: &#123;</div><div class="line">                        server: &#123;</div><div class="line">                                options: &#123;</div><div class="line">                                        hostname: <span class="string">'0.0.0.0'</span>,</div><div class="line">                                        port: 9100,</div><div class="line">                                        base: <span class="string">'.'</span>,</div><div class="line">                                        keepalive: <span class="literal">true</span></div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure><ul><li>修改elasticsearch配置文件 elasticsearch.yml</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: <span class="literal">true</span></div><div class="line">http.cors.allow-origin: <span class="string">"*"</span></div></pre></td></tr></table></figure><ul><li>重启elasticsearch，并启动node </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/elasticsearch-head/node_modules/grunt/bin/grunt /usr/bin/grunt</div><div class="line"></div><div class="line">后台启动：grunt server &amp;</div></pre></td></tr></table></figure><ul><li>访问效果：</li></ul><p><figure class="figure"><img src="media/15033045476000.jpg" alt=""></figure></p><h2 id="三、-Elasticsearch-Kibana"><a href="#三、-Elasticsearch-Kibana" class="headerlink" title="三、 Elasticsearch-Kibana"></a>三、 Elasticsearch-Kibana</h2><p>RPM方法安装参考官网文档：<a href="https://www.elastic.co/guide/en/kibana/current/rpm.html#rpm" target="_blank" rel="external">使用RPM 编辑安装Kibana</a></p><p>Running Kibana on Docker: <a href="https://www.elastic.co/guide/en/kibana/current/_pulling_the_image.html" target="_blank" rel="external">Docker 搭建方法</a></p><p>tar方式安装Kibana </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.5.2-linux-x86_64.tar.gz</div><div class="line">sha1sum kibana-5.5.2-linux-x86_64.tar.gz </div><div class="line">tar -xzf kibana-5.5.2-linux-x86_64.tar.gz</div><div class="line"><span class="built_in">cd</span> kibana/</div></pre></td></tr></table></figure><h4 id="1-1-通过配置文件编辑配置Kibana"><a href="#1-1-通过配置文件编辑配置Kibana" class="headerlink" title="1.1 通过配置文件编辑配置Kibana"></a>1.1 通过配置文件编辑配置Kibana</h4><p><code>kibana.yml</code>启动时Kibana服务器从文件读取属性。默认设置配置Kibana运行<code>localhost:5601</code>。要更改主机或端口号，或者连接到在其他机器上运行的<code>Elasticsearch</code>，您需要更新kibana.yml文件。您还可以启用SSL并设置各种其他选项。</p><p>kibana.yml 全部基本配置 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server.port:</div><div class="line">默认值：5601 Kibana由后端服务器提供服务。此设置指定要使用的端口。</div><div class="line"></div><div class="line">server.host:</div><div class="line">默认值：“localhost”此设置指定后端服务器的主机。</div><div class="line"></div><div class="line">server.basePath:</div><div class="line">如果您在代理服务器后面运行，则允许您指定安装Kibana的路径。这仅影响由Kibana生成的URL，您的代理预期在将请求转发给Kibana之前删除basePath值。此设置无法以斜杠（/）结尾。</div><div class="line"></div><div class="line">server.maxPayloadBytes:</div><div class="line">默认值：1048576传入服务器请求的最大有效负载大小（以字节为单位）。</div><div class="line"></div><div class="line">server.name:</div><div class="line">默认值：“your-hostname”用于标识此Kibana实例的人性化显示名称。</div><div class="line"></div><div class="line">server.defaultRoute:</div><div class="line">默认值：“/ app / kibana”此设置指定打开Kibana时的默认路由。打开Kibana时，您可以使用此设置修改着陆页。</div><div class="line"></div><div class="line">elasticsearch.url:</div><div class="line">默认值：“http：// localhost：9200”用于所有查询的Elasticsearch实例的URL。</div><div class="line"></div><div class="line">elasticsearch.preserveHost:</div><div class="line">默认值：<span class="literal">true</span>当此设置的值为真时，Kibana使用server.host设置中指定的主机名。当此设置的值为<span class="literal">false</span>，Kibana使用连接到此Kibana实例的主机的主机名。</div><div class="line"></div><div class="line">kibana.index:</div><div class="line">默认：“.kibana” Kibana使用Elasticsearch中的索引来存储已保存的搜索，可视化和仪表板。如果索引不存在，Kibana将创建一个新的索引。</div><div class="line"></div><div class="line">kibana.defaultAppId:</div><div class="line">默认值：“discover”要加载的默认应用程序。</div><div class="line"></div><div class="line">tilemap.url:</div><div class="line">Kibana用于在tilemap可视化中显示地图图块的tile服务的URL。默认情况下，Kibana从外部元数据服务读取此URL，但用户仍然可以覆盖此参数以使用自己的Tile Map Service。例如：<span class="string">"https://tiles.elastic.co/v2/default/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?elastic_tile_service_tos=agree&amp;my_app_name=kibana"</span></div><div class="line"></div><div class="line">tilemap.options.minZoom:</div><div class="line">默认值：1最小缩放级别。</div><div class="line"></div><div class="line">tilemap.options.maxZoom:</div><div class="line">默认值：10最大缩放级别。</div><div class="line"></div><div class="line">tilemap.options.attribution:</div><div class="line">默认值：<span class="string">"© [Elastic Maps Service](https://www.elastic.co/elastic-maps-service)"</span>地图属性字符串。</div><div class="line"></div><div class="line">regionmap</div><div class="line">指定用于区域映射可视化的其他矢量图层。每个层对象都指向一个外部矢量文件，其中包含一个geojson FeatureCollection。该文件必须使用WGS84坐标参考系，并且只包括多边形。如果文件托管在与Kibana不同的域上，则服务器需要启用CORS，因此Kibana可以下载该文件。url字段也用作文件的唯一标识符。每个图层可以包含多个字段，以指示要公开的geojson要素的哪些属性。field.description是在Region Map可视化的字段菜单中显示的人类可读文本。也可以添加可选的归因值。以下示例显示有效的regionmap配置。</div><div class="line"></div><div class="line">regionmap：</div><div class="line">  层：</div><div class="line">     - 名称：“法国部”</div><div class="line">       url：“http://my.cors.enabled.server.org/france_departements.geojson”</div><div class="line">       归因：“INRAP”</div><div class="line">       字段：</div><div class="line">          - 名称：“部门”</div><div class="line">            说明：“全部名称”</div><div class="line">          - 名称：“INSEE”</div><div class="line">            说明：“INSEE数字标识符”</div><div class="line"></div><div class="line">elasticsearch.username: 和 elasticsearch.password:</div><div class="line">如果您的Elasticsearch受到基本身份验证的保护，这些设置将提供Kibana服务器在启动时对Kibana索引执行维护所用的用户名和密码。您的Kibana用户仍然需要使用通过Kibana服务器代理的Elasticsearch进行身份验证。</div><div class="line"></div><div class="line">server.ssl.enabled</div><div class="line">默认值：“<span class="literal">false</span>”启用从Kibana服务器到浏览器的传出请求的SSL。当设置为<span class="literal">true</span>，</div><div class="line">server.ssl.certificate并server.ssl.key要求</div><div class="line"></div><div class="line">server.ssl.certificate: 和 server.ssl.key:</div><div class="line">路由到PEM格式的SSL证书和SSL密钥文件。</div><div class="line"></div><div class="line">server.ssl.keyPassphrase</div><div class="line">将用于解密私钥的密码短语。该值是可选的，因为密钥可能未被加密。</div><div class="line"></div><div class="line">server.ssl.certificateAuthorities</div><div class="line">列出可信赖的PEM编码证书文件的路径。</div><div class="line"></div><div class="line">server.ssl.supportedProtocols</div><div class="line">默认值：TLSv1，TLSv1.1，TLSv1.2 支持的版本协议。有效协议：TLSv1，TLSv1.1，TLSv1.2</div><div class="line"></div><div class="line">server.ssl.cipherSuites</div><div class="line">默认值：ECDHE-RSA-AES128-GCM-SHA256，ECDHE-ECDSA-AES128-GCM-SHA256，ECDHE-RSA-AES256-GCM-SHA384，ECDHE-ECDSA-AES256-GCM-SHA384，DHE-RSA-AES128-GCM- SHA256，ECDHE-RSA-AES128-SHA256，DHE-RSA-AES128-SHA256，ECDHE-RSA-AES256-SHA384，DHE-RSA-AES256-SHA384，ECDHE-RSA-AES256-SHA256，DHE-RSA-AES256-SHA256， HIGH，！aNULL，！eNULL，！EXPORT，！DES，！RC4，！MD5，！PSK，！SRP，！CAMELLIA。格式和有效选项的详细信息可通过[OpenSSL密码列表格式文档]（ https://www.openssl.org/docs/man1.0.2/apps/ciphers.html<span class="comment">#CIPHER-LIST-FORMAT）获得。</span></div><div class="line"></div><div class="line"></div><div class="line">elasticsearch.ssl.certificate: 和 elasticsearch.ssl.key:</div><div class="line">提供PEM格式SSL证书和密钥文件路径的可选设置。这些文件验证您的Elasticsearch后端使用相同的密钥文件。</div><div class="line"></div><div class="line">elasticsearch.ssl.keyPassphrase</div><div class="line">将用于解密私钥的密码短语。该值是可选的，因为密钥可能未被加密。</div><div class="line"></div><div class="line">elasticsearch.ssl.certificateAuthorities:</div><div class="line">可选设置，使您能够指定Elasticsearch实例的证书颁发机构的PEM文件的路径列表。</div><div class="line"></div><div class="line">elasticsearch.ssl.verificationMode:</div><div class="line">默认值：full控制证书的验证。有效值是none，certificate和full。 full执行主机名验证，certificate不执行。</div><div class="line"></div><div class="line">elasticsearch.pingTimeout:</div><div class="line">默认值：elasticsearch.requestTimeout设置时间（以毫秒为单位）等待弹性搜索响应ping的值。</div><div class="line"></div><div class="line">elasticsearch.requestTimeout:</div><div class="line">默认值：30000等待后端或弹性搜索的响应的时间（毫秒）。该值必须为正整数。</div><div class="line"></div><div class="line">elasticsearch.requestHeadersWhitelist:</div><div class="line">默认值：[ <span class="string">'authorization'</span> ]要发送到Elasticsearch的Kibana客户端标题列表。要发送没有客户端标题，请将此值设置为[]（空列表）。</div><div class="line"></div><div class="line">elasticsearch.customHeaders:</div><div class="line">默认值：&#123;&#125;要发送到Elasticsearch的标题名称和值。无论elasticsearch.requestHeadersWhitelist配置如何，客户端头都不能覆盖任何自定义头文件。</div><div class="line"></div><div class="line">elasticsearch.shardTimeout:</div><div class="line">默认值：0 Elasticsearch等待分片响应的时间（以毫秒为单位）。设置为0以禁用。</div><div class="line"></div><div class="line">elasticsearch.startupTimeout:</div><div class="line">默认值：5000重试之前等待Kibana启动时的弹性搜索的时间（以毫秒为单位）。</div><div class="line"></div><div class="line">pid.file:</div><div class="line">指定Kibana创建进程ID文件的路径。</div><div class="line"></div><div class="line">logging.dest:</div><div class="line">默认值：stdout允许您指定Kibana存储日志输出的文件。</div><div class="line"></div><div class="line">logging.silent:</div><div class="line">默认值：<span class="literal">false</span>将此设置的值设置<span class="literal">true</span>为禁止所有日志输出。</div><div class="line"></div><div class="line">logging.quiet:</div><div class="line">默认值：<span class="literal">false</span>将此设置的值设置<span class="literal">true</span>为禁止除错误消息之外的所有日志输出。</div><div class="line"></div><div class="line">logging.verbose</div><div class="line">默认值：<span class="literal">false</span>将此设置的值设置为<span class="literal">true</span>记录所有事件，包括系统使用情况信息和所有请求。</div><div class="line"></div><div class="line">ops.interval</div><div class="line">默认值：5000设置采样系统和进程性能指标的间隔（以毫秒为单位）。最小值为100。</div><div class="line"></div><div class="line">status.allowAnonymous</div><div class="line">默认值：<span class="literal">false</span>如果启用了身份验证，<span class="literal">true</span>请将其设置为允许未经身份验证的用户访问Kibana服务器状态API和状态页面。</div><div class="line"></div><div class="line">cpu.cgroup.path.override</div><div class="line">覆盖cgroup cpu路径，以不一致的方式安装 /proc/self/cgroup</div><div class="line"></div><div class="line">cpuacct.cgroup.path.override</div><div class="line">在与不一致的方式安装时，覆盖cgroup cpuacct路径 /proc/self/cgroup</div><div class="line"></div><div class="line">console.enabled</div><div class="line">默认值：<span class="literal">true</span>设置为<span class="literal">false</span>以禁用控制台。切换此操作将导致服务器在下次启动时重新生成资源，这可能会在页面开始投放之前造成延迟。</div><div class="line"></div><div class="line">elasticsearch.tribe.url:</div><div class="line">用于所有查询的Elasticsearch部落实例的可选URL。</div><div class="line"></div><div class="line">elasticsearch.tribe.username: 和 elasticsearch.tribe.password:</div><div class="line">如果您的Elasticsearch受到基本身份验证的保护，这些设置将提供Kibana服务器在启动时对Kibana索引执行维护所用的用户名和密码。您的Kibana用户仍然需要使用通过Kibana服务器代理的Elasticsearch进行身份验证。</div><div class="line"></div><div class="line">elasticsearch.tribe.ssl.certificate: 和 elasticsearch.tribe.ssl.key:</div><div class="line">提供PEM格式SSL证书和密钥文件路径的可选设置。这些文件验证您的Elasticsearch后端使用相同的密钥文件。</div><div class="line"></div><div class="line">elasticsearch.tribe.ssl.keyPassphrase</div><div class="line">将用于解密私钥的密码短语。该值是可选的，因为密钥可能未被加密。</div><div class="line"></div><div class="line">elasticsearch.tribe.ssl.certificateAuthorities:</div><div class="line">可选设置，使您能够为您的部落Elasticsearch实例的证书颁发机构指定PEM文件的路径。</div><div class="line"></div><div class="line">elasticsearch.tribe.ssl.verificationMode:</div><div class="line">默认值：full控制证书的验证。有效值是none，certificate和full。full执行主机名验证，</div><div class="line">certificate不执行。</div><div class="line"></div><div class="line">elasticsearch.tribe.pingTimeout:</div><div class="line">默认值：elasticsearch.tribe.requestTimeout设置时间（以毫秒为单位）等待弹性搜索响应ping的值。</div><div class="line"></div><div class="line">elasticsearch.tribe.requestTimeout:</div><div class="line">默认值：30000等待后端或弹性搜索的响应的时间（毫秒）。该值必须为正整数。</div><div class="line"></div><div class="line">elasticsearch.tribe.requestHeadersWhitelist:</div><div class="line">默认值：[ <span class="string">'authorization'</span> ]要发送到Elasticsearch的Kibana客户端标题列表。要发送没有客户端标题，请将此值设置为[]（空列表）。</div><div class="line"></div><div class="line">elasticsearch.tribe.customHeaders:</div><div class="line">默认值：&#123;&#125;要发送到Elasticsearch的标题名称和值。无论</div><div class="line">elasticsearch.tribe.requestHeadersWhitelist配置如何，客户端头都不能覆盖任何自定义头文件。</div></pre></td></tr></table></figure><p>根据不同的需求配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@logstash config]<span class="comment"># cat kibana.yml | grep -Pv "^#|^$"</span></div><div class="line">server.port: 5601</div><div class="line">server.host: <span class="string">"10.11.10.26"</span></div><div class="line">server.name: <span class="string">"jollychic-log"</span></div><div class="line">elasticsearch.url: <span class="string">"http://10.11.10.26:9200"</span></div><div class="line">elasticsearch.preserveHost: <span class="literal">true</span></div><div class="line">kibana.index: <span class="string">".kibana"</span></div></pre></td></tr></table></figure><p>配置好配置，启动服务：<code>./bin/kibana &amp; 后台启动</code></p><h4 id="1-2-访问Kibana"><a href="#1-2-访问Kibana" class="headerlink" title="1.2 访问Kibana"></a>1.2 访问Kibana</h4><ul><li>检查Kibana状态</li></ul><p>您可以通过导航到达Kibana服务器的状态页面localhost:5601/status。状态页面显示有关服务器资源使用情况的信息，并列出已安装的插件。</p><p><code>http://10.11.10.26:5601/status</code></p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/elasticstack_022.png" alt=""></figure></p><ul><li>配置索引模式<br>指定与一个或多个弹性搜索索引的名称相匹配的索引模式。默认情况下，Kibana猜测您正在使用由Logstash提供给Elasticsearch的数据。如果是这样，您可以使用默认值logstash-<em>作为索引模式。星号（</em>）匹配索引名称中的零个或多个字符。如果您的弹性搜索索引遵循其他命名约定，请输入适当的模式。“模式”也可以简单地是单个索引的名称。<br>选择包含要用于执行基于时间的比较的时间戳的索引字段。Kibana读取索引映射以列出包含时间戳的所有字段。如果您的索引没有基于时间的数据，请禁用索引包含基于时间的事件选项。</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/elasticstack_033.png" alt=""></figure></p><ul><li>选择索引查看日志</li></ul><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/elasticstack_044.png" alt=""></figure></p><p>官网中在生产环境中使用Kibana 说的很详细：<a href="https://www.elastic.co/guide/en/kibana/current/production.html" target="_blank" rel="external">在生产环境中使用Kibana</a></p><p>上面是我logstash已经搭建配置好索引才能获取到。下面讲如何部署logstash</p><h2 id="四、Logstash的部署"><a href="#四、Logstash的部署" class="headerlink" title="四、Logstash的部署"></a>四、Logstash的部署</h2><p>与Elasticsearch类似，在官网下载压缩包后，解压即可用。</p><p>在非高级场景下，Logstash本身不需要进行太多的配置（配置文件在logstash根目录下的<code>./config/logstash.yml</code>），高级场景请参考官方文档。<br>logstash的启动命令为:<code>./bin/logstash -f &lt;pipeline_conf_file&gt; --config.reload.automatic</code>，其中-f指定了pipeline配置文件的位置<code>，--config.reload.automatic</code>指定了pipeline配置文件可以进行热加载。<br>本次我们使用Logstash作为日志解析模块（Logstash其实也可以作为日志采集器），重点需要配置pipeline的三大部分：<code>input、filter和output。pipeline</code>文件需要自己创建。</p><h3 id="Installing-Logstash"><a href="#Installing-Logstash" class="headerlink" title="Installing Logstash"></a>Installing Logstash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">java version <span class="string">"1.8.0_65"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_65-b17)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)</div><div class="line"></div><div class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</div><div class="line"></div><div class="line">vim /etc/yum.repos.d/logstash.repo</div><div class="line">[logstash-5.x]</div><div class="line">name=Elastic repository <span class="keyword">for</span> 5.x packages</div><div class="line">baseurl=https://artifacts.elastic.co/packages/5.x/yum</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</div><div class="line">enabled=1</div><div class="line">autorefresh=1</div><div class="line"><span class="built_in">type</span>=rpm-md</div><div class="line"></div><div class="line">sudo yum install logstash</div></pre></td></tr></table></figure><p>首先，我们通过运行最基本的<code>Logstash</code>管道来测试您的<code>Logstash</code>安装。</p><p><code>Logstash</code>管道有两个必需的元素，<code>input</code>并且<code>output</code>，和一个可选的元素，<code>filter</code>。输入插件消耗来自源的数据，过滤器插件会按照您指定的方式修改数据，并且输出插件将数据写入到目的地。</p><p><figure class="figure"><img src="https://www.elastic.co/guide/en/logstash/current/static/images/basic_logstash_pipeline.png" alt=""></figure></p><p>要测试您的Logstash安装，运行最基本的Logstash管道。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> logstash-5.5.2</div><div class="line">bin / logstash <span class="_">-e</span><span class="string">'input &#123;stdin &#123;&#125;&#125; output &#123;stdout &#123;&#125;&#125;'</span></div></pre></td></tr></table></figure><p>该<code>-e</code>标志使您能够直接从命令行指定配置。在命令行中指定配置可以快速测试配置，而无需在迭代之间编辑文件。示例中的流水线从标准输入端输入，<code>stdin并stdout</code>以结构化格式将该输入移动到标准输出 。</p><p>启动<code>Logstash</code>后，等到看到<code>“Pipeline main started”</code>，然后hello world在命令提示符下输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello world</div><div class="line">2017-07-21T01:22:14.405+0000 0.0.0.0 hello world</div></pre></td></tr></table></figure><p>Logstash将时间戳和IP地址信息添加到消息中。通过在运行Logstash的shell中发出CTRL-D命令退出Logstash 。</p><p>logstash的配置片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#character at the beginning of a line indicates a comment. Use</span></div><div class="line"><span class="comment"># comments to describe your configuration.</span></div><div class="line">input &#123;</div><div class="line">    udp &#123;</div><div class="line">        port =&gt; 25826</div><div class="line">        buffer_size =&gt; 1452</div><div class="line">        workers =&gt; 3          <span class="comment"># Default is 2</span></div><div class="line">        queue_size =&gt; 30000   <span class="comment"># Default is 2000</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; [ <span class="string">"10.11.10.26:9200"</span> ]</div><div class="line">    user =&gt; logstash</div><div class="line">    password =&gt; logstash</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>☺待整理续写~~</strong></p><h3 id="交流学习："><a href="#交流学习：" class="headerlink" title="交流学习："></a>交流学习：</h3><p>🐧  Linux shell_高级运维派: <code>459096184</code>    圈子 (系统运维-应用运维-自动化运维-虚拟化技术研究欢迎加入)<br>🐧  BigData-Exchange School : <code>521621407</code>  圈子（大数据运维)（Hadoop开发人员)（大数据研究爱好者) 欢迎加入</p><p>相应Bidata有内部微信交流群互相学习，加入QQ群有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ElasticStack-5-x介绍&quot;&gt;&lt;a href=&quot;#ElasticStack-5-x介绍&quot; class=&quot;headerlink&quot; title=&quot;ElasticStack 5.x介绍&quot;&gt;&lt;/a&gt;ElasticStack 5.x介绍&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xrthw.com1.z0.glb.clouddn.com/elastic-elk-b.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;code&gt;ELK=ElasticSearch 官方博客:分布式以及 Elastic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Elastic Stack是ELK日志系统的官方称呼，而ELK则是盛名在外的一款开源分布式日志系统，一般说来包括了Elasticsearch、Logstash和Kibana，涵盖了后端日志采集、日志搜索服务和前端数据展示等功能。&lt;br&gt;本文将会对Elastic Stack的安装部署流程进行一系列简单的介绍，并记录下了一些部署过程中遇到的坑及解决方法。&lt;/p&gt;
&lt;p&gt;对于一个软件或互联网公司来说，对计算资源和应用进行监控和告警是非常基础的需求。对于大公司或成熟公司，一个高度定制化的监控系统应该已经存在了很长时间并且非常成熟了。而对于一个初创公司或小公司来说，如何利用现有开源工具快速搭建一套日志监控及分析平台是需要探索的事情。&lt;/p&gt;
    
    </summary>
    
      <category term="Log Analysis Platform" scheme="http://blog.yancy.cc/categories/Log-Analysis-Platform/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.yancy.cc/tags/Elasticsearch/"/>
    
      <category term="Kibana" scheme="http://blog.yancy.cc/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>HORTONW0RKS数据平台实现搭建Ambari配置和部署HDP集群监控Hadoop集群</title>
    <link href="http://blog.yancy.cc/2017/05/08/Bigdata-hadoop/HORTONW0RKS%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%AE%9E%E7%8E%B0%E6%90%AD%E5%BB%BAAmbari%E9%85%8D%E7%BD%AE%E5%92%8C%E9%83%A8%E7%BD%B2HDP%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7Hadoop%E9%9B%86%E7%BE%A4%20/"/>
    <id>http://blog.yancy.cc/2017/05/08/Bigdata-hadoop/HORTONW0RKS数据平台实现搭建Ambari配置和部署HDP集群监控Hadoop集群 /</id>
    <published>2017-05-08T09:56:03.000Z</published>
    <updated>2017-09-26T08:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群"><a href="#HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群" class="headerlink" title="HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群"></a>HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群</h2><p><strong> 题外话 </strong></p><p>我现在在一家上市公司旗下控股子公司负责运维部门，负责IT网络安全办公：主要做的应用运维和网络运维，兼大数据运维。<br>最近跟新来的架构师聊了下Hadoop监控方面：HORTONW0RKS数据平台搭建Ambari监控Hadoop集群.</p><p><strong>HORTONW0RKS数据平台（HDP ®）</strong><br>HDP是业内唯一真正安全的企业级开源的<code>Apache的Hadoop™ ®</code>分配基于集中式架构。HDP解决了静态数据的完整需求，为实时客户应用提供支持，并提供可加速决策和创新的可靠分析。</p><p>使用Hortonworks Sandbox试用最新的HDP功能，或者为生产环境设置HDP，安装和配置群集。<br>查看官网文档：<a href="https://hortonworks.com/downloads/#data-platform" target="_blank" rel="external">HORTONWORKS CONNECTED DATA PLATFORMS DOWNLOADS</a></p><h3 id="1-将Ambari服务存储库文件下载到安装主机上的目录。"><a href="#1-将Ambari服务存储库文件下载到安装主机上的目录。" class="headerlink" title="1. 将Ambari服务存储库文件下载到安装主机上的目录。"></a>1. 将Ambari服务存储库文件下载到安装主机上的目录。</h3><ul><li>Centos6.5 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -nv http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.4.2.0/ambari.repo -O /etc/yum.repos.d/ambari.repo</div></pre></td></tr></table></figure><p>⚠️警告：不要修改<code>ambari.repo</code>文件名。在代理注册期间，此文件应在Ambari服务器主机上可用。</p><ol><li>通过检查repo列表确认存储库已配置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum repolist</div></pre></td></tr></table></figure><p>您应该在列表中看到类似于以下Ambari存储库的值。</p><p>版本值因安装而异。</p><ol><li>安装Ambari服务。这也安装了默认的PostgreSQL Ambari数据库。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ambari-server</div></pre></td></tr></table></figure><p>输入<code>y</code>提示，以确认交易和依赖性检查时。</p><p>成功安装将显示类似于以下内容的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">安装：postgresql-libs-8.4.20-3.el6_6.x86_64 1/4</div><div class="line">安装：postgresql-8.4.20-3.el6_6.x86_64 2/4</div><div class="line">安装：postgresql-server-8.4.20-3.el6_6.x86_64 3/4</div><div class="line">安装：ambari-server-2.4.2.0-1470.x86_64 4/4</div><div class="line">验证：ambari-server-2.4.2.0-1470.x86_64 1/4</div><div class="line">验证：postgresql-8.4.20-3.el6_6.x86_64 2/4</div><div class="line">验证：postgresql-server-8.4.20-3.el6_6.x86_64 3/4</div><div class="line">验证：postgresql-libs-8.4.20-3.el6_6.x86_64 4/4</div><div class="line"></div><div class="line">安装：</div><div class="line">  ambari-server.x86_64 0：2.4.2.0-1470  安装这里的时候会有点慢，因为是访问国外网站下载资源。</div><div class="line"></div><div class="line">已安装依赖关系：</div><div class="line"> postgresql.x86_64 0：8.4.20-3.el6_6           </div><div class="line"> postgresql-libs.x86_64 0：8.4.20-3.el6_6        </div><div class="line"> postgresql-server.x86_64 0：8.4.20-3.el6_6</div></pre></td></tr></table></figure><p>❗️❗️【注意】</p><p>接受有关信任<code>Hortonworks GPG</code>密钥的警告。该键将自动下载并用于验证Hortonworks的软​​件包。您将看到以下消息：</p><p>Importing GPG key 0x07513CAD: Userid: “Jenkins (HDP Builds) <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#x6a;&#x65;&#x6e;&#107;&#105;&#x6e;&#x40;&#104;&#111;&#x72;&#116;&#111;&#110;&#x77;&#x6f;&#x72;&#x6b;&#115;&#x2e;&#99;&#111;&#109;">&#x6a;&#x65;&#x6e;&#107;&#105;&#x6e;&#x40;&#104;&#111;&#x72;&#116;&#111;&#110;&#x77;&#x6f;&#x72;&#x6b;&#115;&#x2e;&#99;&#111;&#109;</a>“ From :<code>http://s3.amazonaws.com/dev.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</code></p><p>❗️❗️【注意】</p><p>在具有有限Internet访问或没有Internet访问的群集上部署HDP时，应使用其他方法提供对位的访问。<br>有关设置本地存储库的详细信息，请参阅使用本地存储库。</p><p><code>Ambari</code>服务器默认使用嵌入式<code>PostgreSQL</code>数据库。当您安装<code>Ambari</code>服务器时，PostgreSQL软件包和依赖关系必须可用于安装。这些包通常作为操作系统存储库的一部分提供。请确认您具有适用于<code>postgresql-server</code>软件包的相应存储库。</p><h3 id="2-设置Ambari服务器"><a href="#2-设置Ambari服务器" class="headerlink" title="2.设置Ambari服务器"></a>2.设置Ambari服务器</h3><p>在启动<code>Ambari</code>服务器之前，必须设置Ambari服务器。安装程序将Ambari配置为与Ambari数据库通信，安装JDK并允许您自定义Ambari Server守护程序将作为运行的用户帐户。该 <code>ambari-server setup</code>命令管理设置过程。在Ambari服务器主机上运行以下命令以开始设置过程。您还可以将“ 设置选项”附加到命令。</p><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">ambari-server setup</div><div class="line"></div><div class="line"><span class="comment">###这里由于下载jdk1.8太慢速度过慢。我提前把jdk下载下来放到了/srv/jdk1.8.0_66 目录</span></div><div class="line"></div><div class="line">[root@ambari-server_01 ~]<span class="comment"># ambari-server setup</span></div><div class="line">Using python  /usr/bin/python</div><div class="line">Setup ambari-server</div><div class="line">Checking SELinux...</div><div class="line">SELinux status is <span class="string">'enabled'</span></div><div class="line">SELinux mode is <span class="string">'permissive'</span></div><div class="line">WARNING: SELinux is <span class="built_in">set</span> to <span class="string">'permissive'</span> mode and temporarily disabled.</div><div class="line">OK to <span class="built_in">continue</span> [y/n] (y)? y</div><div class="line">Customize user account <span class="keyword">for</span> ambari-server daemon [y/n] (n)? y</div><div class="line">Enter user account <span class="keyword">for</span> ambari-server daemon (root):</div><div class="line">Adjusting ambari-server permissions and ownership...</div><div class="line">Checking firewall status...</div><div class="line">Checking JDK...</div><div class="line">[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8</div><div class="line">[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7</div><div class="line">[3] Custom JDK</div><div class="line">==============================================================================</div><div class="line">Enter choice (1): 3</div><div class="line">WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.</div><div class="line">WARNING: JCE Policy files are required <span class="keyword">for</span> configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.</div><div class="line">Path to JAVA_HOME: /srv/jdk1.8.0_66</div><div class="line">Validating JDK on Ambari Server...done.</div><div class="line">Completing setup...</div><div class="line">Configuring database...</div><div class="line">Enter advanced database configuration [y/n] (n)? y</div><div class="line">Configuring database...</div><div class="line">==============================================================================</div><div class="line">Choose one of the following options:</div><div class="line">[1] - PostgreSQL (Embedded)</div><div class="line">[2] - Oracle</div><div class="line">[3] - MySQL / MariaDB</div><div class="line">[4] - PostgreSQL</div><div class="line">[5] - Microsoft SQL Server (Tech Preview)</div><div class="line">[6] - SQL Anywhere</div><div class="line">[7] - BDB</div><div class="line">==============================================================================</div><div class="line">Enter choice (1):3</div><div class="line">Database name (ambari):</div><div class="line">Postgres schema (ambari):</div><div class="line">Username (ambari):</div><div class="line">Enter Database Password (bigdata):</div><div class="line">Default properties detected. Using built-in database.</div><div class="line">Configuring ambari database...</div><div class="line">Checking PostgreSQL...</div><div class="line">Running initdb: This may take up to a minute.</div><div class="line">正在初始化数据库：[确定]</div><div class="line"></div><div class="line">About to start PostgreSQL</div><div class="line">Configuring <span class="built_in">local</span> database...</div><div class="line">Connecting to <span class="built_in">local</span> database...done.</div><div class="line">Configuring PostgreSQL...</div><div class="line">Restarting PostgreSQL</div><div class="line">Extracting system views...</div><div class="line">ambari-admin-2.4.2.0.136.jar</div><div class="line">............</div><div class="line">Adjusting ambari-server permissions and ownership...</div><div class="line">Ambari Server <span class="string">'setup'</span> completed successfully.</div><div class="line">You have mail <span class="keyword">in</span> /var/spool/mail/root</div></pre></td></tr></table></figure><h5 id="2-1-响应安装提示："><a href="#2-1-响应安装提示：" class="headerlink" title="2.1 响应安装提示："></a>2.1 响应安装提示：</h5><p>如果您没有暂时禁用<code>SELinux</code>，您可能会收到警告。接受默认值<code>（y）</code>，然后继续。</p><p>默认情况下，Ambari服务器运行在<code>root</code>。在<code>Customize user account for ambari-server daemon</code>提示符处接受默认<code>（n）</code>，以继续root。</p><p>如果要创建其他用户以运行<code>Ambari</code>服务器或分配以前创建的用户，请<code>y</code>在 <code>Customize user account for ambari-server daemon</code>提示符处选择，然后提供用户名。<br>有关以非root用户身份运行Ambari服务器的更多信息，请参阅Hortonworks数据平台Apache Ambari参考&gt; <a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.4.2.0/bk_ambari-security/content/configuring_ambari_for_non-root.html" target="_blank" rel="external">为非根用户配置Ambari</a></p><p>如果您没有暂时停用<code>iptables</code>，可能会收到警告。输入<code>y</code>以继续。</p><p>JDK<br>选择要下载的<code>JDK</code>版本。输入<code>1</code>以下载<code>Oracle JDK 1.8</code>。或者，您可以选择输入<code>自定义JDK</code>。如果选择“<code>自定义JDK</code>”，则必须在所有主机上手动安装JDK并指定<code>Java Home</code>路径。</p><p>❗️❗️【注意】</p><p>JDK支持完全取决于您选择的<code>HDP Stack</code>版本。请参阅<a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.4.2.0/bk_ambari-reference/content/ch_changing_the_jdk_version_on_an_existing_cluster.html" target="_blank" rel="external">Hortonworks数据平台Apache Ambari</a>参考以查看要安装的HDP Stack版本支持的JDK版本。默认情况下，Ambari服务器设置下载并安装Oracle JDK 1.8和随附的Java密码术扩展（JCE）策略文件。如果计划使用其他版本的JDK，请参阅 设置选项以获取更多信息。</p><p>出现提示时接受<code>Oracle JDK</code>许可证。您必须接受此许可证才能从Oracle下载必需的JDK。JDK在部署阶段安装。</p><blockquote><p>数据库选择：</p></blockquote><p>选择<code>n</code>为，<code>Enter advanced database configuration</code>以便为<code>Ambari</code>使用默认的嵌入式<code>PostgreSQL</code>数据库。默认的PostgreSQL数据库名是ambari。默认用户名和密码为ambari/bigdata。否则，要使用现有的PostgreSQL，MySQL / MariaDB或Oracle数据库与Ambari，请选择y。</p><p>如果使用现有的PostgreSQL，MySQL / MariaDB或Oracle数据库实例，请使用以下提示之一：</p><p>❗️❗️[重要]<br>在运行安装程序和输入高级数据库配置之前，必须使用<code>“使用非默认数据库</code>- Ambari”中详述的步骤准备非默认数据库实例。</p><p>❗️❗️[重要]</p><p>不支持使用Microsoft SQL Server或SQL Anywhere数据库选项。</p><p>要使用现有的Oracle实例，并为该数据库选择自己的数据库名称，用户名和密码，请输入<code>2</code>。<br>选择要使用的数据库，并提供在提示中请求的任何信息，包括主机名，端口，服务名或SID，用户名和密码。<br>要使用现有的MySQL / MariaDB数据库，并为该数据库选择自己的数据库名称，用户名和密码，请输入3。<br>选择要使用的数据库，并提供在提示中请求的任何信息，包括主机名，端口，数据库名称，用户名和密码。<br>要使用现有的PostgreSQL数据库，并为该数据库选择自己的数据库名称，用户名和密码，请输入4。<br>选择要使用的数据库，并提供在提示中请求的任何信息，包括主机名，端口，数据库名称，用户名和密码。<br>继续配置远程数据库连接属性[y / n]选择<code>y</code>。</p><blockquote><p>这里数据库用户名和密码都是默认安装：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Database name (ambari)</div><div class="line">Postgres schema (ambari)</div><div class="line">Username (ambari)</div><div class="line">Enter Database Password (bigdata)</div></pre></td></tr></table></figure><blockquote><p>这里我做了一层Nginx代理：将Ambari服务器配置为使用此代理服务器</p></blockquote><h3 id="3-启动Ambari服务器"><a href="#3-启动Ambari服务器" class="headerlink" title="3.启动Ambari服务器"></a>3.启动Ambari服务器</h3><p>在Ambari服务器主机上运行以下命令：</p><pre><code>ambari-server start</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@ambari-server ~]<span class="comment"># ambari-server start</span></div><div class="line">Using python  /usr/bin/python</div><div class="line">Starting ambari-server</div><div class="line">Ambari Server running with administrator privileges.</div><div class="line">Organizing resource files at /var/lib/ambari-server/resources...</div><div class="line">Ambari database consistency check started...</div><div class="line">No errors were found.</div><div class="line">Ambari database consistency check finished</div><div class="line">Server PID at: /var/run/ambari-server/ambari-server.pid</div><div class="line">Server out at: /var/<span class="built_in">log</span>/ambari-server/ambari-server.out</div><div class="line">Server <span class="built_in">log</span> at: /var/<span class="built_in">log</span>/ambari-server/ambari-server.log</div><div class="line">Waiting <span class="keyword">for</span> server start....................</div><div class="line">Ambari Server <span class="string">'start'</span> completed successfully.</div><div class="line">You have mail <span class="keyword">in</span> /var/spool/mail/root</div></pre></td></tr></table></figure><p>要检查Ambari服务器进程：</p><pre><code>ambari-server status</code></pre><p>停止Ambari服务器：</p><pre><code>ambari-server stop</code></pre><p>在Ambari服务器启动时，<code>Ambari</code>运行数据库一致性检查，查找问题。如果发现任何问题，Ambari服务器启动将中止，并且一条消息将打印到控制台“数据库配置一致性检查失败”。更多详细信息将写入以下日志文​​件：</p><pre><code>/var/log/ambari-server/ambari-server-check-database.log</code></pre><p>您可以通过使用以下选项跳过此检查来强制Ambari服务器启动：</p><pre><code>ambari-server start --skip-database-check</code></pre><p>如果存在数据库问题，请选择跳过此检查，在更正数据库一致性问题之前，不要对集群拓扑进行任何更改或执行集群升级。最好查看官网操作。</p><h2 id="第3章安装，配置和部署HDP集群"><a href="#第3章安装，配置和部署HDP集群" class="headerlink" title="第3章安装，配置和部署HDP集群"></a>第3章安装，配置和部署HDP集群</h2><h3 id="1-登录到Apache-Ambari"><a href="#1-登录到Apache-Ambari" class="headerlink" title="1.登录到Apache Ambari"></a>1.登录到Apache Ambari</h3><ul><li><p>将浏览器指向 <code>http://&lt;your.ambari.server&gt; :8080</code>，其中<code>&lt;your.ambari.server&gt;</code>是您的ambari服务器主机的名称。例如，默认Ambari服务器主机位于<code>http://c6401.ambari.apache.org:8080</code>。</p></li><li><p>使用默认用户名/密码登录Ambari服务器：<code>admin / admin</code>。您可以稍后更改这些凭据。</p></li></ul><h3 id="2-启动Ambari安装向导"><a href="#2-启动Ambari安装向导" class="headerlink" title="2.启动Ambari安装向导"></a>2.启动Ambari安装向导</h3><p>从<code>Ambari Welcome</code>页面，选择启动安装向导。</p><p>提供集群，管理谁可以访问群集，以及自定义视图为Ambari用户。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/Ambariwelcome.png" alt=""></figure></p><p><figure class="figure"><img src="http://docs.hortonworks.com/HDPDocuments/Ambari-2.4.2.0/bk_ambari-installation/content/figures/2/figures/170AmbariWelcome.png" alt=""></figure></p><h3 id="3-命名您的群集"><a href="#3-命名您的群集" class="headerlink" title="3.命名您的群集"></a>3.命名您的群集</h3><p>在Name your cluster，键入要创建的集群的名称。名称中不要使用空格或特殊字符。</p><p>选择Next。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_02.png" alt=""></figure></p><h3 id="4-选择版本"><a href="#4-选择版本" class="headerlink" title="4.选择版本"></a>4.选择版本</h3><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_03.png" alt=""></figure></p><p>这里我选择<code>redhat6</code> 其他的都<code>remove</code>掉。</p><p>在此步骤中，您将选择群集的软件版本和交付方式。使用公共存储库需要Internet连接。使用本地存储库需要您在网络中可用的存储库中配置软件。</p><ul><li>选择堆栈</li></ul><p>可用的HDP版本显示在TAB中。当您选择TAB时，Ambari会尝试发现该HDP堆栈的特定版本可用。该列表显示在DROPDOWN中。对于该特定版本，将显示可用的服务，其中的版本显示在TABLE中。</p><ul><li>选择版本</li></ul><p>如果Ambari可以访问Internet，则特定版本将作为选项列在DROPDOWN中。如果您有未列出的版本的版本定义文件，您可以单击添加版本…并上载VDF文件。此外，如果您无法访问Internet或不确定要安装哪个特定版本，则 默认版本定义也包含在列表中。</p><ul><li>选择存储库</li></ul><p>Ambari允许您选择从公共存储库（如果您有Internet访问权限）或本地存储库安装软件。无论您的选择如何，您都可以编辑存储库的基本URL。将显示可用的操作系统，您可以从列表中添加/删除操作系统以适合您的环境</p><p>❗️❗️注意<br>UI显示基于操作系统系列（OS系列）的存储库基本URL。请确保基于正在运行的操作系统设置正确的操作系统系列。下表将OS系列映射到操作系统。</p><ul><li><p><strong>高级选项</strong></p></li><li><p><strong>有高级存储库选项可用。</strong></p></li></ul><p>跳过存储库基本URL验证（高级）： 当您单击下一步时，Ambari将尝试连接到存储库基本URL，并验证您已输入验证存储库。如果没有，将显示一个错误，您必须在继续之前纠正。</p><p>使用<code>RedHat Satellite/Spacewalk：</code>仅当计划使用本地存储库时，才会启用此选项。当您为软件存储库选择此选项时，您负责配置<code>Satellite/Spacewalk</code>中的存储库通道，并确认所选群集版本的存储库在群集中的主机上可用。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_04.png" alt=""></figure></p><h3 id="5-安装选项"><a href="#5-安装选项" class="headerlink" title="5.安装选项"></a>5.安装选项</h3><p>为了构建集群，安装向导将提示您有关如何设置它的一般信息。您需要提供每个主机的FQDN。该向导还需要访问在设置无密码SSH中创建的私钥文件  。使用主机名和密钥文件信息，向导可以定位，访问和与群集中的所有主机安全交互。</p><p>使用Target Hosts文本框输入主机名列表，每行一个。您可以使用括号内的范围来表示较大的主机集。例如，对于host01.domain通过host10.domain使用 host[01-10].domain</p><p>⚠️ <strong>安装服务器集群机器一定要系统版本要一致不然安装会提示版本不兼容。</strong></p><p>❗️❗️    注意<br>如果要在EC2上部署，请使用内部专用<code>DNS主机名</code>。</p><p>在ambari服务器配置hosts</p><pre><code>vim /etc/hosts</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.151</span>    <span class="selector-tag">datanode151</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.173</span>    <span class="selector-tag">datanode_173</span> <span class="selector-tag">datanode-173</span><span class="selector-class">.hadoop</span></div></pre></td></tr></table></figure><p>如果要让<code>Ambari</code>使用SSH在所有主机上自动安装Ambari代理，请选择<code>Provide your SSH Private Key</code>并使用部分中的 <code>Choose File</code>按钮<code>Host Registration Information</code>查找与先前在所有主机上安装的公钥相匹配的私钥文件，或者剪切并粘贴键手动插入文本框。</p><p>填写您选择的SSH密钥的用户名。如果不想使用root用户，则必须为可以在不输入密码的情况下执行sudo的帐户提供用户名。如果您的环境中的主机上的SSH配置为22以外的端口，您也可以更改它。</p><p>如果您不希望Ambari自动安装Ambari代理，请选择<code>Perform manual registration</code>。有关更多信息，请参阅手动安装Ambari代理。</p><p>选择<code>Register and Confirm</code>继续。</p><p>这里提示：The following hostnames are not valid FQDNs: datanode_173.hadoop</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_06.png" alt=""></figure></p><p>这里跳转到安装页面：发现报错提示datanode-173.hadoop主机访问Ambari机器不能访问。<br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_07.png" alt=""></figure></p><h3 id="6-确认主机"><a href="#6-确认主机" class="headerlink" title="6.确认主机"></a>6.确认主机</h3><p><code>Confirm Hosts</code> 提示您确认<code>Ambari</code>已为您的集群找到正确的主机，并检查这些主机以确保它们具有继续安装所需的正确目录，软件包和进程。</p><p>如果选择了错误的主机，您可以通过选择相应的复选框并单击灰色<code>Remove Selected</code>按钮来删除它们。要删除单个主机，请单击Remove“操作”列中的小白色按钮。</p><p>在屏幕底部，您可能会注意到一个黄色框，表示在检查过程中遇到了一些警告。例如，您的主机可能已有<code>wget</code>或的副本 <code>curl</code>。选择<code>Click here to see the warnings</code> 查看检查内容和导致警告的原因的列表。警告页面还提供对python脚本的访问，可以帮助您清除可能遇到的任何问题，让您运行<code>Rerun Checks</code>。</p><p>在datanode_173服务器配置hosts</p><pre><code>vim /etc/hosts</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.151</span>    <span class="selector-tag">datanode151</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.173</span>    <span class="selector-tag">datanode_173</span> <span class="selector-tag">datanode-173</span><span class="selector-class">.hadoop</span></div></pre></td></tr></table></figure><p>每台节点里配置FQDN，如下以主节点为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network</div><div class="line">NETWORKING=yes</div><div class="line">HOSTNAME=SY-001.hadoop</div></pre></td></tr></table></figure><p>配置上就可以了。 把datanode151也是ambari机器配置在hosts就可以了。</p><p><strong>最好设置root的无密码登录，因为我们配置的集群都是内网的，没什么安全性问题，使用root操作可以省去一些麻烦，非root用户可能在安装Hadoop组件时不能成功</strong></p><p>下面是我安装这里提示没有找到文件目录查看安装报错操作：</p><pre><code>mkdir /var/lib/ambari-agent/data</code></pre><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/Ambari_08.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_09.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_10.png" alt=""></figure></p><h3 id="7-选择服务"><a href="#7-选择服务" class="headerlink" title="7.选择服务"></a>7.选择服务</h3><p>将看到选择要安装到群集中的服务。HDP堆栈包括许多服务。您可以选择立即安装任何其他可用服务，或稍后添加服务。默认情况下，安装向导将选择所有可用的服务进行安装。</p><p>选择<code>none</code>清除所有选择，或选择 <code>all</code>选择所有列出的服务。</p><p>选择或清除单个复选框以定义一组要立即安装的服务。</p><p>选择要立即安装的服务后，选择Next。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/ambari_11.png" alt=""></figure></p><h3 id="8-分配主站"><a href="#8-分配主站" class="headerlink" title="8.分配主站"></a>8.分配主站</h3><p>Ambari安装向导会将所选服务的主组件分配给集群中的相应主机，并在Assign Masters中显示分配。左列显示服务和当前主机。右列显示主机的当前主组件分配，指示每个主机上安装的CPU内核数量和RAM数量。</p><p>要更改服务的主机分配，请从该服务的下拉菜单中选择主机名。</p><p>要删除ZooKeeper实例，请单击要删除的主机地址旁边的绿色减号图标。</p><p>当您对作业感到满意时，选择Next。</p><p><figure class="figure"><img src="" alt=""></figure></p><h3 id="9-分配从属和客户端"><a href="#9-分配从属和客户端" class="headerlink" title="9.分配从属和客户端"></a>9.分配从属和客户端</h3><p>Ambari安装向导将从属组件（DataNodes，NodeManager和RegionServers）分配给集群中的相应主机。它还会尝试选择主机以安装适当的客户端集。</p><p>使用<code>all</code>或<code>none</code>可分别选择列中的所有主机或不选择任何主机。</p><p>如果主机旁边有星号，则该主机也运行一个或多个主组件。将鼠标悬停在星号上，以查看该主机上的哪些主组件。</p><p>通过使用特定主机旁边的复选框来微调您的选择。</p><p>当你对你的作业感到满意时，选择<code>Next</code>。</p><h3 id="10-自定义服务"><a href="#10-自定义服务" class="headerlink" title="10.自定义服务"></a>10.自定义服务</h3><p>自定义服务步骤为您提供一组选项卡，您可以查看和修改HDP集群设置。向导会尝试为每个选项设置合理的默认值。你是强烈建议，以检查这些设置为您的要求可能略有不同。</p><p>浏览每个服务标签，然后将光标悬停在每个属性上，您可以看到属性做什么的简要说明。显示的服务选项卡数取决于您决定在群集中安装的服务。任何需要输入的选项卡都会显示一个红色徽章，其中包含需要注意的属性数。选择显示红色徽章编号的每个服务选项卡，然后输入相应的信息。</p><ul><li>目录</li></ul><p>HDP将存储信息的目录的选择是至关重要的。Ambari将尝试根据您环境中可用的安装点选择合理的默认值，但强烈建议您查看Ambari推荐的默认目录设置。特别是，确认目录，例如<code>/tmp和 /var</code>被不被用于下<code>HDFS的NameNode</code>目录和数据管理部目录HDFS标签。</p><ul><li>密码</li></ul><p>您必须为Hive和Oozie服务以及Knox的主密钥提供数据库密码。使用Hive作为示例，选择Hive选项卡并展开高级部分。在以红色标记的数据库密码字段中，提供密码，然后重新键入以确认。</p><p>安装各个服务，并且完成安装后会启动相关服务，安装过程比较长，如中中出现错误，根据具体提供或日志进行操作。 </p><p>这里我就不贴出来了，因为测试环境机器我做测试用机器配置不够所有后面结果经验写出来了。</p><p>安装的还是提示失败：<code>ImportError: No module named rpm</code></p><p>参考这篇文章重新安装解决了这个问题：<a href="http://stackoverflow.com/questions/17490921/no-module-named-rpm-when-i-call-yum-on-shell" target="_blank" rel="external">ImportError: No module named rpm</a></p><h3 id="11-安装，启动和测试"><a href="#11-安装，启动和测试" class="headerlink" title="11.安装，启动和测试"></a>11.安装，启动和测试</h3><p>安装的进度将显示在屏幕上。Ambari安装，启动，并对每个组件运行一个简单的测试。过程的总体状态显示在屏幕顶部的进度栏中，主机的主机状态显示在主要部分。在此过程中不要刷新浏览器。刷新浏览器可能会中断进度指示器。</p><p>要查看每个主机已完成的任务的具体信息，请单击Message相应主机列中的链接。在 Tasks弹出窗口中，单击单个任务以查看相关的日志文件。您可以使用Show下拉列表选择过滤条件。要查看更大版本的日志内容，请单击Open图标或将内容复制到剪贴板，使用Copy图标。</p><p><strong>安装完成效果图:</strong></p><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari002.png" alt=""></figure></p><blockquote><p>让我们从左侧栏或下拉菜单中选择Yarn进入YARN信息中心。</p></blockquote><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari004.png" alt=""></figure></p><blockquote><p>我们将开始更新线程容量调度策略的配置。</p></blockquote><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari005.png" alt=""></figure></p><p>向下滚动到<code>Scheduler</code>页面的部分。默认容量调度策略只有一个队列。</p><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari006.png" alt=""></figure></p><p>让我们看看调度策略。向上滚动到页面顶部，然后点击快速链接。然后从下拉列表中选择<code>ResourceManager UI</code>。</p><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari007.png" alt=""></figure></p><blockquote><p>正如你可以看到，我们只有默认策略。</p></blockquote><p><figure class="figure"><img src="http://hortonassets.s3.amazonaws.com/ambari1_7/ambari008.png" alt=""></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>安装Ambari官网地址<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.4.2.0/bk_ambari-installation/content/download_the_ambari_repo_lnx6.html" target="_blank" rel="external">install Ambari</a><br><a href="https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.4.2" target="_blank" rel="external">编译安装Ambari 2.4.2安装指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群&quot;&gt;&lt;a href=&quot;#HORTONW0RKS数据平台搭建Ambari管理监控Hadoop集群&quot; class=&quot;headerlink&quot; title=&quot;HORTONW0RKS数据平台搭建Ambar
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Ambari" scheme="http://blog.yancy.cc/tags/Ambari/"/>
    
  </entry>
  
  <entry>
    <title>Bigdata-hadoop新增节点集群启动请求异常：Last contact：200</title>
    <link href="http://blog.yancy.cc/2017/05/08/Bigdata-hadoop/%20hadoop%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E8%AF%B7%E6%B1%82%E5%BC%82%E5%B8%B8%EF%BC%9ALast%20contact%EF%BC%9A200/"/>
    <id>http://blog.yancy.cc/2017/05/08/Bigdata-hadoop/ hadoop新增节点集群启动请求异常：Last contact：200/</id>
    <published>2017-05-08T09:56:03.000Z</published>
    <updated>2017-09-26T08:17:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言闲谈："><a href="#前言闲谈：" class="headerlink" title="前言闲谈："></a>前言闲谈：</h3><p>之前做CDN云计算公司来到美年大健康现在在一家医疗大数据公司负责运维部门大大小小的活，既然是医疗大数据当然离不开大数据存储的维护，现在也同时维护大数据运维相关工作 <code>hadoop,spark,sqoop,hue,hive,Hbase,zookeeper</code>等等 测试开发生产使用起来,从集群环境维护 提升数据稳定性 高可用维护。</p><p>前面说了一堆自己闲聊，真正解决这次问题是hadoop新增节点需要注意哪几点：</p><p><code>新增节点如何新增我会在另外一篇详细说的这里我讲一些需要注意掉的问题。</code></p><h3 id="需要修改几个配置："><a href="#需要修改几个配置：" class="headerlink" title="需要修改几个配置："></a>需要修改几个配置：</h3><p>（1）hadoop data 数据目录 VERSION 里面的搭建集群时，直接克隆会出现这个问题。解决方法同上两种，最好修改${/hadoop/tmp/dir}/dfs/data/current/VERSION中的storageID，使其不同。第一种会导致hdfs数据丢失。</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">（1） datanode启动是会加载DataStorage，如果不存在则会format</div><div class="line">（2）初次启动DataStorage的storageID是空的，所以会生成一个storageID</div></pre></td></tr></table></figure><p>参考我解决的：<code>这里我拷贝过来 直接删除。等集群namenode启动 会自动生成。</code></p><p>这个解决以后 新增的机器必须关闭防火墙。因为这个原因会导致我 hadoop新增节点集群启动请求异常：Last contact：200</p><p>（2） 集群重启时防火墙自动开启导致：</p><p>这里贴张图片给大家看看：</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/hadoop1.png" alt=""></figure></p><p>问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2017-07-04 18:43:30,475 INFO org.apache.hadoop.ipc.Client: Retrying connect to server: /192.168.18.218:9000. Already tried 8 time(s).</div><div class="line">2017-07-04 18:43:31,475 INFO org.apache.hadoop.ipc.Client: Retrying connect to server: /192.168.18.218:9000. Already tried 9 time(s).</div><div class="line">2017-07-04 18:43:31,479 ERROR org.apache.hadoop.hdfs.server.datanode.DataNode: java.io.IOException: Call to /192.168.18.218:9000 failed on <span class="built_in">local</span> exception: java.net.NoRouteToHostException: 没有到主机的路由</div><div class="line">        at org.apache.hadoop.ipc.Client.wrapException(Client.java:775)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:743)</div><div class="line">解决方法：在root权限下关闭防火墙：service iptables stop</div></pre></td></tr></table></figure><p>最好配置成机器重启默认防火墙关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@junlings ~]<span class="comment"># chkconfig iptables off   #开机不启动防火墙服务</span></div><div class="line">[root@junlings ~]<span class="comment"># chkconfig iptables on   #开机启动防火墙服务</span></div></pre></td></tr></table></figure><p>解决以后服务重新跑一遍已经搞定。</p><p><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/hadoop2.png" alt=""></figure><br><figure class="figure"><img src="http://7xrthw.com1.z0.glb.clouddn.com/hadoop3.png" alt=""></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言闲谈：&quot;&gt;&lt;a href=&quot;#前言闲谈：&quot; class=&quot;headerlink&quot; title=&quot;前言闲谈：&quot;&gt;&lt;/a&gt;前言闲谈：&lt;/h3&gt;&lt;p&gt;之前做CDN云计算公司来到美年大健康现在在一家医疗大数据公司负责运维部门大大小小的活，既然是医疗大数据当然离不开大数
      
    
    </summary>
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/categories/Bigdata-Hadoop/"/>
    
    
      <category term="Bigdata Hadoop" scheme="http://blog.yancy.cc/tags/Bigdata-Hadoop/"/>
    
  </entry>
  
</feed>
